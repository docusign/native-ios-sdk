// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target arm64-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name DocuSignAPI
import CoreData
@_exported import DocuSignAPI
import Foundation
import Swift
import SystemConfiguration
import UIKit
import _Concurrency
public struct DSAPIContact : Swift.Codable {
  public var cloudProvider: Swift.String?
  public var cloudProviderContainerId: Swift.String?
  public var contactId: Swift.String?
  public var contactPhoneNumbers: [DocuSignAPI.DSAPIContactPhoneNumber]?
  public var contactUri: Foundation.URL?
  public var emails: [Swift.String]?
  public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  public var isOwner: Swift.Bool
  public var name: Swift.String?
  public var organization: Swift.String?
  public var roomContactType: Swift.String?
  @DocuSignAPI.BoolFromString public var shared: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var signingGroup: Swift.String?
  public var signingGroupName: Swift.String?
  public init(cloudProvider: Swift.String? = nil, cloudProviderContainerId: Swift.String? = nil, contactId: Swift.String? = nil, contactPhoneNumbers: [DocuSignAPI.DSAPIContactPhoneNumber]? = nil, contactUri: Foundation.URL? = nil, emails: [Swift.String]? = nil, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, isOwner: Swift.Bool = false, name: Swift.String? = nil, organization: Swift.String? = nil, roomContactType: Swift.String? = nil, shared: Swift.Bool = false, signingGroup: Swift.String? = nil, signingGroupName: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers open class ConnectAPI {
  open class func connectDeleteConnectConfig(accountId: Swift.String, connectId: Swift.String, completion: @escaping ((_ data: Swift.Void?, _ error: Swift.Error?) -> Swift.Void))
  open class func connectDeleteConnectConfigWithRequestBuilder(accountId: Swift.String, connectId: Swift.String) -> DocuSignAPI.RequestBuilder<Swift.Void>
  open class func connectFailuresDeleteConnectFailureLog(accountId: Swift.String, failureId: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPIConnectDeleteFailureResult?, _ error: Swift.Error?) -> Swift.Void))
  open class func connectFailuresDeleteConnectFailureLogWithRequestBuilder(accountId: Swift.String, failureId: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIConnectDeleteFailureResult>
  open class func connectFailuresGetConnectLogs(accountId: Swift.String, fromDate: Swift.String? = nil, toDate: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIConnectLogs?, _ error: Swift.Error?) -> Swift.Void))
  open class func connectFailuresGetConnectLogsWithRequestBuilder(accountId: Swift.String, fromDate: Swift.String? = nil, toDate: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIConnectLogs>
  open class func connectGetConnectAllUsers(accountId: Swift.String, connectId: Swift.String, count: Swift.String? = nil, domainUsersOnly: Swift.String? = nil, emailSubstring: Swift.String? = nil, startPosition: Swift.String? = nil, status: Swift.String? = nil, userNameSubstring: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIIntegratedConnectUserInfoList?, _ error: Swift.Error?) -> Swift.Void))
  open class func connectGetConnectAllUsersWithRequestBuilder(accountId: Swift.String, connectId: Swift.String, count: Swift.String? = nil, domainUsersOnly: Swift.String? = nil, emailSubstring: Swift.String? = nil, startPosition: Swift.String? = nil, status: Swift.String? = nil, userNameSubstring: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIIntegratedConnectUserInfoList>
  open class func connectGetConnectConfig(accountId: Swift.String, connectId: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPIConnectConfigResults?, _ error: Swift.Error?) -> Swift.Void))
  open class func connectGetConnectConfigWithRequestBuilder(accountId: Swift.String, connectId: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIConnectConfigResults>
  open class func connectGetConnectConfigs(accountId: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPIConnectConfigResults?, _ error: Swift.Error?) -> Swift.Void))
  open class func connectGetConnectConfigsWithRequestBuilder(accountId: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIConnectConfigResults>
  open class func connectGetConnectUsers(accountId: Swift.String, connectId: Swift.String, count: Swift.String? = nil, emailSubstring: Swift.String? = nil, listIncludedUsers: Swift.String? = nil, startPosition: Swift.String? = nil, status: Swift.String? = nil, userNameSubstring: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIIntegratedUserInfoList?, _ error: Swift.Error?) -> Swift.Void))
  open class func connectGetConnectUsersWithRequestBuilder(accountId: Swift.String, connectId: Swift.String, count: Swift.String? = nil, emailSubstring: Swift.String? = nil, listIncludedUsers: Swift.String? = nil, startPosition: Swift.String? = nil, status: Swift.String? = nil, userNameSubstring: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIIntegratedUserInfoList>
  open class func connectLogDeleteConnectLog(accountId: Swift.String, logId: Swift.String, completion: @escaping ((_ data: Swift.Void?, _ error: Swift.Error?) -> Swift.Void))
  open class func connectLogDeleteConnectLogWithRequestBuilder(accountId: Swift.String, logId: Swift.String) -> DocuSignAPI.RequestBuilder<Swift.Void>
  open class func connectLogDeleteConnectLogs(accountId: Swift.String, completion: @escaping ((_ data: Swift.Void?, _ error: Swift.Error?) -> Swift.Void))
  open class func connectLogDeleteConnectLogsWithRequestBuilder(accountId: Swift.String) -> DocuSignAPI.RequestBuilder<Swift.Void>
  open class func connectLogGetConnectLog(accountId: Swift.String, logId: Swift.String, additionalInfo: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIConnectLog?, _ error: Swift.Error?) -> Swift.Void))
  open class func connectLogGetConnectLogWithRequestBuilder(accountId: Swift.String, logId: Swift.String, additionalInfo: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIConnectLog>
  open class func connectLogGetConnectLogs(accountId: Swift.String, fromDate: Swift.String? = nil, toDate: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIConnectLogs?, _ error: Swift.Error?) -> Swift.Void))
  open class func connectLogGetConnectLogsWithRequestBuilder(accountId: Swift.String, fromDate: Swift.String? = nil, toDate: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIConnectLogs>
  open class func connectMobileNotifiersDeleteMobileNotifier(accountId: Swift.String, body: DocuSignAPI.DSAPIMobileNotifierConfigurationInformation? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIMobileNotifierConfigurationInformation?, _ error: Swift.Error?) -> Swift.Void))
  open class func connectMobileNotifiersDeleteMobileNotifierWithRequestBuilder(accountId: Swift.String, body: DocuSignAPI.DSAPIMobileNotifierConfigurationInformation? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIMobileNotifierConfigurationInformation>
  open class func connectMobileNotifiersGetMobileNotifiers(accountId: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPIMobileNotifierConfigurationInformation?, _ error: Swift.Error?) -> Swift.Void))
  open class func connectMobileNotifiersGetMobileNotifiersWithRequestBuilder(accountId: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIMobileNotifierConfigurationInformation>
  open class func connectMobileNotifiersPutMobileNotifier(accountId: Swift.String, body: DocuSignAPI.DSAPIMobileNotifierConfigurationInformation? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIMobileNotifierConfigurationInformation?, _ error: Swift.Error?) -> Swift.Void))
  open class func connectMobileNotifiersPutMobileNotifierWithRequestBuilder(accountId: Swift.String, body: DocuSignAPI.DSAPIMobileNotifierConfigurationInformation? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIMobileNotifierConfigurationInformation>
  open class func connectPostConnectConfiguration(accountId: Swift.String, body: DocuSignAPI.DSAPIConnectCustomConfiguration? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIConnectCustomConfiguration?, _ error: Swift.Error?) -> Swift.Void))
  open class func connectPostConnectConfigurationWithRequestBuilder(accountId: Swift.String, body: DocuSignAPI.DSAPIConnectCustomConfiguration? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIConnectCustomConfiguration>
  open class func connectPublishPutConnectRetry(accountId: Swift.String, body: DocuSignAPI.DSAPIConnectFailureFilter? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIConnectFailureResults?, _ error: Swift.Error?) -> Swift.Void))
  open class func connectPublishPutConnectRetryWithRequestBuilder(accountId: Swift.String, body: DocuSignAPI.DSAPIConnectFailureFilter? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIConnectFailureResults>
  open class func connectPublishPutConnectRetryByEnvelope(accountId: Swift.String, envelopeId: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPIConnectFailureResults?, _ error: Swift.Error?) -> Swift.Void))
  open class func connectPublishPutConnectRetryByEnvelopeWithRequestBuilder(accountId: Swift.String, envelopeId: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIConnectFailureResults>
  open class func connectPutConnectConfiguration(accountId: Swift.String, body: DocuSignAPI.DSAPIConnectCustomConfiguration? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIConnectCustomConfiguration?, _ error: Swift.Error?) -> Swift.Void))
  open class func connectPutConnectConfigurationWithRequestBuilder(accountId: Swift.String, body: DocuSignAPI.DSAPIConnectCustomConfiguration? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIConnectCustomConfiguration>
  @objc deinit
}
public struct DSAPISmartSectionDisplaySettings : Swift.Codable {
  public var cellStyle: Swift.String?
  public var collapsibleSettings: DocuSignAPI.DSAPISmartSectionCollapsibleDisplaySettings?
  public var display: Swift.String?
  public var displayLabel: Swift.String?
  public var displayOrder: Swift.Int?
  public var displayPageNumber: Swift.Int?
  public var hideLabelWhenOpened: Swift.Bool
  public var inlineOuterStyle: Swift.String?
  public var labelWhenOpened: Swift.String?
  public var preLabel: Swift.String?
  public var scrollToTopWhenOpened: Swift.Bool
  public var tableStyle: Swift.String?
  public init(cellStyle: Swift.String? = nil, collapsibleSettings: DocuSignAPI.DSAPISmartSectionCollapsibleDisplaySettings? = nil, display: Swift.String? = nil, displayLabel: Swift.String? = nil, displayOrder: Swift.Int? = nil, displayPageNumber: Swift.Int? = nil, hideLabelWhenOpened: Swift.Bool = false, inlineOuterStyle: Swift.String? = nil, labelWhenOpened: Swift.String? = nil, preLabel: Swift.String? = nil, scrollToTopWhenOpened: Swift.Bool = false, tableStyle: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIEnvelopePurgeConfiguration : Swift.Codable {
  @DocuSignAPI.BoolFromString public var purgeEnvelopes: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  @DocuSignAPI.BoolFromString public var redactPII: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  @DocuSignAPI.BoolFromString public var removeTabsAndEnvelopeAttachments: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var retentionDays: Swift.String?
  public init(purgeEnvelopes: Swift.Bool = false, redactPII: Swift.Bool = false, removeTabsAndEnvelopeAttachments: Swift.Bool = false, retentionDays: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIPaymentGatewayAccountSetting : Swift.Codable {
  public var apiFields: Swift.String?
  public var authorizationCode: Swift.String?
  public var credentialStatus: Swift.String?
  public var merchantId: Swift.String?
  public init(apiFields: Swift.String? = nil, authorizationCode: Swift.String? = nil, credentialStatus: Swift.String? = nil, merchantId: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPICustomSettingsInformation : Swift.Codable {
  public var customSettings: [DocuSignAPI.DSAPINameValue]?
  public init(customSettings: [DocuSignAPI.DSAPINameValue]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @objcMembers public class DSAPIUserSignatureDefinition : ObjectiveC.NSObject, Swift.Codable {
  @objc public var dateStampProperties: DocuSignAPI.DSAPIDateStampProperties?
  @objc @DocuSignAPI.BoolFromString public var disallowUserResizeStamp: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var externalID: Swift.String?
  @objc public var imageType: Swift.String?
  @objc public var isDefault: Swift.String?
  @objc public var nrdsId: Swift.String?
  @objc public var nrdsLastName: Swift.String?
  @objc public var phoneticName: Swift.String?
  @objc public var signatureFont: Swift.String?
  @objc public var signatureId: Swift.String?
  @objc public var signatureInitials: Swift.String?
  @objc public var signatureName: Swift.String?
  @objc public var signatureType: Swift.String?
  @objc public var stampFormat: Swift.String?
  @objc public var stampSizeMM: Swift.String?
  @objc public init(dateStampProperties: DocuSignAPI.DSAPIDateStampProperties? = nil, disallowUserResizeStamp: Swift.Bool = false, externalID: Swift.String? = nil, imageType: Swift.String? = nil, isDefault: Swift.String? = nil, nrdsId: Swift.String? = nil, nrdsLastName: Swift.String? = nil, phoneticName: Swift.String? = nil, signatureFont: Swift.String? = nil, signatureId: Swift.String? = nil, signatureInitials: Swift.String? = nil, signatureName: Swift.String? = nil, signatureType: Swift.String? = nil, stampFormat: Swift.String? = nil, stampSizeMM: Swift.String? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIApiRequestLogsResult : Swift.Codable {
  public var apiRequestLogs: [DocuSignAPI.DSAPIApiRequestLog]?
  public init(apiRequestLogs: [DocuSignAPI.DSAPIApiRequestLog]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers open class OrganizationsAPI {
  open class func orgReportingSiteGetReportV2(organizationId: Swift.String, reportCorrelationId: Swift.String, completion: @escaping ((_ data: Swift.Void?, _ error: Swift.Error?) -> Swift.Void))
  open class func orgReportingSiteGetReportV2WithRequestBuilder(organizationId: Swift.String, reportCorrelationId: Swift.String) -> DocuSignAPI.RequestBuilder<Swift.Void>
  @objc deinit
}
public struct DSAPIPageRequest : Swift.Codable {
  public var password: Swift.String?
  public var rotate: Swift.String?
  public init(password: Swift.String? = nil, rotate: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIEnvelopeTransactionStatus : Swift.Codable {
  public var envelopeId: Swift.String?
  public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  public var status: Swift.String?
  public var transactionId: Swift.String?
  public init(envelopeId: Swift.String? = nil, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, status: Swift.String? = nil, transactionId: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIAccountPasswordLockoutDurationMinutes : Swift.Codable {
  public var maximumMinutes: Swift.String?
  public var minimumMinutes: Swift.String?
  public init(maximumMinutes: Swift.String? = nil, minimumMinutes: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPISsn4InformationInput : Swift.Codable {
  public var displayLevelCode: Swift.String?
  public var receiveInResponse: Swift.String?
  public var ssn4: Swift.String?
  public init(displayLevelCode: Swift.String? = nil, receiveInResponse: Swift.String? = nil, ssn4: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @objcMembers public class DSAPIEnvelopeDocumentsResult : ObjectiveC.NSObject, Swift.Codable {
  @objc public var envelopeDocuments: [DocuSignAPI.DSAPIEnvelopeDocument]?
  @objc public var envelopeId: Swift.String?
  @objc public init(envelopeDocuments: [DocuSignAPI.DSAPIEnvelopeDocument]? = nil, envelopeId: Swift.String? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct DSAPISigningGroupUsers : Swift.Codable {
  public var users: [DocuSignAPI.DSAPISigningGroupUser]?
  public init(users: [DocuSignAPI.DSAPISigningGroupUser]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIAccountIdentityInputOption : Swift.Codable {
  public var isRequired: Swift.Bool
  public var optionName: Swift.String?
  public var valueType: Swift.String?
  public init(isRequired: Swift.Bool = false, optionName: Swift.String? = nil, valueType: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPINotificationDefaults : Swift.Codable {
  public var apiEmailNotifications: DocuSignAPI.DSAPINotificationDefaultSettings?
  public var emailNotifications: DocuSignAPI.DSAPINotificationDefaultSettings?
  public init(apiEmailNotifications: DocuSignAPI.DSAPINotificationDefaultSettings? = nil, emailNotifications: DocuSignAPI.DSAPINotificationDefaultSettings? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIAccountIdentityVerificationWorkflow : Swift.Codable {
  public var defaultDescription: Swift.String?
  public var defaultName: Swift.String?
  public var inputOptions: [DocuSignAPI.DSAPIAccountIdentityInputOption]?
  public var signatureProvider: DocuSignAPI.DSAPIAccountSignatureProvider?
  public var steps: [DocuSignAPI.DSAPIAccountIdentityVerificationStep]?
  public var workflowId: Swift.String?
  public var workflowResourceKey: Swift.String?
  public init(defaultDescription: Swift.String? = nil, defaultName: Swift.String? = nil, inputOptions: [DocuSignAPI.DSAPIAccountIdentityInputOption]? = nil, signatureProvider: DocuSignAPI.DSAPIAccountSignatureProvider? = nil, steps: [DocuSignAPI.DSAPIAccountIdentityVerificationStep]? = nil, workflowId: Swift.String? = nil, workflowResourceKey: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIAccountNotification : Swift.Codable {
  public var expirations: DocuSignAPI.DSAPIExpirations?
  public var reminders: DocuSignAPI.DSAPIReminders?
  @DocuSignAPI.BoolFromString public var userOverrideEnabled: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public init(expirations: DocuSignAPI.DSAPIExpirations? = nil, reminders: DocuSignAPI.DSAPIReminders? = nil, userOverrideEnabled: Swift.Bool = false)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @objcMembers public class DSAPIRecipientSMSAuthentication : ObjectiveC.NSObject, Swift.Codable {
  @objc public var senderProvidedNumbers: [Swift.String]?
  @objc public var senderProvidedNumbersMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public init(senderProvidedNumbers: [Swift.String]? = nil, senderProvidedNumbersMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct DSAPITemplateInformation : Swift.Codable {
  public var templates: [DocuSignAPI.DSAPITemplateSummary]?
  public init(templates: [DocuSignAPI.DSAPITemplateSummary]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class DSClientAPI : ObjectiveC.NSObject {
  @objc public static var basePath: Swift.String {
    get
  }
  @objc public static var customHeaders: DocuSignAPI.HeadersDict {
    get
  }
  public static var mockRequestBuilderFactory: DocuSignAPI.RequestBuilderFactory? {
    get
  }
  public static var requestBuilderFactory: DocuSignAPI.RequestBuilderFactory {
    get
  }
  @objc @discardableResult
  convenience public init(basePath: Swift.String, customHeaders: DocuSignAPI.HeadersDict)
  @objc deinit
}
open class RequestBuilder<T> {
  final public let parameters: DocuSignAPI.RequestBody?
  final public let isBody: Swift.Bool
  final public let method: Swift.String
  final public let URLString: Swift.String
  public var mockFileName: Swift.String?
  final public let boundry: Swift.String?
  public var onProgressReady: ((Foundation.Progress) -> ())?
  required public init(method: Swift.String, URLString: Swift.String, parameters: DocuSignAPI.RequestBody?, isBody: Swift.Bool, headers: [Swift.String : Swift.String] = [:], boundry: Swift.String? = nil)
  open func addHeaders(_ aHeaders: [Swift.String : Swift.String])
  open func execute(_ completion: @escaping (_ response: DocuSignAPI.Response<T>?, _ error: Swift.Error?) -> Swift.Void)
  @objc deinit
}
public protocol RequestBuilderFactory {
  func getNonDecodableBuilder<T>() -> DocuSignAPI.RequestBuilder<T>.Type
  func getBuilder<T>() -> DocuSignAPI.RequestBuilder<T>.Type where T : Swift.Decodable, T : Swift.Encodable
}
public struct DSAPIWorkspaceItemList : Swift.Codable {
  public var items: [DocuSignAPI.DSAPIWorkspaceItem]?
  public init(items: [DocuSignAPI.DSAPIWorkspaceItem]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIBrandResources : Swift.Codable {
  public var createdByUserInfo: DocuSignAPI.DSAPIUserInfo?
  public var createdDate: Foundation.Date?
  public var dataNotSavedNotInMaster: [Swift.String]?
  public var modifiedByUserInfo: DocuSignAPI.DSAPIUserInfo?
  public var modifiedDate: Foundation.Date?
  public var modifiedTemplates: [Swift.String]?
  public var resourcesContentType: Swift.String?
  public var resourcesContentUri: Foundation.URL?
  public init(createdByUserInfo: DocuSignAPI.DSAPIUserInfo? = nil, createdDate: Foundation.Date? = nil, dataNotSavedNotInMaster: [Swift.String]? = nil, modifiedByUserInfo: DocuSignAPI.DSAPIUserInfo? = nil, modifiedDate: Foundation.Date? = nil, modifiedTemplates: [Swift.String]? = nil, resourcesContentType: Swift.String? = nil, resourcesContentUri: Foundation.URL? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIConnectUserObject : Swift.Codable {
  public var configurationtype: Swift.String?
  public var connectId: Swift.String?
  public var enabled: Swift.String?
  public var hasAccess: Swift.String?
  public var senderSearchableItems: [Swift.String]?
  public init(configurationtype: Swift.String? = nil, connectId: Swift.String? = nil, enabled: Swift.String? = nil, hasAccess: Swift.String? = nil, senderSearchableItems: [Swift.String]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIServiceVersion : Swift.Codable {
  public var version: Swift.String?
  public var versionUrl: Foundation.URL?
  public init(version: Swift.String? = nil, versionUrl: Foundation.URL? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIPhoneNumber : Swift.Codable {
  @DocuSignAPI.BoolFromString public var anchorAllowWhiteSpaceInCharacters: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var anchorAllowWhiteSpaceInCharactersMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var anchorCaseSensitive: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var anchorCaseSensitiveMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorHorizontalAlignment: Swift.String?
  public var anchorHorizontalAlignmentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var anchorIgnoreIfNotPresent: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var anchorIgnoreIfNotPresentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var anchorMatchWholeWord: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var anchorMatchWholeWordMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorString: Swift.String?
  public var anchorStringMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorTabProcessorVersion: Swift.String?
  public var anchorTabProcessorVersionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorUnits: Swift.String?
  public var anchorUnitsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorXOffset: Swift.String?
  public var anchorXOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorYOffset: Swift.String?
  public var anchorYOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var bold: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var boldMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var concealValueOnDocument: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var concealValueOnDocumentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var conditionalParentLabel: Swift.String?
  public var conditionalParentLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var conditionalParentValue: Swift.String?
  public var conditionalParentValueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var customTabId: Swift.String?
  public var customTabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var disableAutoSize: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var disableAutoSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var documentId: Swift.String?
  public var documentIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  public var font: Swift.String?
  public var fontColor: Swift.String?
  public var fontColorMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var fontMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var fontSize: Swift.String?
  public var fontSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var formOrder: Swift.String?
  public var formOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var formPageLabel: Swift.String?
  public var formPageLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var formPageNumber: Swift.String?
  public var formPageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var height: Swift.String?
  public var heightMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var italic: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var italicMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var localePolicy: DocuSignAPI.DSAPILocalePolicyTab?
  @DocuSignAPI.BoolFromString public var locked: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var lockedMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var maxLength: Swift.String?
  public var maxLengthMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var mergeField: DocuSignAPI.DSAPIMergeField?
  public var mergeFieldXml: Swift.String?
  public var name: Swift.String?
  public var nameMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var originalValue: Swift.String?
  public var originalValueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var pageNumber: Swift.String?
  public var pageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var recipientId: Swift.String?
  public var recipientIdGuid: Swift.String?
  public var recipientIdGuidMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var recipientIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var required: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var requiredMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var smartContractInformation: DocuSignAPI.DSAPISmartContractInformation?
  public var source: Swift.String?
  public var status: Swift.String?
  public var statusMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var tabGroupLabels: [Swift.String]?
  public var tabGroupLabelsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var tabId: Swift.String?
  public var tabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var tabLabel: Swift.String?
  public var tabLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var tabOrder: Swift.String?
  public var tabOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var tabType: Swift.String?
  public var tabTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var templateLocked: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var templateLockedMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var templateRequired: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var templateRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var tooltip: Swift.String?
  public var toolTipMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var underline: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var underlineMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var value: Swift.String?
  public var valueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var width: Swift.String?
  public var widthMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var xPosition: Swift.String?
  public var xPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var yPosition: Swift.String?
  public var yPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public init(anchorAllowWhiteSpaceInCharacters: Swift.Bool = false, anchorAllowWhiteSpaceInCharactersMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorCaseSensitive: Swift.Bool = false, anchorCaseSensitiveMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorHorizontalAlignment: Swift.String? = nil, anchorHorizontalAlignmentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorIgnoreIfNotPresent: Swift.Bool = false, anchorIgnoreIfNotPresentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorMatchWholeWord: Swift.Bool = false, anchorMatchWholeWordMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorString: Swift.String? = nil, anchorStringMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorTabProcessorVersion: Swift.String? = nil, anchorTabProcessorVersionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorUnits: Swift.String? = nil, anchorUnitsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorXOffset: Swift.String? = nil, anchorXOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorYOffset: Swift.String? = nil, anchorYOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, bold: Swift.Bool = false, boldMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, concealValueOnDocument: Swift.Bool = false, concealValueOnDocumentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, conditionalParentLabel: Swift.String? = nil, conditionalParentLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, conditionalParentValue: Swift.String? = nil, conditionalParentValueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, customTabId: Swift.String? = nil, customTabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, disableAutoSize: Swift.Bool = false, disableAutoSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, documentId: Swift.String? = nil, documentIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, font: Swift.String? = nil, fontColor: Swift.String? = nil, fontColorMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, fontMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, fontSize: Swift.String? = nil, fontSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formOrder: Swift.String? = nil, formOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formPageLabel: Swift.String? = nil, formPageLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formPageNumber: Swift.String? = nil, formPageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, height: Swift.String? = nil, heightMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, italic: Swift.Bool = false, italicMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, localePolicy: DocuSignAPI.DSAPILocalePolicyTab? = nil, locked: Swift.Bool = false, lockedMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, maxLength: Swift.String? = nil, maxLengthMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, mergeField: DocuSignAPI.DSAPIMergeField? = nil, mergeFieldXml: Swift.String? = nil, name: Swift.String? = nil, nameMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, originalValue: Swift.String? = nil, originalValueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, pageNumber: Swift.String? = nil, pageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, recipientId: Swift.String? = nil, recipientIdGuid: Swift.String? = nil, recipientIdGuidMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, recipientIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, required: Swift.Bool = false, requiredMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, smartContractInformation: DocuSignAPI.DSAPISmartContractInformation? = nil, source: Swift.String? = nil, status: Swift.String? = nil, statusMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabGroupLabels: [Swift.String]? = nil, tabGroupLabelsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabId: Swift.String? = nil, tabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabLabel: Swift.String? = nil, tabLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabOrder: Swift.String? = nil, tabOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabType: Swift.String? = nil, tabTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, templateLocked: Swift.Bool = false, templateLockedMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, templateRequired: Swift.Bool = false, templateRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tooltip: Swift.String? = nil, toolTipMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, underline: Swift.Bool = false, underlineMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, value: Swift.String? = nil, valueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, width: Swift.String? = nil, widthMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, xPosition: Swift.String? = nil, xPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, yPosition: Swift.String? = nil, yPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @objcMembers open class TemplatesAPI : ObjectiveC.NSObject {
  open class func customFieldsDeleteTemplateCustomFields(accountId: Swift.String, templateId: Swift.String, body: DocuSignAPI.DSAPITemplateCustomFields? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPICustomFields?, _ error: Swift.Error?) -> Swift.Void))
  open class func customFieldsDeleteTemplateCustomFieldsWithRequestBuilder(accountId: Swift.String, templateId: Swift.String, body: DocuSignAPI.DSAPITemplateCustomFields? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPICustomFields>
  @objc open class func customFieldsGetTemplateCustomFields(accountId: Swift.String, templateId: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPICustomFields?, _ error: Swift.Error?) -> Swift.Void))
  open class func customFieldsGetTemplateCustomFieldsWithRequestBuilder(accountId: Swift.String, templateId: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPICustomFields>
  open class func customFieldsPostTemplateCustomFields(accountId: Swift.String, templateId: Swift.String, body: DocuSignAPI.DSAPITemplateCustomFields? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPICustomFields?, _ error: Swift.Error?) -> Swift.Void))
  open class func customFieldsPostTemplateCustomFieldsWithRequestBuilder(accountId: Swift.String, templateId: Swift.String, body: DocuSignAPI.DSAPITemplateCustomFields? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPICustomFields>
  open class func customFieldsPutTemplateCustomFields(accountId: Swift.String, templateId: Swift.String, body: DocuSignAPI.DSAPITemplateCustomFields? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPICustomFields?, _ error: Swift.Error?) -> Swift.Void))
  open class func customFieldsPutTemplateCustomFieldsWithRequestBuilder(accountId: Swift.String, templateId: Swift.String, body: DocuSignAPI.DSAPITemplateCustomFields? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPICustomFields>
  open class func documentFieldsDeleteTemplateDocumentFields(accountId: Swift.String, documentId: Swift.String, templateId: Swift.String, body: DocuSignAPI.DSAPIDocumentFieldsInformation? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIDocumentFieldsInformation?, _ error: Swift.Error?) -> Swift.Void))
  open class func documentFieldsDeleteTemplateDocumentFieldsWithRequestBuilder(accountId: Swift.String, documentId: Swift.String, templateId: Swift.String, body: DocuSignAPI.DSAPIDocumentFieldsInformation? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIDocumentFieldsInformation>
  open class func documentFieldsGetTemplateDocumentFields(accountId: Swift.String, documentId: Swift.String, templateId: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPIDocumentFieldsInformation?, _ error: Swift.Error?) -> Swift.Void))
  open class func documentFieldsGetTemplateDocumentFieldsWithRequestBuilder(accountId: Swift.String, documentId: Swift.String, templateId: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIDocumentFieldsInformation>
  open class func documentFieldsPostTemplateDocumentFields(accountId: Swift.String, documentId: Swift.String, templateId: Swift.String, body: DocuSignAPI.DSAPIDocumentFieldsInformation? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIDocumentFieldsInformation?, _ error: Swift.Error?) -> Swift.Void))
  open class func documentFieldsPostTemplateDocumentFieldsWithRequestBuilder(accountId: Swift.String, documentId: Swift.String, templateId: Swift.String, body: DocuSignAPI.DSAPIDocumentFieldsInformation? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIDocumentFieldsInformation>
  open class func documentFieldsPutTemplateDocumentFields(accountId: Swift.String, documentId: Swift.String, templateId: Swift.String, body: DocuSignAPI.DSAPIDocumentFieldsInformation? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIDocumentFieldsInformation?, _ error: Swift.Error?) -> Swift.Void))
  open class func documentFieldsPutTemplateDocumentFieldsWithRequestBuilder(accountId: Swift.String, documentId: Swift.String, templateId: Swift.String, body: DocuSignAPI.DSAPIDocumentFieldsInformation? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIDocumentFieldsInformation>
  open class func documentsDeleteTemplateDocuments(accountId: Swift.String, templateId: Swift.String, body: DocuSignAPI.DSAPIEnvelopeDefinition? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPITemplateDocumentsResult?, _ error: Swift.Error?) -> Swift.Void))
  open class func documentsDeleteTemplateDocumentsWithRequestBuilder(accountId: Swift.String, templateId: Swift.String, body: DocuSignAPI.DSAPIEnvelopeDefinition? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPITemplateDocumentsResult>
  @objc open class func documentsGetTemplateDocument(accountId: Swift.String, documentId: Swift.String, templateId: Swift.String, encrypt: Swift.String? = nil, showChanges: Swift.String? = nil, completion: @escaping ((_ data: Foundation.URL?, _ error: Swift.Error?) -> Swift.Void))
  open class func documentsGetTemplateDocumentWithRequestBuilder(accountId: Swift.String, documentId: Swift.String, templateId: Swift.String, encrypt: Swift.String? = nil, showChanges: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<Foundation.URL>
  open class func documentsGetTemplateDocuments(accountId: Swift.String, templateId: Swift.String, includeTabs: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPITemplateDocumentsResult?, _ error: Swift.Error?) -> Swift.Void))
  open class func documentsGetTemplateDocumentsWithRequestBuilder(accountId: Swift.String, templateId: Swift.String, includeTabs: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPITemplateDocumentsResult>
  @objc open class func documentsPutTemplateDocument(accountId: Swift.String, documentId: Swift.String, templateId: Swift.String, body: DocuSignAPI.DSAPIEnvelopeDefinition? = nil, isEnvelopeDefinition: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIEnvelopeDocument?, _ error: Swift.Error?) -> Swift.Void))
  open class func documentsPutTemplateDocumentWithRequestBuilder(accountId: Swift.String, documentId: Swift.String, templateId: Swift.String, body: DocuSignAPI.DSAPIEnvelopeDefinition? = nil, isEnvelopeDefinition: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIEnvelopeDocument>
  open class func documentsPutTemplateDocuments(accountId: Swift.String, templateId: Swift.String, body: DocuSignAPI.DSAPIEnvelopeDefinition? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPITemplateDocumentsResult?, _ error: Swift.Error?) -> Swift.Void))
  open class func documentsPutTemplateDocumentsWithRequestBuilder(accountId: Swift.String, templateId: Swift.String, body: DocuSignAPI.DSAPIEnvelopeDefinition? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPITemplateDocumentsResult>
  open class func lockDeleteTemplateLock(accountId: Swift.String, templateId: Swift.String, body: DocuSignAPI.DSAPILockRequest? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPILockInformation?, _ error: Swift.Error?) -> Swift.Void))
  open class func lockDeleteTemplateLockWithRequestBuilder(accountId: Swift.String, templateId: Swift.String, body: DocuSignAPI.DSAPILockRequest? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPILockInformation>
  @objc open class func lockGetTemplateLock(accountId: Swift.String, templateId: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPILockInformation?, _ error: Swift.Error?) -> Swift.Void))
  open class func lockGetTemplateLockWithRequestBuilder(accountId: Swift.String, templateId: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPILockInformation>
  open class func lockPostTemplateLock(accountId: Swift.String, templateId: Swift.String, body: DocuSignAPI.DSAPILockRequest? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPILockInformation?, _ error: Swift.Error?) -> Swift.Void))
  open class func lockPostTemplateLockWithRequestBuilder(accountId: Swift.String, templateId: Swift.String, body: DocuSignAPI.DSAPILockRequest? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPILockInformation>
  open class func lockPutTemplateLock(accountId: Swift.String, templateId: Swift.String, body: DocuSignAPI.DSAPILockRequest? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPILockInformation?, _ error: Swift.Error?) -> Swift.Void))
  open class func lockPutTemplateLockWithRequestBuilder(accountId: Swift.String, templateId: Swift.String, body: DocuSignAPI.DSAPILockRequest? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPILockInformation>
  @objc open class func notificationGetTemplatesTemplateIdNotification(accountId: Swift.String, templateId: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPINotification?, _ error: Swift.Error?) -> Swift.Void))
  open class func notificationGetTemplatesTemplateIdNotificationWithRequestBuilder(accountId: Swift.String, templateId: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPINotification>
  open class func notificationPutTemplatesTemplateIdNotification(accountId: Swift.String, templateId: Swift.String, body: DocuSignAPI.DSAPITemplateNotificationRequest? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPINotification?, _ error: Swift.Error?) -> Swift.Void))
  open class func notificationPutTemplatesTemplateIdNotificationWithRequestBuilder(accountId: Swift.String, templateId: Swift.String, body: DocuSignAPI.DSAPITemplateNotificationRequest? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPINotification>
  open class func pagesDeleteTemplatePage(accountId: Swift.String, documentId: Swift.String, pageNumber: Swift.String, templateId: Swift.String, body: DocuSignAPI.DSAPIPageRequest? = nil, completion: @escaping ((_ data: Swift.Void?, _ error: Swift.Error?) -> Swift.Void))
  open class func pagesDeleteTemplatePageWithRequestBuilder(accountId: Swift.String, documentId: Swift.String, pageNumber: Swift.String, templateId: Swift.String, body: DocuSignAPI.DSAPIPageRequest? = nil) -> DocuSignAPI.RequestBuilder<Swift.Void>
  @objc open class func pagesGetTemplatePageImage(accountId: Swift.String, documentId: Swift.String, pageNumber: Swift.String, templateId: Swift.String, dpi: Swift.String? = nil, maxHeight: Swift.String? = nil, maxWidth: Swift.String? = nil, showChanges: Swift.String? = nil, completion: @escaping ((_ data: Foundation.Data?, _ error: Swift.Error?) -> Swift.Void))
  open class func pagesGetTemplatePageImageWithRequestBuilder(accountId: Swift.String, documentId: Swift.String, pageNumber: Swift.String, templateId: Swift.String, dpi: Swift.String? = nil, maxHeight: Swift.String? = nil, maxWidth: Swift.String? = nil, showChanges: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<Foundation.Data>
  open class func pagesGetTemplatePageImages(accountId: Swift.String, documentId: Swift.String, templateId: Swift.String, count: Swift.String? = nil, dpi: Swift.String? = nil, maxHeight: Swift.String? = nil, maxWidth: Swift.String? = nil, nocache: Swift.String? = nil, showChanges: Swift.String? = nil, startPosition: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIPageImages?, _ error: Swift.Error?) -> Swift.Void))
  open class func pagesGetTemplatePageImagesWithRequestBuilder(accountId: Swift.String, documentId: Swift.String, templateId: Swift.String, count: Swift.String? = nil, dpi: Swift.String? = nil, maxHeight: Swift.String? = nil, maxWidth: Swift.String? = nil, nocache: Swift.String? = nil, showChanges: Swift.String? = nil, startPosition: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIPageImages>
  open class func pagesPutTemplatePageImage(accountId: Swift.String, documentId: Swift.String, pageNumber: Swift.String, templateId: Swift.String, body: DocuSignAPI.DSAPIPageRequest? = nil, completion: @escaping ((_ data: Swift.Void?, _ error: Swift.Error?) -> Swift.Void))
  open class func pagesPutTemplatePageImageWithRequestBuilder(accountId: Swift.String, documentId: Swift.String, pageNumber: Swift.String, templateId: Swift.String, body: DocuSignAPI.DSAPIPageRequest? = nil) -> DocuSignAPI.RequestBuilder<Swift.Void>
  open class func recipientsDeleteTemplateBulkRecipientsFile(accountId: Swift.String, recipientId: Swift.String, templateId: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPIBulkRecipientsUpdateResponse?, _ error: Swift.Error?) -> Swift.Void))
  open class func recipientsDeleteTemplateBulkRecipientsFileWithRequestBuilder(accountId: Swift.String, recipientId: Swift.String, templateId: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIBulkRecipientsUpdateResponse>
  open class func recipientsDeleteTemplateRecipient(accountId: Swift.String, recipientId: Swift.String, templateId: Swift.String, body: DocuSignAPI.DSAPITemplateRecipients? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIRecipients?, _ error: Swift.Error?) -> Swift.Void))
  open class func recipientsDeleteTemplateRecipientWithRequestBuilder(accountId: Swift.String, recipientId: Swift.String, templateId: Swift.String, body: DocuSignAPI.DSAPITemplateRecipients? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIRecipients>
  open class func recipientsDeleteTemplateRecipientTabs(accountId: Swift.String, recipientId: Swift.String, templateId: Swift.String, body: DocuSignAPI.DSAPITemplateTabs? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPITabs?, _ error: Swift.Error?) -> Swift.Void))
  open class func recipientsDeleteTemplateRecipientTabsWithRequestBuilder(accountId: Swift.String, recipientId: Swift.String, templateId: Swift.String, body: DocuSignAPI.DSAPITemplateTabs? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPITabs>
  open class func recipientsDeleteTemplateRecipients(accountId: Swift.String, templateId: Swift.String, body: DocuSignAPI.DSAPITemplateRecipients? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIRecipients?, _ error: Swift.Error?) -> Swift.Void))
  open class func recipientsDeleteTemplateRecipientsWithRequestBuilder(accountId: Swift.String, templateId: Swift.String, body: DocuSignAPI.DSAPITemplateRecipients? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIRecipients>
  open class func recipientsGetTemplateBulkRecipients(accountId: Swift.String, recipientId: Swift.String, templateId: Swift.String, includeTabs: Swift.String? = nil, startPosition: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIBulkRecipientsResponse?, _ error: Swift.Error?) -> Swift.Void))
  open class func recipientsGetTemplateBulkRecipientsWithRequestBuilder(accountId: Swift.String, recipientId: Swift.String, templateId: Swift.String, includeTabs: Swift.String? = nil, startPosition: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIBulkRecipientsResponse>
  @objc open class func recipientsGetTemplateRecipientTabs(accountId: Swift.String, recipientId: Swift.String, templateId: Swift.String, includeAnchorTabLocations: Swift.String? = nil, includeMetadata: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPITabs?, _ error: Swift.Error?) -> Swift.Void))
  open class func recipientsGetTemplateRecipientTabsWithRequestBuilder(accountId: Swift.String, recipientId: Swift.String, templateId: Swift.String, includeAnchorTabLocations: Swift.String? = nil, includeMetadata: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPITabs>
  @objc open class func recipientsGetTemplateRecipients(accountId: Swift.String, templateId: Swift.String, includeAnchorTabLocations: Swift.String? = nil, includeExtended: Swift.String? = nil, includeTabs: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIRecipients?, _ error: Swift.Error?) -> Swift.Void))
  open class func recipientsGetTemplateRecipientsWithRequestBuilder(accountId: Swift.String, templateId: Swift.String, includeAnchorTabLocations: Swift.String? = nil, includeExtended: Swift.String? = nil, includeTabs: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIRecipients>
  open class func recipientsPostTemplateRecipientTabs(accountId: Swift.String, recipientId: Swift.String, templateId: Swift.String, body: DocuSignAPI.DSAPITemplateTabs? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPITabs?, _ error: Swift.Error?) -> Swift.Void))
  open class func recipientsPostTemplateRecipientTabsWithRequestBuilder(accountId: Swift.String, recipientId: Swift.String, templateId: Swift.String, body: DocuSignAPI.DSAPITemplateTabs? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPITabs>
  open class func recipientsPostTemplateRecipients(accountId: Swift.String, templateId: Swift.String, body: DocuSignAPI.DSAPITemplateRecipients? = nil, resendEnvelope: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIRecipients?, _ error: Swift.Error?) -> Swift.Void))
  open class func recipientsPostTemplateRecipientsWithRequestBuilder(accountId: Swift.String, templateId: Swift.String, body: DocuSignAPI.DSAPITemplateRecipients? = nil, resendEnvelope: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIRecipients>
  open class func recipientsPutTemplateBulkRecipients(accountId: Swift.String, recipientId: Swift.String, templateId: Swift.String, body: DocuSignAPI.DSAPIBulkRecipientsRequest? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIBulkRecipientsSummaryResponse?, _ error: Swift.Error?) -> Swift.Void))
  open class func recipientsPutTemplateBulkRecipientsWithRequestBuilder(accountId: Swift.String, recipientId: Swift.String, templateId: Swift.String, body: DocuSignAPI.DSAPIBulkRecipientsRequest? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIBulkRecipientsSummaryResponse>
  open class func recipientsPutTemplateRecipientTabs(accountId: Swift.String, recipientId: Swift.String, templateId: Swift.String, body: DocuSignAPI.DSAPITemplateTabs? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPITabs?, _ error: Swift.Error?) -> Swift.Void))
  open class func recipientsPutTemplateRecipientTabsWithRequestBuilder(accountId: Swift.String, recipientId: Swift.String, templateId: Swift.String, body: DocuSignAPI.DSAPITemplateTabs? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPITabs>
  open class func recipientsPutTemplateRecipients(accountId: Swift.String, templateId: Swift.String, body: DocuSignAPI.DSAPITemplateRecipients? = nil, resendEnvelope: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIRecipientsUpdateSummary?, _ error: Swift.Error?) -> Swift.Void))
  open class func recipientsPutTemplateRecipientsWithRequestBuilder(accountId: Swift.String, templateId: Swift.String, body: DocuSignAPI.DSAPITemplateRecipients? = nil, resendEnvelope: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIRecipientsUpdateSummary>
  open class func responsiveHtmlGetTemplateDocumentHtmlDefinitions(accountId: Swift.String, documentId: Swift.String, templateId: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPIDocumentHtmlDefinitionOriginals?, _ error: Swift.Error?) -> Swift.Void))
  open class func responsiveHtmlGetTemplateDocumentHtmlDefinitionsWithRequestBuilder(accountId: Swift.String, documentId: Swift.String, templateId: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIDocumentHtmlDefinitionOriginals>
  open class func responsiveHtmlGetTemplateHtmlDefinitions(accountId: Swift.String, templateId: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPIDocumentHtmlDefinitionOriginals?, _ error: Swift.Error?) -> Swift.Void))
  open class func responsiveHtmlGetTemplateHtmlDefinitionsWithRequestBuilder(accountId: Swift.String, templateId: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIDocumentHtmlDefinitionOriginals>
  open class func responsiveHtmlPostTemplateDocumentResponsiveHtmlPreview(accountId: Swift.String, documentId: Swift.String, templateId: Swift.String, body: DocuSignAPI.DSAPIDocumentHtmlDefinition? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIDocumentHtmlDefinitions?, _ error: Swift.Error?) -> Swift.Void))
  open class func responsiveHtmlPostTemplateDocumentResponsiveHtmlPreviewWithRequestBuilder(accountId: Swift.String, documentId: Swift.String, templateId: Swift.String, body: DocuSignAPI.DSAPIDocumentHtmlDefinition? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIDocumentHtmlDefinitions>
  open class func responsiveHtmlPostTemplateResponsiveHtmlPreview(accountId: Swift.String, templateId: Swift.String, body: DocuSignAPI.DSAPIDocumentHtmlDefinition? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIDocumentHtmlDefinitions?, _ error: Swift.Error?) -> Swift.Void))
  open class func responsiveHtmlPostTemplateResponsiveHtmlPreviewWithRequestBuilder(accountId: Swift.String, templateId: Swift.String, body: DocuSignAPI.DSAPIDocumentHtmlDefinition? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIDocumentHtmlDefinitions>
  open class func tabsDeleteTemplateDocumentTabs(accountId: Swift.String, documentId: Swift.String, templateId: Swift.String, body: DocuSignAPI.DSAPITemplateTabs? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPITabs?, _ error: Swift.Error?) -> Swift.Void))
  open class func tabsDeleteTemplateDocumentTabsWithRequestBuilder(accountId: Swift.String, documentId: Swift.String, templateId: Swift.String, body: DocuSignAPI.DSAPITemplateTabs? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPITabs>
  @objc open class func tabsGetTemplateDocumentTabs(accountId: Swift.String, documentId: Swift.String, templateId: Swift.String, pageNumbers: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPITabs?, _ error: Swift.Error?) -> Swift.Void))
  open class func tabsGetTemplateDocumentTabsWithRequestBuilder(accountId: Swift.String, documentId: Swift.String, templateId: Swift.String, pageNumbers: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPITabs>
  @objc open class func tabsGetTemplatePageTabs(accountId: Swift.String, documentId: Swift.String, pageNumber: Swift.String, templateId: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPITabs?, _ error: Swift.Error?) -> Swift.Void))
  open class func tabsGetTemplatePageTabsWithRequestBuilder(accountId: Swift.String, documentId: Swift.String, pageNumber: Swift.String, templateId: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPITabs>
  open class func tabsPostTemplateDocumentTabs(accountId: Swift.String, documentId: Swift.String, templateId: Swift.String, body: DocuSignAPI.DSAPITemplateTabs? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPITabs?, _ error: Swift.Error?) -> Swift.Void))
  open class func tabsPostTemplateDocumentTabsWithRequestBuilder(accountId: Swift.String, documentId: Swift.String, templateId: Swift.String, body: DocuSignAPI.DSAPITemplateTabs? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPITabs>
  open class func tabsPutTemplateDocumentTabs(accountId: Swift.String, documentId: Swift.String, templateId: Swift.String, body: DocuSignAPI.DSAPITemplateTabs? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPITabs?, _ error: Swift.Error?) -> Swift.Void))
  open class func tabsPutTemplateDocumentTabsWithRequestBuilder(accountId: Swift.String, documentId: Swift.String, templateId: Swift.String, body: DocuSignAPI.DSAPITemplateTabs? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPITabs>
  open class func templatesDeleteTemplatePart(accountId: Swift.String, templateId: Swift.String, templatePart: Swift.String, body: DocuSignAPI.DSAPIGroupInformation? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIGroupInformation?, _ error: Swift.Error?) -> Swift.Void))
  open class func templatesDeleteTemplatePartWithRequestBuilder(accountId: Swift.String, templateId: Swift.String, templatePart: Swift.String, body: DocuSignAPI.DSAPIGroupInformation? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIGroupInformation>
  @objc open class func templatesGetTemplate(accountId: Swift.String, templateId: Swift.String, include: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIEnvelopeTemplate?, _ error: Swift.Error?) -> Swift.Void))
  open class func templatesGetTemplateWithRequestBuilder(accountId: Swift.String, templateId: Swift.String, include: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIEnvelopeTemplate>
  @objc open class func templatesGetTemplates(accountId: Swift.String, count: Swift.String? = nil, createdFromDate: Swift.String? = nil, createdToDate: Swift.String? = nil, folderIds: Swift.String? = nil, folderTypes: Swift.String? = nil, fromDate: Swift.String? = nil, include: Swift.String? = nil, isDeletedTemplateOnly: Swift.String? = nil, isDownload: Swift.String? = nil, modifiedFromDate: Swift.String? = nil, modifiedToDate: Swift.String? = nil, order: Swift.String? = nil, orderBy: Swift.String? = nil, searchFields: Swift.String? = nil, searchText: Swift.String? = nil, sharedByMe: Swift.String? = nil, startPosition: Swift.String? = nil, templateIds: Swift.String? = nil, toDate: Swift.String? = nil, usedFromDate: Swift.String? = nil, usedToDate: Swift.String? = nil, userFilter: Swift.String? = nil, userId: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIEnvelopeTemplateResults?, _ error: Swift.Error?) -> Swift.Void))
  open class func templatesGetTemplatesWithRequestBuilder(accountId: Swift.String, count: Swift.String? = nil, createdFromDate: Swift.String? = nil, createdToDate: Swift.String? = nil, folderIds: Swift.String? = nil, folderTypes: Swift.String? = nil, fromDate: Swift.String? = nil, include: Swift.String? = nil, isDeletedTemplateOnly: Swift.String? = nil, isDownload: Swift.String? = nil, modifiedFromDate: Swift.String? = nil, modifiedToDate: Swift.String? = nil, order: Swift.String? = nil, orderBy: Swift.String? = nil, searchFields: Swift.String? = nil, searchText: Swift.String? = nil, sharedByMe: Swift.String? = nil, startPosition: Swift.String? = nil, templateIds: Swift.String? = nil, toDate: Swift.String? = nil, usedFromDate: Swift.String? = nil, usedToDate: Swift.String? = nil, userFilter: Swift.String? = nil, userId: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIEnvelopeTemplateResults>
  open class func templatesPostTemplates(accountId: Swift.String, body: DocuSignAPI.DSAPIEnvelopeTemplate? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPITemplateSummary?, _ error: Swift.Error?) -> Swift.Void))
  open class func templatesPostTemplatesWithRequestBuilder(accountId: Swift.String, body: DocuSignAPI.DSAPIEnvelopeTemplate? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPITemplateSummary>
  open class func templatesPutTemplate(accountId: Swift.String, templateId: Swift.String, body: DocuSignAPI.DSAPIEnvelopeTemplate? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPITemplateUpdateSummary?, _ error: Swift.Error?) -> Swift.Void))
  open class func templatesPutTemplateWithRequestBuilder(accountId: Swift.String, templateId: Swift.String, body: DocuSignAPI.DSAPIEnvelopeTemplate? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPITemplateUpdateSummary>
  open class func templatesPutTemplatePart(accountId: Swift.String, templateId: Swift.String, templatePart: Swift.String, body: DocuSignAPI.DSAPIGroupInformation? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIGroupInformation?, _ error: Swift.Error?) -> Swift.Void))
  open class func templatesPutTemplatePartWithRequestBuilder(accountId: Swift.String, templateId: Swift.String, templatePart: Swift.String, body: DocuSignAPI.DSAPIGroupInformation? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIGroupInformation>
  open class func viewsPostTemplateEditView(accountId: Swift.String, templateId: Swift.String, body: DocuSignAPI.DSAPIReturnUrlRequest? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIViewUrl?, _ error: Swift.Error?) -> Swift.Void))
  open class func viewsPostTemplateEditViewWithRequestBuilder(accountId: Swift.String, templateId: Swift.String, body: DocuSignAPI.DSAPIReturnUrlRequest? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIViewUrl>
  open class func viewsPostTemplateRecipientPreview(accountId: Swift.String, templateId: Swift.String, body: DocuSignAPI.DSAPIRecipientPreviewRequest? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIViewUrl?, _ error: Swift.Error?) -> Swift.Void))
  open class func viewsPostTemplateRecipientPreviewWithRequestBuilder(accountId: Swift.String, templateId: Swift.String, body: DocuSignAPI.DSAPIRecipientPreviewRequest? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIViewUrl>
  @objc override dynamic public init()
  @objc deinit
}
public struct DSAPISupportedLanguages : Swift.Codable {
  public var languages: [DocuSignAPI.DSAPINameValue]?
  public init(languages: [DocuSignAPI.DSAPINameValue]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPILinkedExternalPrimaryAccount : Swift.Codable {
  public var accountName: Swift.String?
  public var configurationId: Swift.String?
  public var email: Swift.String?
  public var linkId: Swift.String?
  public var recipientAuthRequirements: DocuSignAPI.DSAPIExternalPrimaryAccountRecipientAuthRequirements?
  public var status: Swift.String?
  public var userId: Swift.String?
  public init(accountName: Swift.String? = nil, configurationId: Swift.String? = nil, email: Swift.String? = nil, linkId: Swift.String? = nil, recipientAuthRequirements: DocuSignAPI.DSAPIExternalPrimaryAccountRecipientAuthRequirements? = nil, status: Swift.String? = nil, userId: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @objcMembers public class DSAPIDocument : ObjectiveC.NSObject, Swift.Codable {
  @objc public var applyAnchorTabs: Swift.String?
  @objc public var assignTabsToRecipientId: Swift.String?
  @objc public var display: Swift.String?
  @objc public var documentBase64: Swift.String?
  @objc public var documentFields: [DocuSignAPI.DSAPINameValue]?
  @objc public var documentId: Swift.String?
  @objc @DocuSignAPI.BoolFromString public var encryptedWithKeyManager: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var fileExtension: Swift.String?
  @objc public var fileFormatHint: Swift.String?
  public var htmlDefinition: DocuSignAPI.DSAPIDocumentHtmlDefinition?
  @objc @DocuSignAPI.BoolFromString public var includeInDownload: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  public var matchBoxes: [DocuSignAPI.DSAPIMatchBox]?
  @objc public var name: Swift.String?
  @objc public var order: Swift.String?
  @objc public var pages: Swift.String?
  @objc public var password: Swift.String?
  @objc public var pdfFormFieldOption: Swift.String?
  @objc public var remoteUrl: Foundation.URL?
  @objc public var signerMustAcknowledge: Swift.String?
  @objc @DocuSignAPI.BoolFromString public var signerMustAcknowledgeUseAccountDefault: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var tabs: DocuSignAPI.DSAPITabs?
  @objc @DocuSignAPI.BoolFromString public var templateLocked: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc @DocuSignAPI.BoolFromString public var templateRequired: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc @DocuSignAPI.BoolFromString public var transformPdfFields: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var uri: Foundation.URL?
  @objc public var fileSandboxURL: Foundation.URL?
  @objc override dynamic public init()
  public init(applyAnchorTabs: Swift.String? = nil, assignTabsToRecipientId: Swift.String? = nil, display: Swift.String? = nil, documentBase64: Swift.String? = nil, documentFields: [DocuSignAPI.DSAPINameValue]? = nil, documentId: Swift.String? = nil, encryptedWithKeyManager: Swift.Bool = false, fileExtension: Swift.String? = nil, fileFormatHint: Swift.String? = nil, htmlDefinition: DocuSignAPI.DSAPIDocumentHtmlDefinition? = nil, includeInDownload: Swift.Bool = false, matchBoxes: [DocuSignAPI.DSAPIMatchBox]? = nil, name: Swift.String? = nil, order: Swift.String? = nil, pages: Swift.String? = nil, password: Swift.String? = nil, pdfFormFieldOption: Swift.String? = nil, remoteUrl: Foundation.URL? = nil, signerMustAcknowledge: Swift.String? = nil, signerMustAcknowledgeUseAccountDefault: Swift.Bool = false, tabs: DocuSignAPI.DSAPITabs? = nil, templateLocked: Swift.Bool = false, templateRequired: Swift.Bool = false, transformPdfFields: Swift.Bool = false, uri: Foundation.URL? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct DSAPISignerEmailNotifications : Swift.Codable {
  @DocuSignAPI.BoolFromString public var agentNotification: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  @DocuSignAPI.BoolFromString public var carbonCopyNotification: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  @DocuSignAPI.BoolFromString public var certifiedDeliveryNotification: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  @DocuSignAPI.BoolFromString public var commentsOnlyPrivateAndMention: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  @DocuSignAPI.BoolFromString public var commentsReceiveAll: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  @DocuSignAPI.BoolFromString public var documentMarkupActivation: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  @DocuSignAPI.BoolFromString public var envelopeActivation: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  @DocuSignAPI.BoolFromString public var envelopeComplete: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  @DocuSignAPI.BoolFromString public var envelopeCorrected: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  @DocuSignAPI.BoolFromString public var envelopeDeclined: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  @DocuSignAPI.BoolFromString public var envelopeVoided: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var faxReceived: Swift.String?
  @DocuSignAPI.BoolFromString public var offlineSigningFailed: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  @DocuSignAPI.BoolFromString public var purgeDocuments: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  @DocuSignAPI.BoolFromString public var reassignedSigner: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  @DocuSignAPI.BoolFromString public var whenSigningGroupMember: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public init(agentNotification: Swift.Bool = false, carbonCopyNotification: Swift.Bool = false, certifiedDeliveryNotification: Swift.Bool = false, commentsOnlyPrivateAndMention: Swift.Bool = false, commentsReceiveAll: Swift.Bool = false, documentMarkupActivation: Swift.Bool = false, envelopeActivation: Swift.Bool = false, envelopeComplete: Swift.Bool = false, envelopeCorrected: Swift.Bool = false, envelopeDeclined: Swift.Bool = false, envelopeVoided: Swift.Bool = false, faxReceived: Swift.String? = nil, offlineSigningFailed: Swift.Bool = false, purgeDocuments: Swift.Bool = false, reassignedSigner: Swift.Bool = false, whenSigningGroupMember: Swift.Bool = false)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @propertyWrapper @objcMembers public class BoolFromString : ObjectiveC.NSObject, Swift.Codable {
  @objc public var wrappedValue: Swift.Bool {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
public struct DSAPIPowerFormsRequest : Swift.Codable {
  public var powerForms: [DocuSignAPI.DSAPIPowerForm]?
  public init(powerForms: [DocuSignAPI.DSAPIPowerForm]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @objcMembers public class DSAPICustomFields : ObjectiveC.NSObject, Swift.Codable {
  @objc public var listCustomFields: [DocuSignAPI.DSAPIListCustomField]?
  @objc public var textCustomFields: [DocuSignAPI.DSAPITextCustomField]?
  @objc override dynamic public init()
  @objc public init(listCustomFields: [DocuSignAPI.DSAPIListCustomField]? = nil, textCustomFields: [DocuSignAPI.DSAPITextCustomField]? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct DSAPISmartSectionAnchorPosition : Swift.Codable {
  public var pageNumber: Swift.Int?
  public var xPosition: Swift.Double?
  public var yPosition: Swift.Double?
  public init(pageNumber: Swift.Int? = nil, xPosition: Swift.Double? = nil, yPosition: Swift.Double? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIBulkRecipientsSummaryResponse : Swift.Codable {
  public var bulkRecipients: [DocuSignAPI.DSAPIBulkRecipient]?
  public var bulkRecipientsCount: Swift.String?
  public var bulkRecipientsUri: Foundation.URL?
  public var errorDetails: [DocuSignAPI.DSAPIErrorDetails]?
  public init(bulkRecipients: [DocuSignAPI.DSAPIBulkRecipient]? = nil, bulkRecipientsCount: Swift.String? = nil, bulkRecipientsUri: Foundation.URL? = nil, errorDetails: [DocuSignAPI.DSAPIErrorDetails]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIBulkSendBatchError : Swift.Codable {
  public var error: Swift.String?
  public var errorDetail: Swift.String?
  public init(error: Swift.String? = nil, errorDetail: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPICloudStorageProviders : Swift.Codable {
  public var storageProviders: [DocuSignAPI.DSAPICloudStorageProvider]?
  public init(storageProviders: [DocuSignAPI.DSAPICloudStorageProvider]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIWorkflow : Swift.Codable {
  public var currentWorkflowStepId: Swift.String?
  public var resumeDate: Foundation.Date?
  public var scheduledSending: DocuSignAPI.DSAPIScheduledSendingApiModel?
  public var workflowStatus: Swift.String?
  public var workflowSteps: [DocuSignAPI.DSAPIWorkflowStep]?
  public init(currentWorkflowStepId: Swift.String? = nil, resumeDate: Foundation.Date? = nil, scheduledSending: DocuSignAPI.DSAPIScheduledSendingApiModel? = nil, workflowStatus: Swift.String? = nil, workflowSteps: [DocuSignAPI.DSAPIWorkflowStep]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPISocialAccountInformation : Swift.Codable {
  public var email: Swift.String?
  public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  public var provider: Swift.String?
  public var socialId: Swift.String?
  public var userName: Swift.String?
  public init(email: Swift.String? = nil, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, provider: Swift.String? = nil, socialId: Swift.String? = nil, userName: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIBillingChargeResponse : Swift.Codable {
  public var billingChargeItems: [DocuSignAPI.DSAPIBillingCharge]?
  public init(billingChargeItems: [DocuSignAPI.DSAPIBillingCharge]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPICommentsPublish : Swift.Codable {
  public var commentsToPublish: [DocuSignAPI.DSAPICommentPublish]?
  public init(commentsToPublish: [DocuSignAPI.DSAPICommentPublish]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @objcMembers public class DSAPIFormulaTab : ObjectiveC.NSObject, Swift.Codable {
  @objc @DocuSignAPI.BoolFromString public var anchorAllowWhiteSpaceInCharacters: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorAllowWhiteSpaceInCharactersMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var anchorCaseSensitive: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorCaseSensitiveMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorHorizontalAlignment: Swift.String?
  @objc public var anchorHorizontalAlignmentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var anchorIgnoreIfNotPresent: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorIgnoreIfNotPresentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var anchorMatchWholeWord: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorMatchWholeWordMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorString: Swift.String?
  @objc public var anchorStringMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorTabProcessorVersion: Swift.String?
  @objc public var anchorTabProcessorVersionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorUnits: Swift.String?
  @objc public var anchorUnitsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorXOffset: Swift.String?
  @objc public var anchorXOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorYOffset: Swift.String?
  @objc public var anchorYOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var bold: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var boldMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var concealValueOnDocument: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var concealValueOnDocumentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var conditionalParentLabel: Swift.String?
  @objc public var conditionalParentLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var conditionalParentValue: Swift.String?
  @objc public var conditionalParentValueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var customTabId: Swift.String?
  @objc public var customTabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var disableAutoSize: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var disableAutoSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var documentId: Swift.String?
  @objc public var documentIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  @objc public var font: Swift.String?
  @objc public var fontColor: Swift.String?
  @objc public var fontColorMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var fontMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var fontSize: Swift.String?
  @objc public var fontSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var formOrder: Swift.String?
  @objc public var formOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var formPageLabel: Swift.String?
  @objc public var formPageLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var formPageNumber: Swift.String?
  @objc public var formPageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var formula: Swift.String?
  @objc public var formulaMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var height: Swift.String?
  @objc public var heightMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var hidden: Swift.String?
  @objc public var hiddenMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var isPaymentAmount: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var isPaymentAmountMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var italic: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var italicMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var localePolicy: DocuSignAPI.DSAPILocalePolicyTab?
  @objc @DocuSignAPI.BoolFromString public var locked: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var lockedMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var maxLength: Swift.String?
  @objc public var maxLengthMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var mergeField: DocuSignAPI.DSAPIMergeField?
  @objc public var mergeFieldXml: Swift.String?
  @objc public var name: Swift.String?
  @objc public var nameMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var originalValue: Swift.String?
  @objc public var originalValueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var pageNumber: Swift.String?
  @objc public var pageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var paymentDetails: DocuSignAPI.DSAPIPaymentDetails?
  @objc public var recipientId: Swift.String?
  @objc public var recipientIdGuid: Swift.String?
  @objc public var recipientIdGuidMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var recipientIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var requireAll: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var requireAllMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var required: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var requiredMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var requireInitialOnSharedChange: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var requireInitialOnSharedChangeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var roundDecimalPlaces: Swift.String?
  @objc public var roundDecimalPlacesMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var senderRequired: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var senderRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var shared: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var sharedMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var shareToRecipients: Swift.String?
  @objc public var shareToRecipientsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var smartContractInformation: DocuSignAPI.DSAPISmartContractInformation?
  @objc public var source: Swift.String?
  @objc public var status: Swift.String?
  @objc public var statusMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabGroupLabels: [Swift.String]?
  @objc public var tabGroupLabelsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabId: Swift.String?
  @objc public var tabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabLabel: Swift.String?
  @objc public var tabLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabOrder: Swift.String?
  @objc public var tabOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabType: Swift.String?
  @objc public var tabTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var templateLocked: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var templateLockedMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var templateRequired: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var templateRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tooltip: Swift.String?
  @objc public var toolTipMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var underline: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var underlineMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var validationMessage: Swift.String?
  @objc public var validationMessageMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var validationPattern: Swift.String?
  @objc public var validationPatternMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var value: Swift.String?
  @objc public var valueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var width: Swift.String?
  @objc public var widthMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var xPosition: Swift.String?
  @objc public var xPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var yPosition: Swift.String?
  @objc public var yPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc override dynamic public init()
  public init(anchorAllowWhiteSpaceInCharacters: Swift.Bool = false, anchorAllowWhiteSpaceInCharactersMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorCaseSensitive: Swift.Bool = false, anchorCaseSensitiveMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorHorizontalAlignment: Swift.String? = nil, anchorHorizontalAlignmentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorIgnoreIfNotPresent: Swift.Bool = false, anchorIgnoreIfNotPresentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorMatchWholeWord: Swift.Bool = false, anchorMatchWholeWordMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorString: Swift.String? = nil, anchorStringMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorTabProcessorVersion: Swift.String? = nil, anchorTabProcessorVersionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorUnits: Swift.String? = nil, anchorUnitsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorXOffset: Swift.String? = nil, anchorXOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorYOffset: Swift.String? = nil, anchorYOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, bold: Swift.Bool = false, boldMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, concealValueOnDocument: Swift.Bool = false, concealValueOnDocumentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, conditionalParentLabel: Swift.String? = nil, conditionalParentLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, conditionalParentValue: Swift.String? = nil, conditionalParentValueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, customTabId: Swift.String? = nil, customTabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, disableAutoSize: Swift.Bool = false, disableAutoSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, documentId: Swift.String? = nil, documentIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, font: Swift.String? = nil, fontColor: Swift.String? = nil, fontColorMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, fontMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, fontSize: Swift.String? = nil, fontSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formOrder: Swift.String? = nil, formOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formPageLabel: Swift.String? = nil, formPageLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formPageNumber: Swift.String? = nil, formPageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formula: Swift.String? = nil, formulaMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, height: Swift.String? = nil, heightMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, hidden: Swift.String? = nil, hiddenMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, isPaymentAmount: Swift.Bool = false, isPaymentAmountMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, italic: Swift.Bool = false, italicMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, localePolicy: DocuSignAPI.DSAPILocalePolicyTab? = nil, locked: Swift.Bool = false, lockedMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, maxLength: Swift.String? = nil, maxLengthMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, mergeField: DocuSignAPI.DSAPIMergeField? = nil, mergeFieldXml: Swift.String? = nil, name: Swift.String? = nil, nameMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, originalValue: Swift.String? = nil, originalValueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, pageNumber: Swift.String? = nil, pageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, paymentDetails: DocuSignAPI.DSAPIPaymentDetails? = nil, recipientId: Swift.String? = nil, recipientIdGuid: Swift.String? = nil, recipientIdGuidMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, recipientIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, requireAll: Swift.Bool = false, requireAllMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, required: Swift.Bool = false, requiredMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, requireInitialOnSharedChange: Swift.Bool = false, requireInitialOnSharedChangeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, roundDecimalPlaces: Swift.String? = nil, roundDecimalPlacesMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, senderRequired: Swift.Bool = false, senderRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, shared: Swift.Bool = false, sharedMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, shareToRecipients: Swift.String? = nil, shareToRecipientsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, smartContractInformation: DocuSignAPI.DSAPISmartContractInformation? = nil, source: Swift.String? = nil, status: Swift.String? = nil, statusMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabGroupLabels: [Swift.String]? = nil, tabGroupLabelsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabId: Swift.String? = nil, tabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabLabel: Swift.String? = nil, tabLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabOrder: Swift.String? = nil, tabOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabType: Swift.String? = nil, tabTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, templateLocked: Swift.Bool = false, templateLockedMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, templateRequired: Swift.Bool = false, templateRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tooltip: Swift.String? = nil, toolTipMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, underline: Swift.Bool = false, underlineMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, validationMessage: Swift.String? = nil, validationMessageMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, validationPattern: Swift.String? = nil, validationPatternMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, value: Swift.String? = nil, valueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, width: Swift.String? = nil, widthMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, xPosition: Swift.String? = nil, xPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, yPosition: Swift.String? = nil, yPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @objcMembers public class DSAPIRadioGroup : ObjectiveC.NSObject, Swift.Codable {
  @objc public var conditionalParentLabel: Swift.String?
  @objc public var conditionalParentLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var conditionalParentValue: Swift.String?
  @objc public var conditionalParentValueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var documentId: Swift.String?
  @objc public var documentIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var groupName: Swift.String?
  @objc public var groupNameMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var originalValue: Swift.String?
  @objc public var originalValueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var radios: [DocuSignAPI.DSAPIRadio]?
  @objc public var recipientId: Swift.String?
  @objc public var recipientIdGuid: Swift.String?
  @objc public var recipientIdGuidMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var recipientIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var requireAll: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var requireAllMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var requireInitialOnSharedChange: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var requireInitialOnSharedChangeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var shared: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var sharedMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var shareToRecipients: Swift.String?
  @objc public var shareToRecipientsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabType: Swift.String?
  @objc public var tabTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var templateLocked: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var templateLockedMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var templateRequired: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var templateRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tooltip: Swift.String?
  @objc public var tooltipMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var value: Swift.String?
  @objc public var valueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc override dynamic public init()
  @objc public init(conditionalParentLabel: Swift.String? = nil, conditionalParentLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, conditionalParentValue: Swift.String? = nil, conditionalParentValueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, documentId: Swift.String? = nil, documentIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, groupName: Swift.String? = nil, groupNameMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, originalValue: Swift.String? = nil, originalValueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, radios: [DocuSignAPI.DSAPIRadio]? = nil, recipientId: Swift.String? = nil, recipientIdGuid: Swift.String? = nil, recipientIdGuidMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, recipientIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, requireAll: Swift.Bool = false, requireAllMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, requireInitialOnSharedChange: Swift.Bool = false, requireInitialOnSharedChangeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, shared: Swift.Bool = false, sharedMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, shareToRecipients: Swift.String? = nil, shareToRecipientsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabType: Swift.String? = nil, tabTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, templateLocked: Swift.Bool = false, templateLockedMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, templateRequired: Swift.Bool = false, templateRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tooltip: Swift.String? = nil, tooltipMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, value: Swift.String? = nil, valueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct DSAPISigningGroupInformation : Swift.Codable {
  public var groups: [DocuSignAPI.DSAPISigningGroup]?
  public init(groups: [DocuSignAPI.DSAPISigningGroup]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPITemplateUpdateSummary : Swift.Codable {
  public var bulkEnvelopeStatus: DocuSignAPI.DSAPIBulkEnvelopeStatus?
  public var envelopeId: Swift.String?
  public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  public var listCustomFieldUpdateResults: [DocuSignAPI.DSAPIListCustomField]?
  public var lockInformation: DocuSignAPI.DSAPILockInformation?
  public var purgeState: Swift.String?
  public var recipientUpdateResults: [DocuSignAPI.DSAPIRecipientUpdateResponse]?
  public var tabUpdateResults: DocuSignAPI.DSAPITabs?
  public var textCustomFieldUpdateResults: [DocuSignAPI.DSAPITextCustomField]?
  public init(bulkEnvelopeStatus: DocuSignAPI.DSAPIBulkEnvelopeStatus? = nil, envelopeId: Swift.String? = nil, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, listCustomFieldUpdateResults: [DocuSignAPI.DSAPIListCustomField]? = nil, lockInformation: DocuSignAPI.DSAPILockInformation? = nil, purgeState: Swift.String? = nil, recipientUpdateResults: [DocuSignAPI.DSAPIRecipientUpdateResponse]? = nil, tabUpdateResults: DocuSignAPI.DSAPITabs? = nil, textCustomFieldUpdateResults: [DocuSignAPI.DSAPITextCustomField]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @objcMembers public class DSAPIIntermediary : ObjectiveC.NSObject, Swift.Codable {
  @objc public var accessCode: Swift.String?
  @objc public var accessCodeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var addAccessCodeToEmail: Swift.String?
  @objc public var additionalNotifications: [DocuSignAPI.DSAPIRecipientAdditionalNotification]?
  @objc @DocuSignAPI.BoolFromString public var allowSystemOverrideForLockedRecipient: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var autoRespondedReason: Swift.String?
  @objc public var clientUserId: Swift.String?
  @objc public var completedCount: Swift.String?
  @objc public var customFields: [Swift.String]?
  @objc public var declinedDateTime: Foundation.Date?
  @objc public var declinedReason: Swift.String?
  @objc public var deliveredDateTime: Foundation.Date?
  @objc public var deliveryMethod: Swift.String?
  @objc public var deliveryMethodMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var designatorId: Swift.String?
  @objc public var designatorIdGuid: Swift.String?
  @objc public var documentVisibility: [DocuSignAPI.DSAPIDocumentVisibility]?
  @objc public var email: Swift.String?
  @objc public var emailMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var emailNotification: DocuSignAPI.DSAPIRecipientEmailNotification?
  @objc public var emailRecipientPostSigningURL: Swift.String?
  @objc public var embeddedRecipientStartURL: Swift.String?
  @objc public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  @objc public var excludedDocuments: [Swift.String]?
  @objc public var faxNumber: Swift.String?
  @objc public var faxNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var firstName: Swift.String?
  @objc public var firstNameMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var fullName: Swift.String?
  @objc public var fullNameMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var idCheckConfigurationName: Swift.String?
  @objc public var idCheckConfigurationNameMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var idCheckInformationInput: DocuSignAPI.DSAPIIdCheckInformationInput?
  public var identityVerification: DocuSignAPI.DSAPIRecipientIdentityVerification?
  @objc @DocuSignAPI.BoolFromString public var inheritEmailNotificationConfiguration: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var lastName: Swift.String?
  @objc public var lastNameMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var lockedRecipientPhoneAuthEditable: Swift.String?
  @objc public var lockedRecipientSmsEditable: Swift.String?
  @objc public var name: Swift.String?
  @objc public var nameMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var note: Swift.String?
  @objc public var noteMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var phoneAuthentication: DocuSignAPI.DSAPIRecipientPhoneAuthentication?
  public var phoneNumber: DocuSignAPI.DSAPIRecipientPhoneNumber?
  @objc public var recipientAttachments: [DocuSignAPI.DSAPIRecipientAttachment]?
  public var recipientAuthenticationStatus: DocuSignAPI.DSAPIAuthenticationStatus?
  public var recipientFeatureMetadata: [DocuSignAPI.DSAPIFeatureAvailableMetadata]?
  @objc public var recipientId: Swift.String?
  @objc public var recipientIdGuid: Swift.String?
  @objc public var recipientType: Swift.String?
  @objc public var recipientTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var requireIdLookup: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var requireIdLookupMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var roleName: Swift.String?
  @objc public var routingOrder: Swift.String?
  @objc public var routingOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var sentDateTime: Foundation.Date?
  @objc public var signedDateTime: Foundation.Date?
  @objc public var signingGroupId: Swift.String?
  @objc public var signingGroupIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var signingGroupName: Swift.String?
  @objc public var signingGroupUsers: [DocuSignAPI.DSAPIUserInfo]?
  @objc public var smsAuthentication: DocuSignAPI.DSAPIRecipientSMSAuthentication?
  @objc public var socialAuthentications: [DocuSignAPI.DSAPISocialAuthentication]?
  @objc public var status: Swift.String?
  @objc public var statusCode: Swift.String?
  @objc @DocuSignAPI.BoolFromString public var suppressEmails: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc @DocuSignAPI.BoolFromString public var templateLocked: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc @DocuSignAPI.BoolFromString public var templateRequired: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var totalTabCount: Swift.String?
  @objc public var userId: Swift.String?
  @objc override dynamic public init()
  public init(accessCode: Swift.String? = nil, accessCodeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, addAccessCodeToEmail: Swift.String? = nil, additionalNotifications: [DocuSignAPI.DSAPIRecipientAdditionalNotification]? = nil, allowSystemOverrideForLockedRecipient: Swift.Bool = false, autoRespondedReason: Swift.String? = nil, clientUserId: Swift.String? = nil, completedCount: Swift.String? = nil, customFields: [Swift.String]? = nil, declinedDateTime: Foundation.Date? = nil, declinedReason: Swift.String? = nil, deliveredDateTime: Foundation.Date? = nil, deliveryMethod: Swift.String? = nil, deliveryMethodMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, designatorId: Swift.String? = nil, designatorIdGuid: Swift.String? = nil, documentVisibility: [DocuSignAPI.DSAPIDocumentVisibility]? = nil, email: Swift.String? = nil, emailMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, emailNotification: DocuSignAPI.DSAPIRecipientEmailNotification? = nil, emailRecipientPostSigningURL: Swift.String? = nil, embeddedRecipientStartURL: Swift.String? = nil, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, excludedDocuments: [Swift.String]? = nil, faxNumber: Swift.String? = nil, faxNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, firstName: Swift.String? = nil, firstNameMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, fullName: Swift.String? = nil, fullNameMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, idCheckConfigurationName: Swift.String? = nil, idCheckConfigurationNameMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, idCheckInformationInput: DocuSignAPI.DSAPIIdCheckInformationInput? = nil, identityVerification: DocuSignAPI.DSAPIRecipientIdentityVerification? = nil, inheritEmailNotificationConfiguration: Swift.Bool = false, lastName: Swift.String? = nil, lastNameMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, lockedRecipientPhoneAuthEditable: Swift.String? = nil, lockedRecipientSmsEditable: Swift.String? = nil, name: Swift.String? = nil, nameMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, note: Swift.String? = nil, noteMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, phoneAuthentication: DocuSignAPI.DSAPIRecipientPhoneAuthentication? = nil, phoneNumber: DocuSignAPI.DSAPIRecipientPhoneNumber? = nil, recipientAttachments: [DocuSignAPI.DSAPIRecipientAttachment]? = nil, recipientAuthenticationStatus: DocuSignAPI.DSAPIAuthenticationStatus? = nil, recipientFeatureMetadata: [DocuSignAPI.DSAPIFeatureAvailableMetadata]? = nil, recipientId: Swift.String? = nil, recipientIdGuid: Swift.String? = nil, recipientType: Swift.String? = nil, recipientTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, requireIdLookup: Swift.Bool = false, requireIdLookupMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, roleName: Swift.String? = nil, routingOrder: Swift.String? = nil, routingOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, sentDateTime: Foundation.Date? = nil, signedDateTime: Foundation.Date? = nil, signingGroupId: Swift.String? = nil, signingGroupIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, signingGroupName: Swift.String? = nil, signingGroupUsers: [DocuSignAPI.DSAPIUserInfo]? = nil, smsAuthentication: DocuSignAPI.DSAPIRecipientSMSAuthentication? = nil, socialAuthentications: [DocuSignAPI.DSAPISocialAuthentication]? = nil, status: Swift.String? = nil, statusCode: Swift.String? = nil, suppressEmails: Swift.Bool = false, templateLocked: Swift.Bool = false, templateRequired: Swift.Bool = false, totalTabCount: Swift.String? = nil, userId: Swift.String? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @objcMembers public class DSAPIErrorDetails : ObjectiveC.NSObject, Swift.Codable {
  @objc public var errorCode: Swift.String?
  @objc public var message: Swift.String?
  @objc public init(errorCode: Swift.String? = nil, message: Swift.String? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @objcMembers public class DSAPIRecipientsUpdateSummary : ObjectiveC.NSObject, Swift.Codable {
  @objc public var recipientUpdateResults: [DocuSignAPI.DSAPIRecipientUpdateResponse]?
  @objc public init(recipientUpdateResults: [DocuSignAPI.DSAPIRecipientUpdateResponse]? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIDocumentHtmlDefinitions : Swift.Codable {
  public var htmlDefinitions: [Swift.String]?
  public init(htmlDefinitions: [Swift.String]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIPaymentProcessorInformation : Swift.Codable {
  public var address: DocuSignAPI.DSAPIAddressInformation?
  public var billingAgreementId: Swift.String?
  public var email: Swift.String?
  public init(address: DocuSignAPI.DSAPIAddressInformation? = nil, billingAgreementId: Swift.String? = nil, email: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @objcMembers public class DSAPIRecipientSignatureInformation : ObjectiveC.NSObject, Swift.Codable {
  @objc public var fontStyle: Swift.String?
  @objc public var signatureInitials: Swift.String?
  @objc public var signatureName: Swift.String?
  @objc override dynamic public init()
  @objc public init(fontStyle: Swift.String? = nil, signatureInitials: Swift.String? = nil, signatureName: Swift.String? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIEventResult : Swift.Codable {
  public var eventTimestamp: Foundation.Date?
  public var failureDescription: Swift.String?
  public var status: Swift.String?
  public var vendorFailureStatusCode: Swift.String?
  public init(eventTimestamp: Foundation.Date? = nil, failureDescription: Swift.String? = nil, status: Swift.String? = nil, vendorFailureStatusCode: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPICreditCardTypes : Swift.Codable {
  public var cardTypes: [Swift.String]?
  public init(cardTypes: [Swift.String]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIBulkSendEnvelopesInfo : Swift.Codable {
  public var completed: Swift.String?
  public var declined: Swift.String?
  public var voided: Swift.String?
  public init(completed: Swift.String? = nil, declined: Swift.String? = nil, voided: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIWorkspaceList : Swift.Codable {
  public var endPosition: Swift.String?
  public var resultSetSize: Swift.String?
  public var startPosition: Swift.String?
  public var totalSetSize: Swift.String?
  public var workspaces: [DocuSignAPI.DSAPIWorkspace]?
  public init(endPosition: Swift.String? = nil, resultSetSize: Swift.String? = nil, startPosition: Swift.String? = nil, totalSetSize: Swift.String? = nil, workspaces: [DocuSignAPI.DSAPIWorkspace]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @objcMembers public class DSAPIEnvelopeTemplateResults : ObjectiveC.NSObject, Swift.Codable {
  @objc public var endPosition: Swift.String?
  @objc public var envelopeTemplates: [DocuSignAPI.DSAPIEnvelopeTemplate]?
  @objc public var folders: [DocuSignAPI.DSAPIFolder]?
  @objc public var nextUri: Foundation.URL?
  @objc public var previousUri: Foundation.URL?
  @objc public var resultSetSize: Swift.String?
  @objc public var startPosition: Swift.String?
  @objc public var totalSetSize: Swift.String?
  @objc public init(endPosition: Swift.String? = nil, envelopeTemplates: [DocuSignAPI.DSAPIEnvelopeTemplate]? = nil, folders: [DocuSignAPI.DSAPIFolder]? = nil, nextUri: Foundation.URL? = nil, previousUri: Foundation.URL? = nil, resultSetSize: Swift.String? = nil, startPosition: Swift.String? = nil, totalSetSize: Swift.String? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct DSAPISignatureType : Swift.Codable {
  @DocuSignAPI.BoolFromString public var isDefault: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var type: Swift.String?
  public init(isDefault: Swift.Bool = false, type: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIBulkProcessingListSummaries : Swift.Codable {
  public var bulkListSummaries: [DocuSignAPI.DSAPIBulkProcessingListSummary]?
  public init(bulkListSummaries: [DocuSignAPI.DSAPIBulkProcessingListSummary]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIUserPasswordRules : Swift.Codable {
  public var passwordRules: DocuSignAPI.DSAPIAccountPasswordRules?
  public var userId: Swift.String?
  public init(passwordRules: DocuSignAPI.DSAPIAccountPasswordRules? = nil, userId: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIBulkSendBatchActionRequest : Swift.Codable {
  public var action: Swift.String?
  public var notification: DocuSignAPI.DSAPINotification?
  public var voidReason: Swift.String?
  public init(action: Swift.String? = nil, notification: DocuSignAPI.DSAPINotification? = nil, voidReason: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPICommissionState : Swift.Codable {
  @DocuSignAPI.BoolFromString public var anchorAllowWhiteSpaceInCharacters: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var anchorAllowWhiteSpaceInCharactersMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var anchorCaseSensitive: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var anchorCaseSensitiveMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorHorizontalAlignment: Swift.String?
  public var anchorHorizontalAlignmentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var anchorIgnoreIfNotPresent: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var anchorIgnoreIfNotPresentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var anchorMatchWholeWord: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var anchorMatchWholeWordMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorString: Swift.String?
  public var anchorStringMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorTabProcessorVersion: Swift.String?
  public var anchorTabProcessorVersionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorUnits: Swift.String?
  public var anchorUnitsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorXOffset: Swift.String?
  public var anchorXOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorYOffset: Swift.String?
  public var anchorYOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var bold: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var boldMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var concealValueOnDocument: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var concealValueOnDocumentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var conditionalParentLabel: Swift.String?
  public var conditionalParentLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var conditionalParentValue: Swift.String?
  public var conditionalParentValueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var customTabId: Swift.String?
  public var customTabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var disableAutoSize: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var disableAutoSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var documentId: Swift.String?
  public var documentIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  public var font: Swift.String?
  public var fontColor: Swift.String?
  public var fontColorMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var fontMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var fontSize: Swift.String?
  public var fontSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var formOrder: Swift.String?
  public var formOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var formPageLabel: Swift.String?
  public var formPageLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var formPageNumber: Swift.String?
  public var formPageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var height: Swift.String?
  public var heightMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var italic: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var italicMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var localePolicy: DocuSignAPI.DSAPILocalePolicyTab?
  @DocuSignAPI.BoolFromString public var locked: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var lockedMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var maxLength: Swift.String?
  public var maxLengthMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var mergeField: DocuSignAPI.DSAPIMergeField?
  public var mergeFieldXml: Swift.String?
  public var name: Swift.String?
  public var nameMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var originalValue: Swift.String?
  public var originalValueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var pageNumber: Swift.String?
  public var pageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var recipientId: Swift.String?
  public var recipientIdGuid: Swift.String?
  public var recipientIdGuidMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var recipientIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var required: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var requiredMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var smartContractInformation: DocuSignAPI.DSAPISmartContractInformation?
  public var source: Swift.String?
  public var status: Swift.String?
  public var statusMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var tabGroupLabels: [Swift.String]?
  public var tabGroupLabelsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var tabId: Swift.String?
  public var tabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var tabLabel: Swift.String?
  public var tabLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var tabOrder: Swift.String?
  public var tabOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var tabType: Swift.String?
  public var tabTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var templateLocked: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var templateLockedMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var templateRequired: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var templateRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var tooltip: Swift.String?
  public var toolTipMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var underline: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var underlineMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var value: Swift.String?
  public var valueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var width: Swift.String?
  public var widthMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var xPosition: Swift.String?
  public var xPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var yPosition: Swift.String?
  public var yPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public init(anchorAllowWhiteSpaceInCharacters: Swift.Bool = false, anchorAllowWhiteSpaceInCharactersMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorCaseSensitive: Swift.Bool = false, anchorCaseSensitiveMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorHorizontalAlignment: Swift.String? = nil, anchorHorizontalAlignmentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorIgnoreIfNotPresent: Swift.Bool = false, anchorIgnoreIfNotPresentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorMatchWholeWord: Swift.Bool = false, anchorMatchWholeWordMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorString: Swift.String? = nil, anchorStringMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorTabProcessorVersion: Swift.String? = nil, anchorTabProcessorVersionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorUnits: Swift.String? = nil, anchorUnitsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorXOffset: Swift.String? = nil, anchorXOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorYOffset: Swift.String? = nil, anchorYOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, bold: Swift.Bool = false, boldMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, concealValueOnDocument: Swift.Bool = false, concealValueOnDocumentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, conditionalParentLabel: Swift.String? = nil, conditionalParentLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, conditionalParentValue: Swift.String? = nil, conditionalParentValueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, customTabId: Swift.String? = nil, customTabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, disableAutoSize: Swift.Bool = false, disableAutoSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, documentId: Swift.String? = nil, documentIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, font: Swift.String? = nil, fontColor: Swift.String? = nil, fontColorMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, fontMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, fontSize: Swift.String? = nil, fontSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formOrder: Swift.String? = nil, formOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formPageLabel: Swift.String? = nil, formPageLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formPageNumber: Swift.String? = nil, formPageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, height: Swift.String? = nil, heightMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, italic: Swift.Bool = false, italicMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, localePolicy: DocuSignAPI.DSAPILocalePolicyTab? = nil, locked: Swift.Bool = false, lockedMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, maxLength: Swift.String? = nil, maxLengthMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, mergeField: DocuSignAPI.DSAPIMergeField? = nil, mergeFieldXml: Swift.String? = nil, name: Swift.String? = nil, nameMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, originalValue: Swift.String? = nil, originalValueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, pageNumber: Swift.String? = nil, pageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, recipientId: Swift.String? = nil, recipientIdGuid: Swift.String? = nil, recipientIdGuidMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, recipientIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, required: Swift.Bool = false, requiredMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, smartContractInformation: DocuSignAPI.DSAPISmartContractInformation? = nil, source: Swift.String? = nil, status: Swift.String? = nil, statusMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabGroupLabels: [Swift.String]? = nil, tabGroupLabelsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabId: Swift.String? = nil, tabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabLabel: Swift.String? = nil, tabLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabOrder: Swift.String? = nil, tabOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabType: Swift.String? = nil, tabTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, templateLocked: Swift.Bool = false, templateLockedMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, templateRequired: Swift.Bool = false, templateRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tooltip: Swift.String? = nil, toolTipMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, underline: Swift.Bool = false, underlineMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, value: Swift.String? = nil, valueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, width: Swift.String? = nil, widthMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, xPosition: Swift.String? = nil, xPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, yPosition: Swift.String? = nil, yPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @objcMembers public class DSAPINote : ObjectiveC.NSObject, Swift.Codable {
  @objc @DocuSignAPI.BoolFromString public var anchorAllowWhiteSpaceInCharacters: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorAllowWhiteSpaceInCharactersMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var anchorCaseSensitive: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorCaseSensitiveMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorHorizontalAlignment: Swift.String?
  @objc public var anchorHorizontalAlignmentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var anchorIgnoreIfNotPresent: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorIgnoreIfNotPresentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var anchorMatchWholeWord: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorMatchWholeWordMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorString: Swift.String?
  @objc public var anchorStringMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorTabProcessorVersion: Swift.String?
  @objc public var anchorTabProcessorVersionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorUnits: Swift.String?
  @objc public var anchorUnitsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorXOffset: Swift.String?
  @objc public var anchorXOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorYOffset: Swift.String?
  @objc public var anchorYOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var bold: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var boldMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var conditionalParentLabel: Swift.String?
  @objc public var conditionalParentLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var conditionalParentValue: Swift.String?
  @objc public var conditionalParentValueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var customTabId: Swift.String?
  @objc public var customTabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var documentId: Swift.String?
  @objc public var documentIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  @objc public var font: Swift.String?
  @objc public var fontColor: Swift.String?
  @objc public var fontColorMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var fontMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var fontSize: Swift.String?
  @objc public var fontSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var formOrder: Swift.String?
  @objc public var formOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var formPageLabel: Swift.String?
  @objc public var formPageLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var formPageNumber: Swift.String?
  @objc public var formPageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var height: Swift.String?
  @objc public var heightMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var italic: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var italicMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var localePolicy: DocuSignAPI.DSAPILocalePolicyTab?
  @objc public var mergeField: DocuSignAPI.DSAPIMergeField?
  @objc public var mergeFieldXml: Swift.String?
  @objc public var name: Swift.String?
  @objc public var nameMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var pageNumber: Swift.String?
  @objc public var pageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var recipientId: Swift.String?
  @objc public var recipientIdGuid: Swift.String?
  @objc public var recipientIdGuidMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var recipientIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var shared: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var sharedMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var smartContractInformation: DocuSignAPI.DSAPISmartContractInformation?
  @objc public var source: Swift.String?
  @objc public var status: Swift.String?
  @objc public var statusMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabGroupLabels: [Swift.String]?
  @objc public var tabGroupLabelsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabId: Swift.String?
  @objc public var tabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabLabel: Swift.String?
  @objc public var tabLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabOrder: Swift.String?
  @objc public var tabOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabType: Swift.String?
  @objc public var tabTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var templateLocked: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var templateLockedMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var templateRequired: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var templateRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tooltip: Swift.String?
  @objc public var toolTipMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var underline: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var underlineMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var value: Swift.String?
  @objc public var valueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var width: Swift.String?
  @objc public var widthMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var xPosition: Swift.String?
  @objc public var xPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var yPosition: Swift.String?
  @objc public var yPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public init(anchorAllowWhiteSpaceInCharacters: Swift.Bool = false, anchorAllowWhiteSpaceInCharactersMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorCaseSensitive: Swift.Bool = false, anchorCaseSensitiveMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorHorizontalAlignment: Swift.String? = nil, anchorHorizontalAlignmentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorIgnoreIfNotPresent: Swift.Bool = false, anchorIgnoreIfNotPresentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorMatchWholeWord: Swift.Bool = false, anchorMatchWholeWordMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorString: Swift.String? = nil, anchorStringMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorTabProcessorVersion: Swift.String? = nil, anchorTabProcessorVersionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorUnits: Swift.String? = nil, anchorUnitsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorXOffset: Swift.String? = nil, anchorXOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorYOffset: Swift.String? = nil, anchorYOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, bold: Swift.Bool = false, boldMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, conditionalParentLabel: Swift.String? = nil, conditionalParentLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, conditionalParentValue: Swift.String? = nil, conditionalParentValueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, customTabId: Swift.String? = nil, customTabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, documentId: Swift.String? = nil, documentIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, font: Swift.String? = nil, fontColor: Swift.String? = nil, fontColorMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, fontMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, fontSize: Swift.String? = nil, fontSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formOrder: Swift.String? = nil, formOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formPageLabel: Swift.String? = nil, formPageLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formPageNumber: Swift.String? = nil, formPageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, height: Swift.String? = nil, heightMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, italic: Swift.Bool = false, italicMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, localePolicy: DocuSignAPI.DSAPILocalePolicyTab? = nil, mergeField: DocuSignAPI.DSAPIMergeField? = nil, mergeFieldXml: Swift.String? = nil, name: Swift.String? = nil, nameMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, pageNumber: Swift.String? = nil, pageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, recipientId: Swift.String? = nil, recipientIdGuid: Swift.String? = nil, recipientIdGuidMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, recipientIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, shared: Swift.Bool = false, sharedMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, smartContractInformation: DocuSignAPI.DSAPISmartContractInformation? = nil, source: Swift.String? = nil, status: Swift.String? = nil, statusMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabGroupLabels: [Swift.String]? = nil, tabGroupLabelsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabId: Swift.String? = nil, tabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabLabel: Swift.String? = nil, tabLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabOrder: Swift.String? = nil, tabOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabType: Swift.String? = nil, tabTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, templateLocked: Swift.Bool = false, templateLockedMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, templateRequired: Swift.Bool = false, templateRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tooltip: Swift.String? = nil, toolTipMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, underline: Swift.Bool = false, underlineMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, value: Swift.String? = nil, valueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, width: Swift.String? = nil, widthMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, xPosition: Swift.String? = nil, xPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, yPosition: Swift.String? = nil, yPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIInlineTemplate : Swift.Codable {
  public var customFields: DocuSignAPI.DSAPICustomFields?
  public var documents: [DocuSignAPI.DSAPIDocument]?
  public var envelope: DocuSignAPI.DSAPIEnvelope?
  public var recipients: DocuSignAPI.DSAPIRecipients?
  public var sequence: Swift.String?
  public init(customFields: DocuSignAPI.DSAPICustomFields? = nil, documents: [DocuSignAPI.DSAPIDocument]? = nil, envelope: DocuSignAPI.DSAPIEnvelope? = nil, recipients: DocuSignAPI.DSAPIRecipients? = nil, sequence: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIConnectCustomConfiguration : Swift.Codable {
  @DocuSignAPI.BoolFromString public var allowEnvelopePublish: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  @DocuSignAPI.BoolFromString public var allowSalesforcePublish: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  @DocuSignAPI.BoolFromString public var allUsers: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var configurationType: Swift.String?
  public var connectId: Swift.String?
  public var deliveryMode: Swift.String?
  @DocuSignAPI.BoolFromString public var enableLog: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var envelopeEvents: [Swift.String]?
  public var eventData: DocuSignAPI.DSAPIConnectEventData?
  public var events: [Swift.String]?
  public var externalFolderId: Swift.String?
  public var externalFolderLabel: Swift.String?
  @DocuSignAPI.BoolFromString public var includeCertificateOfCompletion: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var includeCertSoapHeader: Swift.String?
  @DocuSignAPI.BoolFromString public var includeDocumentFields: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var includeDocuments: Swift.String?
  @DocuSignAPI.BoolFromString public var includeEnvelopeVoidReason: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var includeHMAC: Swift.String?
  @DocuSignAPI.BoolFromString public var includeSenderAccountasCustomField: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  @DocuSignAPI.BoolFromString public var includeTimeZoneInformation: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var name: Swift.String?
  public var password: Swift.String?
  public var recipientEvents: [Swift.String]?
  @DocuSignAPI.BoolFromString public var requireMutualTls: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  @DocuSignAPI.BoolFromString public var requiresAcknowledgement: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var salesforceApiVersion: Swift.String?
  public var salesforceAuthcode: Swift.String?
  public var salesforceCallBackUrl: Foundation.URL?
  @DocuSignAPI.BoolFromString public var salesforceDocumentsAsContentFiles: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var senderOverride: Swift.String?
  public var senderSelectableItems: [Swift.String]?
  public var sfObjects: [DocuSignAPI.DSAPIConnectSalesforceObject]?
  @DocuSignAPI.BoolFromString public var signMessageWithX509Certificate: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var soapNamespace: Swift.String?
  public var urlToPublishTo: Swift.String?
  public var userIds: [Swift.String]?
  public var userName: Swift.String?
  @DocuSignAPI.BoolFromString public var useSoapInterface: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public init(allowEnvelopePublish: Swift.Bool = false, allowSalesforcePublish: Swift.Bool = false, allUsers: Swift.Bool = false, configurationType: Swift.String? = nil, connectId: Swift.String? = nil, deliveryMode: Swift.String? = nil, enableLog: Swift.Bool = false, envelopeEvents: [Swift.String]? = nil, eventData: DocuSignAPI.DSAPIConnectEventData? = nil, events: [Swift.String]? = nil, externalFolderId: Swift.String? = nil, externalFolderLabel: Swift.String? = nil, includeCertificateOfCompletion: Swift.Bool = false, includeCertSoapHeader: Swift.String? = nil, includeDocumentFields: Swift.Bool = false, includeDocuments: Swift.String? = nil, includeEnvelopeVoidReason: Swift.Bool = false, includeHMAC: Swift.String? = nil, includeSenderAccountasCustomField: Swift.Bool = false, includeTimeZoneInformation: Swift.Bool = false, name: Swift.String? = nil, password: Swift.String? = nil, recipientEvents: [Swift.String]? = nil, requireMutualTls: Swift.Bool = false, requiresAcknowledgement: Swift.Bool = false, salesforceApiVersion: Swift.String? = nil, salesforceAuthcode: Swift.String? = nil, salesforceCallBackUrl: Foundation.URL? = nil, salesforceDocumentsAsContentFiles: Swift.Bool = false, senderOverride: Swift.String? = nil, senderSelectableItems: [Swift.String]? = nil, sfObjects: [DocuSignAPI.DSAPIConnectSalesforceObject]? = nil, signMessageWithX509Certificate: Swift.Bool = false, soapNamespace: Swift.String? = nil, urlToPublishTo: Swift.String? = nil, userIds: [Swift.String]? = nil, userName: Swift.String? = nil, useSoapInterface: Swift.Bool = false)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIAccountUISettings : Swift.Codable {
  public var adminMessage: DocuSignAPI.DSAPIAdminMessage?
  public var askAnAdmin: DocuSignAPI.DSAPIAskAnAdmin?
  public var enableAdminMessage: Swift.String?
  public var enableAdminMessageMetadata: DocuSignAPI.DSAPISettingsMetadata?
  public var enableEasySignCanUseMultiTemplateApply: Swift.String?
  public var enableEasySignCanUseMultiTemplateApplyMetadata: DocuSignAPI.DSAPISettingsMetadata?
  public var enableEasySignTemplateUpload: Swift.String?
  public var enableEasySignTemplateUploadMetadata: DocuSignAPI.DSAPISettingsMetadata?
  public var enableEnvelopeCopyWithData: Swift.String?
  public var enableEnvelopeCopyWithDataMetadata: DocuSignAPI.DSAPISettingsMetadata?
  public var enableLegacyHomepageLink: Swift.String?
  public var enableLegacyHomepageLinkMetadata: DocuSignAPI.DSAPISettingsMetadata?
  public var hasExternalLinkedAccounts: Swift.String?
  public var hasExternalLinkedAccountsMetadata: DocuSignAPI.DSAPISettingsMetadata?
  public var hideSendAnEnvelope: Swift.String?
  public var hideSendAnEnvelopeMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @DocuSignAPI.BoolFromString public var hideUseATemplate: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var hideUseATemplateInPrepare: Swift.String?
  public var hideUseATemplateInPrepareMetadata: DocuSignAPI.DSAPISettingsMetadata?
  public var hideUseATemplateMetadata: DocuSignAPI.DSAPISettingsMetadata?
  public var orderBasedRecipientIdGeneration: Swift.String?
  public var orderBasedRecipientIdGenerationMetadata: DocuSignAPI.DSAPISettingsMetadata?
  public var removeEnvelopeForwarding: Swift.String?
  public var removeEnvelopeForwardingMetadata: DocuSignAPI.DSAPISettingsMetadata?
  public var shouldRedactAccessCode: Swift.String?
  public var shouldRedactAccessCodeMetadata: DocuSignAPI.DSAPISettingsMetadata?
  public var uploadNewImageToSignOrInitial: Swift.String?
  public var uploadNewImageToSignOrInitialMetadata: DocuSignAPI.DSAPISettingsMetadata?
  public init(adminMessage: DocuSignAPI.DSAPIAdminMessage? = nil, askAnAdmin: DocuSignAPI.DSAPIAskAnAdmin? = nil, enableAdminMessage: Swift.String? = nil, enableAdminMessageMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, enableEasySignCanUseMultiTemplateApply: Swift.String? = nil, enableEasySignCanUseMultiTemplateApplyMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, enableEasySignTemplateUpload: Swift.String? = nil, enableEasySignTemplateUploadMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, enableEnvelopeCopyWithData: Swift.String? = nil, enableEnvelopeCopyWithDataMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, enableLegacyHomepageLink: Swift.String? = nil, enableLegacyHomepageLinkMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, hasExternalLinkedAccounts: Swift.String? = nil, hasExternalLinkedAccountsMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, hideSendAnEnvelope: Swift.String? = nil, hideSendAnEnvelopeMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, hideUseATemplate: Swift.Bool = false, hideUseATemplateInPrepare: Swift.String? = nil, hideUseATemplateInPrepareMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, hideUseATemplateMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, orderBasedRecipientIdGeneration: Swift.String? = nil, orderBasedRecipientIdGenerationMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, removeEnvelopeForwarding: Swift.String? = nil, removeEnvelopeForwardingMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, shouldRedactAccessCode: Swift.String? = nil, shouldRedactAccessCodeMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, uploadNewImageToSignOrInitial: Swift.String? = nil, uploadNewImageToSignOrInitialMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIRecipientPreviewRequest : Swift.Codable {
  public var assertionId: Swift.String?
  public var authenticationInstant: Swift.String?
  public var authenticationMethod: Swift.String?
  public var clientURLs: DocuSignAPI.DSAPIRecipientTokenClientURLs?
  public var pingFrequency: Swift.String?
  public var pingUrl: Foundation.URL?
  public var recipientId: Swift.String?
  public var returnUrl: Foundation.URL?
  public var securityDomain: Swift.String?
  public var xFrameOptions: Swift.String?
  public var xFrameOptionsAllowFromUrl: Foundation.URL?
  public init(assertionId: Swift.String? = nil, authenticationInstant: Swift.String? = nil, authenticationMethod: Swift.String? = nil, clientURLs: DocuSignAPI.DSAPIRecipientTokenClientURLs? = nil, pingFrequency: Swift.String? = nil, pingUrl: Foundation.URL? = nil, recipientId: Swift.String? = nil, returnUrl: Foundation.URL? = nil, securityDomain: Swift.String? = nil, xFrameOptions: Swift.String? = nil, xFrameOptionsAllowFromUrl: Foundation.URL? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPICreditCardInformation : Swift.Codable {
  public var address: DocuSignAPI.DSAPIAddressInformation?
  public var cardLastDigits: Swift.String?
  public var cardNumber: Swift.String?
  public var cardType: Swift.String?
  public var cvNumber: Swift.String?
  public var expirationMonth: Swift.String?
  public var expirationYear: Swift.String?
  public var nameOnCard: Swift.String?
  public var tokenizedCard: Swift.String?
  public init(address: DocuSignAPI.DSAPIAddressInformation? = nil, cardLastDigits: Swift.String? = nil, cardNumber: Swift.String? = nil, cardType: Swift.String? = nil, cvNumber: Swift.String? = nil, expirationMonth: Swift.String? = nil, expirationYear: Swift.String? = nil, nameOnCard: Swift.String? = nil, tokenizedCard: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIBrandsRequest : Swift.Codable {
  public var brands: [DocuSignAPI.DSAPIBrandRequest]?
  public init(brands: [DocuSignAPI.DSAPIBrandRequest]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension DocuSignAPI.DSAPIEnvelopeTemplate {
  @objc dynamic public func toDictionary() -> Any?
}
public struct DSAPIEnvelopesInformation : Swift.Codable {
  public var continuationToken: Swift.String?
  public var endPosition: Swift.String?
  public var envelopes: [DocuSignAPI.DSAPIEnvelope]?
  public var envelopeTransactionStatuses: [DocuSignAPI.DSAPIEnvelopeTransactionStatus]?
  public var folders: [DocuSignAPI.DSAPIFolder]?
  public var lastQueriedDateTime: Foundation.Date?
  public var nextUri: Foundation.URL?
  public var previousUri: Foundation.URL?
  public var resultSetSize: Swift.String?
  public var startPosition: Swift.String?
  public var totalSetSize: Swift.String?
  public init(continuationToken: Swift.String? = nil, endPosition: Swift.String? = nil, envelopes: [DocuSignAPI.DSAPIEnvelope]? = nil, envelopeTransactionStatuses: [DocuSignAPI.DSAPIEnvelopeTransactionStatus]? = nil, folders: [DocuSignAPI.DSAPIFolder]? = nil, lastQueriedDateTime: Foundation.Date? = nil, nextUri: Foundation.URL? = nil, previousUri: Foundation.URL? = nil, resultSetSize: Swift.String? = nil, startPosition: Swift.String? = nil, totalSetSize: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public typealias HeadersDict = [Swift.String : Swift.String]
public struct DSAPIBrandLink : Swift.Codable {
  public var linkText: Swift.String?
  public var linkType: Swift.String?
  @DocuSignAPI.BoolFromString public var showLink: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var urlOrMailTo: Swift.String?
  public init(linkText: Swift.String? = nil, linkType: Swift.String? = nil, showLink: Swift.Bool = false, urlOrMailTo: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public typealias EncodeResult = (data: Foundation.Data?, error: Swift.Error?)
public struct DSAPINotaryJurisdiction : Swift.Codable {
  public var commissionExpiration: Swift.String?
  public var commissionId: Swift.String?
  public var county: Swift.String?
  public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  public var jurisdiction: DocuSignAPI.DSAPIJurisdiction?
  public var registeredName: Swift.String?
  public var sealType: Swift.String?
  public init(commissionExpiration: Swift.String? = nil, commissionId: Swift.String? = nil, county: Swift.String? = nil, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, jurisdiction: DocuSignAPI.DSAPIJurisdiction? = nil, registeredName: Swift.String? = nil, sealType: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPICommissionCounty : Swift.Codable {
  @DocuSignAPI.BoolFromString public var anchorAllowWhiteSpaceInCharacters: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var anchorAllowWhiteSpaceInCharactersMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var anchorCaseSensitive: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var anchorCaseSensitiveMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorHorizontalAlignment: Swift.String?
  public var anchorHorizontalAlignmentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var anchorIgnoreIfNotPresent: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var anchorIgnoreIfNotPresentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var anchorMatchWholeWord: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var anchorMatchWholeWordMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorString: Swift.String?
  public var anchorStringMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorTabProcessorVersion: Swift.String?
  public var anchorTabProcessorVersionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorUnits: Swift.String?
  public var anchorUnitsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorXOffset: Swift.String?
  public var anchorXOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorYOffset: Swift.String?
  public var anchorYOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var bold: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var boldMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var concealValueOnDocument: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var concealValueOnDocumentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var conditionalParentLabel: Swift.String?
  public var conditionalParentLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var conditionalParentValue: Swift.String?
  public var conditionalParentValueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var customTabId: Swift.String?
  public var customTabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var disableAutoSize: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var disableAutoSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var documentId: Swift.String?
  public var documentIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  public var font: Swift.String?
  public var fontColor: Swift.String?
  public var fontColorMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var fontMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var fontSize: Swift.String?
  public var fontSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var formOrder: Swift.String?
  public var formOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var formPageLabel: Swift.String?
  public var formPageLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var formPageNumber: Swift.String?
  public var formPageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var height: Swift.String?
  public var heightMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var italic: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var italicMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var localePolicy: DocuSignAPI.DSAPILocalePolicyTab?
  @DocuSignAPI.BoolFromString public var locked: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var lockedMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var maxLength: Swift.String?
  public var maxLengthMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var mergeField: DocuSignAPI.DSAPIMergeField?
  public var mergeFieldXml: Swift.String?
  public var name: Swift.String?
  public var nameMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var originalValue: Swift.String?
  public var originalValueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var pageNumber: Swift.String?
  public var pageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var recipientId: Swift.String?
  public var recipientIdGuid: Swift.String?
  public var recipientIdGuidMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var recipientIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var required: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var requiredMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var smartContractInformation: DocuSignAPI.DSAPISmartContractInformation?
  public var source: Swift.String?
  public var status: Swift.String?
  public var statusMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var tabGroupLabels: [Swift.String]?
  public var tabGroupLabelsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var tabId: Swift.String?
  public var tabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var tabLabel: Swift.String?
  public var tabLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var tabOrder: Swift.String?
  public var tabOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var tabType: Swift.String?
  public var tabTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var templateLocked: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var templateLockedMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var templateRequired: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var templateRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var tooltip: Swift.String?
  public var toolTipMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var underline: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var underlineMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var value: Swift.String?
  public var valueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var width: Swift.String?
  public var widthMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var xPosition: Swift.String?
  public var xPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var yPosition: Swift.String?
  public var yPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public init(anchorAllowWhiteSpaceInCharacters: Swift.Bool = false, anchorAllowWhiteSpaceInCharactersMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorCaseSensitive: Swift.Bool = false, anchorCaseSensitiveMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorHorizontalAlignment: Swift.String? = nil, anchorHorizontalAlignmentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorIgnoreIfNotPresent: Swift.Bool = false, anchorIgnoreIfNotPresentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorMatchWholeWord: Swift.Bool = false, anchorMatchWholeWordMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorString: Swift.String? = nil, anchorStringMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorTabProcessorVersion: Swift.String? = nil, anchorTabProcessorVersionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorUnits: Swift.String? = nil, anchorUnitsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorXOffset: Swift.String? = nil, anchorXOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorYOffset: Swift.String? = nil, anchorYOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, bold: Swift.Bool = false, boldMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, concealValueOnDocument: Swift.Bool = false, concealValueOnDocumentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, conditionalParentLabel: Swift.String? = nil, conditionalParentLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, conditionalParentValue: Swift.String? = nil, conditionalParentValueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, customTabId: Swift.String? = nil, customTabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, disableAutoSize: Swift.Bool = false, disableAutoSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, documentId: Swift.String? = nil, documentIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, font: Swift.String? = nil, fontColor: Swift.String? = nil, fontColorMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, fontMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, fontSize: Swift.String? = nil, fontSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formOrder: Swift.String? = nil, formOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formPageLabel: Swift.String? = nil, formPageLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formPageNumber: Swift.String? = nil, formPageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, height: Swift.String? = nil, heightMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, italic: Swift.Bool = false, italicMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, localePolicy: DocuSignAPI.DSAPILocalePolicyTab? = nil, locked: Swift.Bool = false, lockedMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, maxLength: Swift.String? = nil, maxLengthMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, mergeField: DocuSignAPI.DSAPIMergeField? = nil, mergeFieldXml: Swift.String? = nil, name: Swift.String? = nil, nameMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, originalValue: Swift.String? = nil, originalValueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, pageNumber: Swift.String? = nil, pageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, recipientId: Swift.String? = nil, recipientIdGuid: Swift.String? = nil, recipientIdGuidMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, recipientIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, required: Swift.Bool = false, requiredMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, smartContractInformation: DocuSignAPI.DSAPISmartContractInformation? = nil, source: Swift.String? = nil, status: Swift.String? = nil, statusMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabGroupLabels: [Swift.String]? = nil, tabGroupLabelsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabId: Swift.String? = nil, tabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabLabel: Swift.String? = nil, tabLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabOrder: Swift.String? = nil, tabOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabType: Swift.String? = nil, tabTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, templateLocked: Swift.Bool = false, templateLockedMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, templateRequired: Swift.Bool = false, templateRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tooltip: Swift.String? = nil, toolTipMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, underline: Swift.Bool = false, underlineMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, value: Swift.String? = nil, valueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, width: Swift.String? = nil, widthMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, xPosition: Swift.String? = nil, xPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, yPosition: Swift.String? = nil, yPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPINewUsersSummary : Swift.Codable {
  public var newUsers: [DocuSignAPI.DSAPINewUser]?
  public init(newUsers: [DocuSignAPI.DSAPINewUser]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @objcMembers public class DSAPINotaryRecipient : ObjectiveC.NSObject, Swift.Codable {
  @objc public var accessCode: Swift.String?
  @objc public var accessCodeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var addAccessCodeToEmail: Swift.String?
  @objc public var additionalNotifications: [DocuSignAPI.DSAPIRecipientAdditionalNotification]?
  @objc public var agentCanEditEmail: Swift.String?
  @objc public var agentCanEditName: Swift.String?
  @objc @DocuSignAPI.BoolFromString public var allowSystemOverrideForLockedRecipient: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc @DocuSignAPI.BoolFromString public var autoNavigation: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var autoRespondedReason: Swift.String?
  @objc public var bulkRecipientsUri: Foundation.URL?
  @objc @DocuSignAPI.BoolFromString public var canSignOffline: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var clientUserId: Swift.String?
  @objc public var completedCount: Swift.String?
  @objc public var creationReason: Swift.String?
  @objc public var customFields: [Swift.String]?
  @objc public var declinedDateTime: Foundation.Date?
  @objc public var declinedReason: Swift.String?
  @objc @DocuSignAPI.BoolFromString public var defaultRecipient: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  public var delegatedBy: DocuSignAPI.DSAPIDelegationInfo?
  public var delegatedTo: [DocuSignAPI.DSAPIDelegationInfo]?
  @objc public var deliveredDateTime: Foundation.Date?
  @objc public var deliveryMethod: Swift.String?
  @objc public var deliveryMethodMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var designatorId: Swift.String?
  @objc public var designatorIdGuid: Swift.String?
  @objc public var documentVisibility: [DocuSignAPI.DSAPIDocumentVisibility]?
  @objc public var email: Swift.String?
  @objc public var emailMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var emailNotification: DocuSignAPI.DSAPIRecipientEmailNotification?
  @objc public var emailRecipientPostSigningURL: Swift.String?
  @objc public var embeddedRecipientStartURL: Swift.String?
  @objc public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  @objc public var excludedDocuments: [Swift.String]?
  @objc public var faxNumber: Swift.String?
  @objc public var faxNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var firstName: Swift.String?
  @objc public var firstNameMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var fullName: Swift.String?
  @objc public var fullNameMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var idCheckConfigurationName: Swift.String?
  @objc public var idCheckConfigurationNameMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var idCheckInformationInput: DocuSignAPI.DSAPIIdCheckInformationInput?
  public var identityVerification: DocuSignAPI.DSAPIRecipientIdentityVerification?
  @objc @DocuSignAPI.BoolFromString public var inheritEmailNotificationConfiguration: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var isBulkRecipient: Swift.String?
  @objc public var isBulkRecipientMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var lastName: Swift.String?
  @objc public var lastNameMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var liveOakStartURL: Swift.String?
  @objc public var lockedRecipientPhoneAuthEditable: Swift.String?
  @objc public var lockedRecipientSmsEditable: Swift.String?
  @objc public var name: Swift.String?
  @objc public var nameMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var notaryId: Swift.String?
  @objc public var notarySignerEmailSent: Swift.String?
  @objc public var notarySigners: [Swift.String]?
  @objc public var notaryType: Swift.String?
  @objc public var note: Swift.String?
  @objc public var noteMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var offlineAttributes: DocuSignAPI.DSAPIOfflineAttributes?
  public var phoneAuthentication: DocuSignAPI.DSAPIRecipientPhoneAuthentication?
  public var phoneNumber: DocuSignAPI.DSAPIRecipientPhoneNumber?
  public var proofFile: DocuSignAPI.DSAPIRecipientProofFile?
  @objc public var recipientAttachments: [DocuSignAPI.DSAPIRecipientAttachment]?
  public var recipientAuthenticationStatus: DocuSignAPI.DSAPIAuthenticationStatus?
  public var recipientFeatureMetadata: [DocuSignAPI.DSAPIFeatureAvailableMetadata]?
  @objc public var recipientId: Swift.String?
  @objc public var recipientIdGuid: Swift.String?
  public var recipientSignatureProviders: [DocuSignAPI.DSAPIRecipientSignatureProvider]?
  @objc @DocuSignAPI.BoolFromString public var recipientSuppliesTabs: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var recipientType: Swift.String?
  @objc public var recipientTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var requireIdLookup: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var requireIdLookupMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var requireSignerCertificate: Swift.String?
  @objc @DocuSignAPI.BoolFromString public var requireSignOnPaper: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc @DocuSignAPI.BoolFromString public var requireUploadSignature: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var roleName: Swift.String?
  @objc public var routingOrder: Swift.String?
  @objc public var routingOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var sentDateTime: Foundation.Date?
  @objc public var signatureInfo: DocuSignAPI.DSAPIRecipientSignatureInformation?
  @objc public var signedDateTime: Foundation.Date?
  @objc @DocuSignAPI.BoolFromString public var signInEachLocation: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var signInEachLocationMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var signingGroupId: Swift.String?
  @objc public var signingGroupIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var signingGroupName: Swift.String?
  @objc public var signingGroupUsers: [DocuSignAPI.DSAPIUserInfo]?
  @objc public var smsAuthentication: DocuSignAPI.DSAPIRecipientSMSAuthentication?
  @objc public var socialAuthentications: [DocuSignAPI.DSAPISocialAuthentication]?
  @objc public var status: Swift.String?
  @objc public var statusCode: Swift.String?
  @objc @DocuSignAPI.BoolFromString public var suppressEmails: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var tabs: DocuSignAPI.DSAPITabs?
  @objc @DocuSignAPI.BoolFromString public var templateLocked: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc @DocuSignAPI.BoolFromString public var templateRequired: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var totalTabCount: Swift.String?
  @objc public var userId: Swift.String?
  public init(accessCode: Swift.String? = nil, accessCodeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, addAccessCodeToEmail: Swift.String? = nil, additionalNotifications: [DocuSignAPI.DSAPIRecipientAdditionalNotification]? = nil, agentCanEditEmail: Swift.String? = nil, agentCanEditName: Swift.String? = nil, allowSystemOverrideForLockedRecipient: Swift.Bool = false, autoNavigation: Swift.Bool = false, autoRespondedReason: Swift.String? = nil, bulkRecipientsUri: Foundation.URL? = nil, canSignOffline: Swift.Bool = false, clientUserId: Swift.String? = nil, completedCount: Swift.String? = nil, creationReason: Swift.String? = nil, customFields: [Swift.String]? = nil, declinedDateTime: Foundation.Date? = nil, declinedReason: Swift.String? = nil, defaultRecipient: Swift.Bool = false, delegatedBy: DocuSignAPI.DSAPIDelegationInfo? = nil, delegatedTo: [DocuSignAPI.DSAPIDelegationInfo]? = nil, deliveredDateTime: Foundation.Date? = nil, deliveryMethod: Swift.String? = nil, deliveryMethodMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, designatorId: Swift.String? = nil, designatorIdGuid: Swift.String? = nil, documentVisibility: [DocuSignAPI.DSAPIDocumentVisibility]? = nil, email: Swift.String? = nil, emailMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, emailNotification: DocuSignAPI.DSAPIRecipientEmailNotification? = nil, emailRecipientPostSigningURL: Swift.String? = nil, embeddedRecipientStartURL: Swift.String? = nil, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, excludedDocuments: [Swift.String]? = nil, faxNumber: Swift.String? = nil, faxNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, firstName: Swift.String? = nil, firstNameMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, fullName: Swift.String? = nil, fullNameMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, idCheckConfigurationName: Swift.String? = nil, idCheckConfigurationNameMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, idCheckInformationInput: DocuSignAPI.DSAPIIdCheckInformationInput? = nil, identityVerification: DocuSignAPI.DSAPIRecipientIdentityVerification? = nil, inheritEmailNotificationConfiguration: Swift.Bool = false, isBulkRecipient: Swift.String? = nil, isBulkRecipientMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, lastName: Swift.String? = nil, lastNameMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, liveOakStartURL: Swift.String? = nil, lockedRecipientPhoneAuthEditable: Swift.String? = nil, lockedRecipientSmsEditable: Swift.String? = nil, name: Swift.String? = nil, nameMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, notaryId: Swift.String? = nil, notarySignerEmailSent: Swift.String? = nil, notarySigners: [Swift.String]? = nil, notaryType: Swift.String? = nil, note: Swift.String? = nil, noteMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, offlineAttributes: DocuSignAPI.DSAPIOfflineAttributes? = nil, phoneAuthentication: DocuSignAPI.DSAPIRecipientPhoneAuthentication? = nil, phoneNumber: DocuSignAPI.DSAPIRecipientPhoneNumber? = nil, proofFile: DocuSignAPI.DSAPIRecipientProofFile? = nil, recipientAttachments: [DocuSignAPI.DSAPIRecipientAttachment]? = nil, recipientAuthenticationStatus: DocuSignAPI.DSAPIAuthenticationStatus? = nil, recipientFeatureMetadata: [DocuSignAPI.DSAPIFeatureAvailableMetadata]? = nil, recipientId: Swift.String? = nil, recipientIdGuid: Swift.String? = nil, recipientSignatureProviders: [DocuSignAPI.DSAPIRecipientSignatureProvider]? = nil, recipientSuppliesTabs: Swift.Bool = false, recipientType: Swift.String? = nil, recipientTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, requireIdLookup: Swift.Bool = false, requireIdLookupMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, requireSignerCertificate: Swift.String? = nil, requireSignOnPaper: Swift.Bool = false, requireUploadSignature: Swift.Bool = false, roleName: Swift.String? = nil, routingOrder: Swift.String? = nil, routingOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, sentDateTime: Foundation.Date? = nil, signatureInfo: DocuSignAPI.DSAPIRecipientSignatureInformation? = nil, signedDateTime: Foundation.Date? = nil, signInEachLocation: Swift.Bool = false, signInEachLocationMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, signingGroupId: Swift.String? = nil, signingGroupIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, signingGroupName: Swift.String? = nil, signingGroupUsers: [DocuSignAPI.DSAPIUserInfo]? = nil, smsAuthentication: DocuSignAPI.DSAPIRecipientSMSAuthentication? = nil, socialAuthentications: [DocuSignAPI.DSAPISocialAuthentication]? = nil, status: Swift.String? = nil, statusCode: Swift.String? = nil, suppressEmails: Swift.Bool = false, tabs: DocuSignAPI.DSAPITabs? = nil, templateLocked: Swift.Bool = false, templateRequired: Swift.Bool = false, totalTabCount: Swift.String? = nil, userId: Swift.String? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers open class NotaryAPI {
  open class func notaryGetNotary(includeJurisdictions: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPINotaryResult?, _ error: Swift.Error?) -> Swift.Void))
  open class func notaryGetNotaryWithRequestBuilder(includeJurisdictions: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPINotaryResult>
  open class func notaryJournalsGetNotaryJournals(count: Swift.String? = nil, searchText: Swift.String? = nil, startPosition: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPINotaryJournalList?, _ error: Swift.Error?) -> Swift.Void))
  open class func notaryJournalsGetNotaryJournalsWithRequestBuilder(count: Swift.String? = nil, searchText: Swift.String? = nil, startPosition: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPINotaryJournalList>
  open class func notaryJurisdictionSealGetNotaryJurisdictionSeal(jurisdictionId: Swift.String, completion: @escaping ((_ data: Swift.Void?, _ error: Swift.Error?) -> Swift.Void))
  open class func notaryJurisdictionSealGetNotaryJurisdictionSealWithRequestBuilder(jurisdictionId: Swift.String) -> DocuSignAPI.RequestBuilder<Swift.Void>
  open class func notaryJurisdictionsDeleteNotaryJurisdiction(jurisdictionId: Swift.String, completion: @escaping ((_ data: Swift.Void?, _ error: Swift.Error?) -> Swift.Void))
  open class func notaryJurisdictionsDeleteNotaryJurisdictionWithRequestBuilder(jurisdictionId: Swift.String) -> DocuSignAPI.RequestBuilder<Swift.Void>
  open class func notaryJurisdictionsGetNotaryJurisdiction(jurisdictionId: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPINotaryJurisdiction?, _ error: Swift.Error?) -> Swift.Void))
  open class func notaryJurisdictionsGetNotaryJurisdictionWithRequestBuilder(jurisdictionId: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPINotaryJurisdiction>
  open class func notaryJurisdictionsGetNotaryJurisdictions(completion: @escaping ((_ data: DocuSignAPI.DSAPINotaryJurisdictionList?, _ error: Swift.Error?) -> Swift.Void))
  open class func notaryJurisdictionsGetNotaryJurisdictionsWithRequestBuilder() -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPINotaryJurisdictionList>
  open class func notaryJurisdictionsPostNotaryJurisdictions(body: DocuSignAPI.DSAPINotaryJurisdiction? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPINotaryJurisdiction?, _ error: Swift.Error?) -> Swift.Void))
  open class func notaryJurisdictionsPostNotaryJurisdictionsWithRequestBuilder(body: DocuSignAPI.DSAPINotaryJurisdiction? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPINotaryJurisdiction>
  open class func notaryJurisdictionsPutNotaryJurisdiction(jurisdictionId: Swift.String, body: DocuSignAPI.DSAPINotaryJurisdiction? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPINotaryJurisdiction?, _ error: Swift.Error?) -> Swift.Void))
  open class func notaryJurisdictionsPutNotaryJurisdictionWithRequestBuilder(jurisdictionId: Swift.String, body: DocuSignAPI.DSAPINotaryJurisdiction? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPINotaryJurisdiction>
  open class func notaryPostNotary(body: DocuSignAPI.DSAPINotary? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPINotary?, _ error: Swift.Error?) -> Swift.Void))
  open class func notaryPostNotaryWithRequestBuilder(body: DocuSignAPI.DSAPINotary? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPINotary>
  open class func notaryPutNotary(body: DocuSignAPI.DSAPINotary? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPINotary?, _ error: Swift.Error?) -> Swift.Void))
  open class func notaryPutNotaryWithRequestBuilder(body: DocuSignAPI.DSAPINotary? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPINotary>
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers open class FoldersAPI : ObjectiveC.NSObject {
  open class func foldersGetFolderItems(accountId: Swift.String, folderId: Swift.String, fromDate: Swift.String? = nil, includeItems: Swift.String? = nil, ownerEmail: Swift.String? = nil, ownerName: Swift.String? = nil, searchText: Swift.String? = nil, startPosition: Swift.String? = nil, status: Swift.String? = nil, toDate: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIFolderItemsResponse?, _ error: Swift.Error?) -> Swift.Void))
  open class func foldersGetFolderItemsWithRequestBuilder(accountId: Swift.String, folderId: Swift.String, fromDate: Swift.String? = nil, includeItems: Swift.String? = nil, ownerEmail: Swift.String? = nil, ownerName: Swift.String? = nil, searchText: Swift.String? = nil, startPosition: Swift.String? = nil, status: Swift.String? = nil, toDate: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIFolderItemsResponse>
  @objc open class func foldersGetFolders(accountId: Swift.String, include: Swift.String? = nil, includeItems: Swift.String? = nil, startPosition: Swift.String? = nil, template: Swift.String? = nil, userFilter: Swift.String? = nil, subFolderDepth: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIFoldersResponse?, _ error: Swift.Error?) -> Swift.Void))
  open class func foldersGetFoldersWithRequestBuilder(accountId: Swift.String, include: Swift.String? = nil, includeItems: Swift.String? = nil, startPosition: Swift.String? = nil, template: Swift.String? = nil, userFilter: Swift.String? = nil, subFolderDepth: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIFoldersResponse>
  open class func foldersPutFolderById(accountId: Swift.String, folderId: Swift.String, body: DocuSignAPI.DSAPIFoldersRequest? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIFoldersResponse?, _ error: Swift.Error?) -> Swift.Void))
  open class func foldersPutFolderByIdWithRequestBuilder(accountId: Swift.String, folderId: Swift.String, body: DocuSignAPI.DSAPIFoldersRequest? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIFoldersResponse>
  open class func searchFoldersGetSearchFolderContents(accountId: Swift.String, searchFolderId: Swift.String, all: Swift.String? = nil, count: Swift.String? = nil, fromDate: Swift.String? = nil, includeRecipients: Swift.String? = nil, order: Swift.String? = nil, orderBy: Swift.String? = nil, startPosition: Swift.String? = nil, toDate: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIFolderItemResponse?, _ error: Swift.Error?) -> Swift.Void))
  open class func searchFoldersGetSearchFolderContentsWithRequestBuilder(accountId: Swift.String, searchFolderId: Swift.String, all: Swift.String? = nil, count: Swift.String? = nil, fromDate: Swift.String? = nil, includeRecipients: Swift.String? = nil, order: Swift.String? = nil, orderBy: Swift.String? = nil, startPosition: Swift.String? = nil, toDate: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIFolderItemResponse>
  @objc override dynamic public init()
  @objc deinit
}
public struct DSAPIMemberSharedItems : Swift.Codable {
  public var envelopes: [DocuSignAPI.DSAPISharedItem]?
  public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  public var folders: [DocuSignAPI.DSAPIFolderSharedItem]?
  public var templates: [DocuSignAPI.DSAPITemplateSharedItem]?
  public var user: DocuSignAPI.DSAPIUserInfo?
  public init(envelopes: [DocuSignAPI.DSAPISharedItem]? = nil, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, folders: [DocuSignAPI.DSAPIFolderSharedItem]? = nil, templates: [DocuSignAPI.DSAPITemplateSharedItem]? = nil, user: DocuSignAPI.DSAPIUserInfo? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPINotaryJurisdictionList : Swift.Codable {
  public var endPosition: Swift.String?
  public var nextUri: Foundation.URL?
  public var notaryJurisdictions: [DocuSignAPI.DSAPINotaryJurisdiction]?
  public var previousUri: Foundation.URL?
  public var resultSetSize: Swift.String?
  public var startPosition: Swift.String?
  public var totalSetSize: Swift.String?
  public init(endPosition: Swift.String? = nil, nextUri: Foundation.URL? = nil, notaryJurisdictions: [DocuSignAPI.DSAPINotaryJurisdiction]? = nil, previousUri: Foundation.URL? = nil, resultSetSize: Swift.String? = nil, startPosition: Swift.String? = nil, totalSetSize: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @objcMembers public class DSAPIEnvelopeId : ObjectiveC.NSObject, Swift.Codable {
  @objc @DocuSignAPI.BoolFromString public var anchorAllowWhiteSpaceInCharacters: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorAllowWhiteSpaceInCharactersMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var anchorCaseSensitive: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorCaseSensitiveMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorHorizontalAlignment: Swift.String?
  @objc public var anchorHorizontalAlignmentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var anchorIgnoreIfNotPresent: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorIgnoreIfNotPresentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var anchorMatchWholeWord: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorMatchWholeWordMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorString: Swift.String?
  @objc public var anchorStringMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorTabProcessorVersion: Swift.String?
  @objc public var anchorTabProcessorVersionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorUnits: Swift.String?
  @objc public var anchorUnitsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorXOffset: Swift.String?
  @objc public var anchorXOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorYOffset: Swift.String?
  @objc public var anchorYOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var bold: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var boldMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var conditionalParentLabel: Swift.String?
  @objc public var conditionalParentLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var conditionalParentValue: Swift.String?
  @objc public var conditionalParentValueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var customTabId: Swift.String?
  @objc public var customTabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var documentId: Swift.String?
  @objc public var documentIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  @objc public var font: Swift.String?
  @objc public var fontColor: Swift.String?
  @objc public var fontColorMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var fontMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var fontSize: Swift.String?
  @objc public var fontSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var formOrder: Swift.String?
  @objc public var formOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var formPageLabel: Swift.String?
  @objc public var formPageLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var formPageNumber: Swift.String?
  @objc public var formPageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var height: Swift.String?
  @objc public var heightMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var italic: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var italicMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var localePolicy: DocuSignAPI.DSAPILocalePolicyTab?
  @objc public var mergeField: DocuSignAPI.DSAPIMergeField?
  @objc public var mergeFieldXml: Swift.String?
  @objc public var name: Swift.String?
  @objc public var nameMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var pageNumber: Swift.String?
  @objc public var pageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var recipientId: Swift.String?
  @objc public var recipientIdGuid: Swift.String?
  @objc public var recipientIdGuidMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var recipientIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var smartContractInformation: DocuSignAPI.DSAPISmartContractInformation?
  @objc public var source: Swift.String?
  @objc public var status: Swift.String?
  @objc public var statusMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabGroupLabels: [Swift.String]?
  @objc public var tabGroupLabelsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabId: Swift.String?
  @objc public var tabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabLabel: Swift.String?
  @objc public var tabLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabOrder: Swift.String?
  @objc public var tabOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabType: Swift.String?
  @objc public var tabTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var templateLocked: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var templateLockedMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var templateRequired: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var templateRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tooltip: Swift.String?
  @objc public var toolTipMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var underline: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var underlineMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var width: Swift.String?
  @objc public var widthMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var xPosition: Swift.String?
  @objc public var xPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var yPosition: Swift.String?
  @objc public var yPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public init(anchorAllowWhiteSpaceInCharacters: Swift.Bool = false, anchorAllowWhiteSpaceInCharactersMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorCaseSensitive: Swift.Bool = false, anchorCaseSensitiveMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorHorizontalAlignment: Swift.String? = nil, anchorHorizontalAlignmentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorIgnoreIfNotPresent: Swift.Bool = false, anchorIgnoreIfNotPresentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorMatchWholeWord: Swift.Bool = false, anchorMatchWholeWordMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorString: Swift.String? = nil, anchorStringMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorTabProcessorVersion: Swift.String? = nil, anchorTabProcessorVersionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorUnits: Swift.String? = nil, anchorUnitsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorXOffset: Swift.String? = nil, anchorXOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorYOffset: Swift.String? = nil, anchorYOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, bold: Swift.Bool = false, boldMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, conditionalParentLabel: Swift.String? = nil, conditionalParentLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, conditionalParentValue: Swift.String? = nil, conditionalParentValueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, customTabId: Swift.String? = nil, customTabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, documentId: Swift.String? = nil, documentIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, font: Swift.String? = nil, fontColor: Swift.String? = nil, fontColorMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, fontMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, fontSize: Swift.String? = nil, fontSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formOrder: Swift.String? = nil, formOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formPageLabel: Swift.String? = nil, formPageLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formPageNumber: Swift.String? = nil, formPageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, height: Swift.String? = nil, heightMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, italic: Swift.Bool = false, italicMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, localePolicy: DocuSignAPI.DSAPILocalePolicyTab? = nil, mergeField: DocuSignAPI.DSAPIMergeField? = nil, mergeFieldXml: Swift.String? = nil, name: Swift.String? = nil, nameMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, pageNumber: Swift.String? = nil, pageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, recipientId: Swift.String? = nil, recipientIdGuid: Swift.String? = nil, recipientIdGuidMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, recipientIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, smartContractInformation: DocuSignAPI.DSAPISmartContractInformation? = nil, source: Swift.String? = nil, status: Swift.String? = nil, statusMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabGroupLabels: [Swift.String]? = nil, tabGroupLabelsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabId: Swift.String? = nil, tabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabLabel: Swift.String? = nil, tabLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabOrder: Swift.String? = nil, tabOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabType: Swift.String? = nil, tabTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, templateLocked: Swift.Bool = false, templateLockedMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, templateRequired: Swift.Bool = false, templateRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tooltip: Swift.String? = nil, toolTipMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, underline: Swift.Bool = false, underlineMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, width: Swift.String? = nil, widthMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, xPosition: Swift.String? = nil, xPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, yPosition: Swift.String? = nil, yPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIRecipientNamesResponse : Swift.Codable {
  @DocuSignAPI.BoolFromString public var multipleUsers: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var recipientNames: [Swift.String]?
  @DocuSignAPI.BoolFromString public var reservedRecipientEmail: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public init(multipleUsers: Swift.Bool = false, recipientNames: [Swift.String]? = nil, reservedRecipientEmail: Swift.Bool = false)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPITemplateTabs : Swift.Codable {
  public var approveTabs: [DocuSignAPI.DSAPIApprove]?
  public var checkboxTabs: [DocuSignAPI.DSAPICheckbox]?
  public var commentThreadTabs: [DocuSignAPI.DSAPICommentThread]?
  public var commissionCountyTabs: [DocuSignAPI.DSAPICommissionCounty]?
  public var commissionExpirationTabs: [DocuSignAPI.DSAPICommissionExpiration]?
  public var commissionNumberTabs: [DocuSignAPI.DSAPICommissionNumber]?
  public var commissionStateTabs: [DocuSignAPI.DSAPICommissionState]?
  public var companyTabs: [DocuSignAPI.DSAPICompany]?
  public var currencyTabs: [DocuSignAPI.DSAPICurrency]?
  public var dateSignedTabs: [DocuSignAPI.DSAPIDateSigned]?
  public var dateTabs: [Foundation.Date]?
  public var declineTabs: [DocuSignAPI.DSAPIDecline]?
  public var drawTabs: [DocuSignAPI.DSAPIDraw]?
  public var emailAddressTabs: [DocuSignAPI.DSAPIEmailAddress]?
  public var emailTabs: [DocuSignAPI.DSAPIEmail]?
  public var envelopeIdTabs: [DocuSignAPI.DSAPIEnvelopeId]?
  public var firstNameTabs: [DocuSignAPI.DSAPIFirstName]?
  public var formulaTabs: [DocuSignAPI.DSAPIFormulaTab]?
  public var fullNameTabs: [DocuSignAPI.DSAPIFullName]?
  public var initialHereTabs: [DocuSignAPI.DSAPIInitialHere]?
  public var lastNameTabs: [DocuSignAPI.DSAPILastName]?
  public var listTabs: [DocuSignAPI.DSAPIList]?
  public var notarizeTabs: [DocuSignAPI.DSAPINotarize]?
  public var notarySealTabs: [DocuSignAPI.DSAPINotarySeal]?
  public var noteTabs: [DocuSignAPI.DSAPINote]?
  public var numberTabs: [Swift.Double]?
  public var phoneNumberTabs: [DocuSignAPI.DSAPIPhoneNumber]?
  public var polyLineOverlayTabs: [DocuSignAPI.DSAPIPolyLineOverlay]?
  public var prefillTabs: DocuSignAPI.DSAPIPrefillTabs?
  public var radioGroupTabs: [DocuSignAPI.DSAPIRadioGroup]?
  public var signerAttachmentTabs: [DocuSignAPI.DSAPISignerAttachment]?
  public var signHereTabs: [DocuSignAPI.DSAPISignHere]?
  public var smartSectionTabs: [DocuSignAPI.DSAPISmartSection]?
  public var ssnTabs: [DocuSignAPI.DSAPISsn]?
  public var tabGroups: [DocuSignAPI.DSAPITabGroup]?
  public var textTabs: [DocuSignAPI.DSAPIText]?
  public var titleTabs: [DocuSignAPI.DSAPITitle]?
  public var viewTabs: [DocuSignAPI.DSAPIView]?
  public var zipTabs: [DocuSignAPI.DSAPIZip]?
  public init(approveTabs: [DocuSignAPI.DSAPIApprove]? = nil, checkboxTabs: [DocuSignAPI.DSAPICheckbox]? = nil, commentThreadTabs: [DocuSignAPI.DSAPICommentThread]? = nil, commissionCountyTabs: [DocuSignAPI.DSAPICommissionCounty]? = nil, commissionExpirationTabs: [DocuSignAPI.DSAPICommissionExpiration]? = nil, commissionNumberTabs: [DocuSignAPI.DSAPICommissionNumber]? = nil, commissionStateTabs: [DocuSignAPI.DSAPICommissionState]? = nil, companyTabs: [DocuSignAPI.DSAPICompany]? = nil, currencyTabs: [DocuSignAPI.DSAPICurrency]? = nil, dateSignedTabs: [DocuSignAPI.DSAPIDateSigned]? = nil, dateTabs: [Foundation.Date]? = nil, declineTabs: [DocuSignAPI.DSAPIDecline]? = nil, drawTabs: [DocuSignAPI.DSAPIDraw]? = nil, emailAddressTabs: [DocuSignAPI.DSAPIEmailAddress]? = nil, emailTabs: [DocuSignAPI.DSAPIEmail]? = nil, envelopeIdTabs: [DocuSignAPI.DSAPIEnvelopeId]? = nil, firstNameTabs: [DocuSignAPI.DSAPIFirstName]? = nil, formulaTabs: [DocuSignAPI.DSAPIFormulaTab]? = nil, fullNameTabs: [DocuSignAPI.DSAPIFullName]? = nil, initialHereTabs: [DocuSignAPI.DSAPIInitialHere]? = nil, lastNameTabs: [DocuSignAPI.DSAPILastName]? = nil, listTabs: [DocuSignAPI.DSAPIList]? = nil, notarizeTabs: [DocuSignAPI.DSAPINotarize]? = nil, notarySealTabs: [DocuSignAPI.DSAPINotarySeal]? = nil, noteTabs: [DocuSignAPI.DSAPINote]? = nil, numberTabs: [Swift.Double]? = nil, phoneNumberTabs: [DocuSignAPI.DSAPIPhoneNumber]? = nil, polyLineOverlayTabs: [DocuSignAPI.DSAPIPolyLineOverlay]? = nil, prefillTabs: DocuSignAPI.DSAPIPrefillTabs? = nil, radioGroupTabs: [DocuSignAPI.DSAPIRadioGroup]? = nil, signerAttachmentTabs: [DocuSignAPI.DSAPISignerAttachment]? = nil, signHereTabs: [DocuSignAPI.DSAPISignHere]? = nil, smartSectionTabs: [DocuSignAPI.DSAPISmartSection]? = nil, ssnTabs: [DocuSignAPI.DSAPISsn]? = nil, tabGroups: [DocuSignAPI.DSAPITabGroup]? = nil, textTabs: [DocuSignAPI.DSAPIText]? = nil, titleTabs: [DocuSignAPI.DSAPITitle]? = nil, viewTabs: [DocuSignAPI.DSAPIView]? = nil, zipTabs: [DocuSignAPI.DSAPIZip]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIView : Swift.Codable {
  @DocuSignAPI.BoolFromString public var anchorAllowWhiteSpaceInCharacters: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var anchorAllowWhiteSpaceInCharactersMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var anchorCaseSensitive: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var anchorCaseSensitiveMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorHorizontalAlignment: Swift.String?
  public var anchorHorizontalAlignmentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var anchorIgnoreIfNotPresent: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var anchorIgnoreIfNotPresentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var anchorMatchWholeWord: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var anchorMatchWholeWordMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorString: Swift.String?
  public var anchorStringMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorTabProcessorVersion: Swift.String?
  public var anchorTabProcessorVersionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorUnits: Swift.String?
  public var anchorUnitsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorXOffset: Swift.String?
  public var anchorXOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorYOffset: Swift.String?
  public var anchorYOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var bold: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var boldMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var buttonText: Swift.String?
  public var buttonTextMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var conditionalParentLabel: Swift.String?
  public var conditionalParentLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var conditionalParentValue: Swift.String?
  public var conditionalParentValueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var customTabId: Swift.String?
  public var customTabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var documentId: Swift.String?
  public var documentIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  public var font: Swift.String?
  public var fontColor: Swift.String?
  public var fontColorMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var fontMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var fontSize: Swift.String?
  public var fontSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var formOrder: Swift.String?
  public var formOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var formPageLabel: Swift.String?
  public var formPageLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var formPageNumber: Swift.String?
  public var formPageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var height: Swift.String?
  public var heightMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var italic: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var italicMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var localePolicy: DocuSignAPI.DSAPILocalePolicyTab?
  public var mergeField: DocuSignAPI.DSAPIMergeField?
  public var mergeFieldXml: Swift.String?
  public var pageNumber: Swift.String?
  public var pageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var recipientId: Swift.String?
  public var recipientIdGuid: Swift.String?
  public var recipientIdGuidMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var recipientIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var required: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var requiredMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var requiredRead: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var smartContractInformation: DocuSignAPI.DSAPISmartContractInformation?
  public var source: Swift.String?
  public var status: Swift.String?
  public var statusMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var tabGroupLabels: [Swift.String]?
  public var tabGroupLabelsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var tabId: Swift.String?
  public var tabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var tabLabel: Swift.String?
  public var tabLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var tabOrder: Swift.String?
  public var tabOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var tabType: Swift.String?
  public var tabTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var templateLocked: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var templateLockedMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var templateRequired: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var templateRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var tooltip: Swift.String?
  public var toolTipMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var underline: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var underlineMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var width: Swift.String?
  public var widthMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var xPosition: Swift.String?
  public var xPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var yPosition: Swift.String?
  public var yPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public init(anchorAllowWhiteSpaceInCharacters: Swift.Bool = false, anchorAllowWhiteSpaceInCharactersMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorCaseSensitive: Swift.Bool = false, anchorCaseSensitiveMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorHorizontalAlignment: Swift.String? = nil, anchorHorizontalAlignmentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorIgnoreIfNotPresent: Swift.Bool = false, anchorIgnoreIfNotPresentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorMatchWholeWord: Swift.Bool = false, anchorMatchWholeWordMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorString: Swift.String? = nil, anchorStringMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorTabProcessorVersion: Swift.String? = nil, anchorTabProcessorVersionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorUnits: Swift.String? = nil, anchorUnitsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorXOffset: Swift.String? = nil, anchorXOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorYOffset: Swift.String? = nil, anchorYOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, bold: Swift.Bool = false, boldMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, buttonText: Swift.String? = nil, buttonTextMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, conditionalParentLabel: Swift.String? = nil, conditionalParentLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, conditionalParentValue: Swift.String? = nil, conditionalParentValueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, customTabId: Swift.String? = nil, customTabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, documentId: Swift.String? = nil, documentIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, font: Swift.String? = nil, fontColor: Swift.String? = nil, fontColorMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, fontMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, fontSize: Swift.String? = nil, fontSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formOrder: Swift.String? = nil, formOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formPageLabel: Swift.String? = nil, formPageLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formPageNumber: Swift.String? = nil, formPageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, height: Swift.String? = nil, heightMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, italic: Swift.Bool = false, italicMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, localePolicy: DocuSignAPI.DSAPILocalePolicyTab? = nil, mergeField: DocuSignAPI.DSAPIMergeField? = nil, mergeFieldXml: Swift.String? = nil, pageNumber: Swift.String? = nil, pageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, recipientId: Swift.String? = nil, recipientIdGuid: Swift.String? = nil, recipientIdGuidMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, recipientIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, required: Swift.Bool = false, requiredMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, requiredRead: Swift.Bool = false, smartContractInformation: DocuSignAPI.DSAPISmartContractInformation? = nil, source: Swift.String? = nil, status: Swift.String? = nil, statusMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabGroupLabels: [Swift.String]? = nil, tabGroupLabelsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabId: Swift.String? = nil, tabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabLabel: Swift.String? = nil, tabLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabOrder: Swift.String? = nil, tabOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabType: Swift.String? = nil, tabTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, templateLocked: Swift.Bool = false, templateLockedMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, templateRequired: Swift.Bool = false, templateRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tooltip: Swift.String? = nil, toolTipMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, underline: Swift.Bool = false, underlineMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, width: Swift.String? = nil, widthMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, xPosition: Swift.String? = nil, xPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, yPosition: Swift.String? = nil, yPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIBulkProcessRequest : Swift.Codable {
  public var batchName: Swift.String?
  public var envelopeOrTemplateId: Swift.String?
  public init(batchName: Swift.String? = nil, envelopeOrTemplateId: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIRecipientIdentityPhoneNumber : Swift.Codable {
  public var countryCode: Swift.String?
  public var countryCodeLock: Swift.String?
  public var countryCodeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var _extension: Swift.String?
  public var extensionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var number: Swift.String?
  public var numberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public init(countryCode: Swift.String? = nil, countryCodeLock: Swift.String? = nil, countryCodeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, _extension: Swift.String? = nil, extensionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, number: Swift.String? = nil, numberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case countryCode
    case countryCodeLock
    case countryCodeMetadata
    case _extension
    case extensionMetadata
    case number
    case numberMetadata
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPICustomField : Swift.Codable {
  public var customFieldType: Swift.String?
  public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  public var fieldId: Swift.String?
  public var listItems: [Swift.String]?
  public var name: Swift.String?
  @DocuSignAPI.BoolFromString public var required: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  @DocuSignAPI.BoolFromString public var show: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var value: Swift.String?
  public init(customFieldType: Swift.String? = nil, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, fieldId: Swift.String? = nil, listItems: [Swift.String]? = nil, name: Swift.String? = nil, required: Swift.Bool = false, show: Swift.Bool = false, value: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIAccountRoleSettings : Swift.Codable {
  @DocuSignAPI.BoolFromString public var allowAccountManagement: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var allowAccountManagementMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @DocuSignAPI.BoolFromString public var allowApiAccess: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var allowApiAccessMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @DocuSignAPI.BoolFromString public var allowApiAccessToAccount: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var allowApiAccessToAccountMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @DocuSignAPI.BoolFromString public var allowApiSendingOnBehalfOfOthers: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var allowApiSendingOnBehalfOfOthersMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @DocuSignAPI.BoolFromString public var allowApiSequentialSigning: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var allowApiSequentialSigningMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @DocuSignAPI.BoolFromString public var allowAutoTagging: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var allowAutoTaggingMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @DocuSignAPI.BoolFromString public var allowBulkSending: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var allowBulkSendingMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @DocuSignAPI.BoolFromString public var allowDocuSignDesktopClient: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var allowDocuSignDesktopClientMetadata: DocuSignAPI.DSAPISettingsMetadata?
  public var allowedAddressBookAccess: Swift.String?
  public var allowedAddressBookAccessMetadata: DocuSignAPI.DSAPISettingsMetadata?
  public var allowedClickwrapsAccess: Swift.String?
  public var allowedClickwrapsAccessMetadata: DocuSignAPI.DSAPISettingsMetadata?
  public var allowedTemplateAccess: Swift.String?
  public var allowedTemplateAccessMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @DocuSignAPI.BoolFromString public var allowedToBeEnvelopeTransferRecipient: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var allowedToBeEnvelopeTransferRecipientMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @DocuSignAPI.BoolFromString public var allowEnvelopeSending: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var allowEnvelopeSendingMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @DocuSignAPI.BoolFromString public var allowESealRecipients: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var allowESealRecipientsMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @DocuSignAPI.BoolFromString public var allowPowerFormsAdminToAccessAllPowerFormEnvelopes: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var allowPowerFormsAdminToAccessAllPowerFormEnvelopesMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @DocuSignAPI.BoolFromString public var allowSendersToSetRecipientEmailLanguage: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var allowSendersToSetRecipientEmailLanguageMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @DocuSignAPI.BoolFromString public var allowSignerAttachments: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var allowSignerAttachmentsMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @DocuSignAPI.BoolFromString public var allowSupplementalDocuments: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var allowSupplementalDocumentsMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @DocuSignAPI.BoolFromString public var allowTaggingInSendAndCorrect: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var allowTaggingInSendAndCorrectMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @DocuSignAPI.BoolFromString public var allowVaulting: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var allowVaultingMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @DocuSignAPI.BoolFromString public var allowWetSigningOverride: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var allowWetSigningOverrideMetadata: DocuSignAPI.DSAPISettingsMetadata?
  public var canCreateWorkspaces: Swift.String?
  public var canCreateWorkspacesMetadata: DocuSignAPI.DSAPISettingsMetadata?
  public var canSendEnvelopesViaSMS: Swift.String?
  public var canSendEnvelopesViaSMSMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @DocuSignAPI.BoolFromString public var disableDocumentUpload: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var disableDocumentUploadMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @DocuSignAPI.BoolFromString public var disableOtherActions: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var disableOtherActionsMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @DocuSignAPI.BoolFromString public var enableApiRequestLogging: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var enableApiRequestLoggingMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @DocuSignAPI.BoolFromString public var enableRecipientViewingNotifications: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var enableRecipientViewingNotificationsMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @DocuSignAPI.BoolFromString public var enableSequentialSigningInterface: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var enableSequentialSigningInterfaceMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @DocuSignAPI.BoolFromString public var enableTransactionPointIntegration: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var enableTransactionPointIntegrationMetadata: DocuSignAPI.DSAPISettingsMetadata?
  public var powerFormRole: Swift.String?
  public var powerFormRoleMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @DocuSignAPI.BoolFromString public var receiveCompletedSelfSignedDocumentsAsEmailLinks: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var receiveCompletedSelfSignedDocumentsAsEmailLinksMetadata: DocuSignAPI.DSAPISettingsMetadata?
  public var signingUiVersionMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @DocuSignAPI.BoolFromString public var supplementalDocumentsMustAccept: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var supplementalDocumentsMustAcceptMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @DocuSignAPI.BoolFromString public var supplementalDocumentsMustRead: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var supplementalDocumentsMustReadMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @DocuSignAPI.BoolFromString public var supplementalDocumentsMustView: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var supplementalDocumentsMustViewMetadata: DocuSignAPI.DSAPISettingsMetadata?
  public var useNewDocuSignExperienceInterface: Swift.String?
  public var useNewDocuSignExperienceInterfaceMetadata: DocuSignAPI.DSAPISettingsMetadata?
  public var useNewSendingInterface: Swift.String?
  public var useNewSendingInterfaceMetadata: DocuSignAPI.DSAPISettingsMetadata?
  public var vaultingMode: Swift.String?
  public var vaultingModeMetadata: DocuSignAPI.DSAPISettingsMetadata?
  public init(allowAccountManagement: Swift.Bool = false, allowAccountManagementMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowApiAccess: Swift.Bool = false, allowApiAccessMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowApiAccessToAccount: Swift.Bool = false, allowApiAccessToAccountMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowApiSendingOnBehalfOfOthers: Swift.Bool = false, allowApiSendingOnBehalfOfOthersMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowApiSequentialSigning: Swift.Bool = false, allowApiSequentialSigningMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowAutoTagging: Swift.Bool = false, allowAutoTaggingMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowBulkSending: Swift.Bool = false, allowBulkSendingMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowDocuSignDesktopClient: Swift.Bool = false, allowDocuSignDesktopClientMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowedAddressBookAccess: Swift.String? = nil, allowedAddressBookAccessMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowedClickwrapsAccess: Swift.String? = nil, allowedClickwrapsAccessMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowedTemplateAccess: Swift.String? = nil, allowedTemplateAccessMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowedToBeEnvelopeTransferRecipient: Swift.Bool = false, allowedToBeEnvelopeTransferRecipientMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowEnvelopeSending: Swift.Bool = false, allowEnvelopeSendingMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowESealRecipients: Swift.Bool = false, allowESealRecipientsMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowPowerFormsAdminToAccessAllPowerFormEnvelopes: Swift.Bool = false, allowPowerFormsAdminToAccessAllPowerFormEnvelopesMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowSendersToSetRecipientEmailLanguage: Swift.Bool = false, allowSendersToSetRecipientEmailLanguageMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowSignerAttachments: Swift.Bool = false, allowSignerAttachmentsMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowSupplementalDocuments: Swift.Bool = false, allowSupplementalDocumentsMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowTaggingInSendAndCorrect: Swift.Bool = false, allowTaggingInSendAndCorrectMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowVaulting: Swift.Bool = false, allowVaultingMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowWetSigningOverride: Swift.Bool = false, allowWetSigningOverrideMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, canCreateWorkspaces: Swift.String? = nil, canCreateWorkspacesMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, canSendEnvelopesViaSMS: Swift.String? = nil, canSendEnvelopesViaSMSMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, disableDocumentUpload: Swift.Bool = false, disableDocumentUploadMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, disableOtherActions: Swift.Bool = false, disableOtherActionsMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, enableApiRequestLogging: Swift.Bool = false, enableApiRequestLoggingMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, enableRecipientViewingNotifications: Swift.Bool = false, enableRecipientViewingNotificationsMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, enableSequentialSigningInterface: Swift.Bool = false, enableSequentialSigningInterfaceMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, enableTransactionPointIntegration: Swift.Bool = false, enableTransactionPointIntegrationMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, powerFormRole: Swift.String? = nil, powerFormRoleMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, receiveCompletedSelfSignedDocumentsAsEmailLinks: Swift.Bool = false, receiveCompletedSelfSignedDocumentsAsEmailLinksMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, signingUiVersionMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, supplementalDocumentsMustAccept: Swift.Bool = false, supplementalDocumentsMustAcceptMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, supplementalDocumentsMustRead: Swift.Bool = false, supplementalDocumentsMustReadMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, supplementalDocumentsMustView: Swift.Bool = false, supplementalDocumentsMustViewMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, useNewDocuSignExperienceInterface: Swift.String? = nil, useNewDocuSignExperienceInterfaceMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, useNewSendingInterface: Swift.String? = nil, useNewSendingInterfaceMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, vaultingMode: Swift.String? = nil, vaultingModeMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIComment : Swift.Codable {
  public var envelopeId: Swift.String?
  public var hmac: Swift.String?
  public var _id: Swift.String?
  public var mentions: [Swift.String]?
  public var read: Swift.Bool
  public var sentByEmail: Swift.String?
  public var sentByFullName: Swift.String?
  public var sentByImageId: Swift.String?
  public var sentByInitials: Swift.String?
  public var sentByRecipientId: Swift.String?
  public var sentByUserId: Swift.String?
  public var signingGroupId: Swift.String?
  public var signingGroupName: Swift.String?
  public var subject: Swift.String?
  public var tabId: Swift.String?
  public var text: Swift.String?
  public var threadId: Swift.String?
  public var threadOriginatorId: Swift.String?
  public var timestamp: Swift.String?
  public var timeStampFormatted: Swift.String?
  public var visibleTo: [Swift.String]?
  public init(envelopeId: Swift.String? = nil, hmac: Swift.String? = nil, _id: Swift.String? = nil, mentions: [Swift.String]? = nil, read: Swift.Bool = false, sentByEmail: Swift.String? = nil, sentByFullName: Swift.String? = nil, sentByImageId: Swift.String? = nil, sentByInitials: Swift.String? = nil, sentByRecipientId: Swift.String? = nil, sentByUserId: Swift.String? = nil, signingGroupId: Swift.String? = nil, signingGroupName: Swift.String? = nil, subject: Swift.String? = nil, tabId: Swift.String? = nil, text: Swift.String? = nil, threadId: Swift.String? = nil, threadOriginatorId: Swift.String? = nil, timestamp: Swift.String? = nil, timeStampFormatted: Swift.String? = nil, visibleTo: [Swift.String]? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case envelopeId
    case hmac
    case _id
    case mentions
    case read
    case sentByEmail
    case sentByFullName
    case sentByImageId
    case sentByInitials
    case sentByRecipientId
    case sentByUserId
    case signingGroupId
    case signingGroupName
    case subject
    case tabId
    case text
    case threadId
    case threadOriginatorId
    case timestamp
    case timeStampFormatted
    case visibleTo
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @objcMembers public class DSAPIPage : ObjectiveC.NSObject, Swift.Codable {
  @objc public var dpi: Swift.String?
  @objc public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  @objc public var height: Swift.String?
  @objc public var imageBytes: Swift.String?
  @objc public var mimeType: Swift.String?
  @objc public var pageId: Swift.String?
  @objc public var sequence: Swift.String?
  @objc public var width: Swift.String?
  @objc public init(dpi: Swift.String? = nil, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, height: Swift.String? = nil, imageBytes: Swift.String? = nil, mimeType: Swift.String? = nil, pageId: Swift.String? = nil, sequence: Swift.String? = nil, width: Swift.String? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIPowerFormFormDataEnvelope : Swift.Codable {
  public var envelopeId: Swift.String?
  public var recipients: [DocuSignAPI.DSAPIPowerFormFormDataRecipient]?
  public init(envelopeId: Swift.String? = nil, recipients: [DocuSignAPI.DSAPIPowerFormFormDataRecipient]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @objcMembers public class DSAPITabs : ObjectiveC.NSObject, Swift.Codable {
  @objc public var approveTabs: [DocuSignAPI.DSAPIApprove]?
  @objc public var checkboxTabs: [DocuSignAPI.DSAPICheckbox]?
  public var commentThreadTabs: [DocuSignAPI.DSAPICommentThread]?
  public var commissionCountyTabs: [DocuSignAPI.DSAPICommissionCounty]?
  public var commissionExpirationTabs: [DocuSignAPI.DSAPICommissionExpiration]?
  public var commissionNumberTabs: [DocuSignAPI.DSAPICommissionNumber]?
  public var commissionStateTabs: [DocuSignAPI.DSAPICommissionState]?
  @objc public var companyTabs: [DocuSignAPI.DSAPICompany]?
  public var currencyTabs: [DocuSignAPI.DSAPICurrency]?
  @objc public var dateSignedTabs: [DocuSignAPI.DSAPIDateSigned]?
  @objc public var dateTabs: [DocuSignAPI.DSAPIDate]?
  @objc public var declineTabs: [DocuSignAPI.DSAPIDecline]?
  public var drawTabs: [DocuSignAPI.DSAPIDraw]?
  @objc public var emailAddressTabs: [DocuSignAPI.DSAPIEmailAddress]?
  @objc public var emailTabs: [DocuSignAPI.DSAPIEmail]?
  @objc public var envelopeIdTabs: [DocuSignAPI.DSAPIEnvelopeId]?
  @objc public var firstNameTabs: [DocuSignAPI.DSAPIFirstName]?
  @objc public var formulaTabs: [DocuSignAPI.DSAPIFormulaTab]?
  @objc public var fullNameTabs: [DocuSignAPI.DSAPIFullName]?
  @objc public var initialHereTabs: [DocuSignAPI.DSAPIInitialHere]?
  @objc public var lastNameTabs: [DocuSignAPI.DSAPILastName]?
  @objc public var listTabs: [DocuSignAPI.DSAPIList]?
  public var notarizeTabs: [DocuSignAPI.DSAPINotarize]?
  public var notarySealTabs: [DocuSignAPI.DSAPINotarySeal]?
  @objc public var noteTabs: [DocuSignAPI.DSAPINote]?
  @objc public var numberTabs: [DocuSignAPI.DSAPINumber]?
  public var phoneNumberTabs: [DocuSignAPI.DSAPIPhoneNumber]?
  public var polyLineOverlayTabs: [DocuSignAPI.DSAPIPolyLineOverlay]?
  public var prefillTabs: DocuSignAPI.DSAPIPrefillTabs?
  @objc public var radioGroupTabs: [DocuSignAPI.DSAPIRadioGroup]?
  @objc public var signerAttachmentTabs: [DocuSignAPI.DSAPISignerAttachment]?
  @objc public var signHereTabs: [DocuSignAPI.DSAPISignHere]?
  public var smartSectionTabs: [DocuSignAPI.DSAPISmartSection]?
  @objc public var ssnTabs: [DocuSignAPI.DSAPISsn]?
  @objc public var tabGroups: [DocuSignAPI.DSAPITabGroup]?
  @objc public var textTabs: [DocuSignAPI.DSAPIText]?
  @objc public var titleTabs: [DocuSignAPI.DSAPITitle]?
  public var viewTabs: [DocuSignAPI.DSAPIView]?
  @objc public var zipTabs: [DocuSignAPI.DSAPIZip]?
  @objc override dynamic public init()
  public init(approveTabs: [DocuSignAPI.DSAPIApprove]? = nil, checkboxTabs: [DocuSignAPI.DSAPICheckbox]? = nil, commentThreadTabs: [DocuSignAPI.DSAPICommentThread]? = nil, commissionCountyTabs: [DocuSignAPI.DSAPICommissionCounty]? = nil, commissionExpirationTabs: [DocuSignAPI.DSAPICommissionExpiration]? = nil, commissionNumberTabs: [DocuSignAPI.DSAPICommissionNumber]? = nil, commissionStateTabs: [DocuSignAPI.DSAPICommissionState]? = nil, companyTabs: [DocuSignAPI.DSAPICompany]? = nil, currencyTabs: [DocuSignAPI.DSAPICurrency]? = nil, dateSignedTabs: [DocuSignAPI.DSAPIDateSigned]? = nil, dateTabs: [DocuSignAPI.DSAPIDate]? = nil, declineTabs: [DocuSignAPI.DSAPIDecline]? = nil, drawTabs: [DocuSignAPI.DSAPIDraw]? = nil, emailAddressTabs: [DocuSignAPI.DSAPIEmailAddress]? = nil, emailTabs: [DocuSignAPI.DSAPIEmail]? = nil, envelopeIdTabs: [DocuSignAPI.DSAPIEnvelopeId]? = nil, firstNameTabs: [DocuSignAPI.DSAPIFirstName]? = nil, formulaTabs: [DocuSignAPI.DSAPIFormulaTab]? = nil, fullNameTabs: [DocuSignAPI.DSAPIFullName]? = nil, initialHereTabs: [DocuSignAPI.DSAPIInitialHere]? = nil, lastNameTabs: [DocuSignAPI.DSAPILastName]? = nil, listTabs: [DocuSignAPI.DSAPIList]? = nil, notarizeTabs: [DocuSignAPI.DSAPINotarize]? = nil, notarySealTabs: [DocuSignAPI.DSAPINotarySeal]? = nil, noteTabs: [DocuSignAPI.DSAPINote]? = nil, numberTabs: [DocuSignAPI.DSAPINumber]? = nil, phoneNumberTabs: [DocuSignAPI.DSAPIPhoneNumber]? = nil, polyLineOverlayTabs: [DocuSignAPI.DSAPIPolyLineOverlay]? = nil, prefillTabs: DocuSignAPI.DSAPIPrefillTabs? = nil, radioGroupTabs: [DocuSignAPI.DSAPIRadioGroup]? = nil, signerAttachmentTabs: [DocuSignAPI.DSAPISignerAttachment]? = nil, signHereTabs: [DocuSignAPI.DSAPISignHere]? = nil, smartSectionTabs: [DocuSignAPI.DSAPISmartSection]? = nil, ssnTabs: [DocuSignAPI.DSAPISsn]? = nil, tabGroups: [DocuSignAPI.DSAPITabGroup]? = nil, textTabs: [DocuSignAPI.DSAPIText]? = nil, titleTabs: [DocuSignAPI.DSAPITitle]? = nil, viewTabs: [DocuSignAPI.DSAPIView]? = nil, zipTabs: [DocuSignAPI.DSAPIZip]? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIEnvelopeIdsRequest : Swift.Codable {
  public var envelopeIds: [Swift.String]?
  public var transactionIds: [Swift.String]?
  public init(envelopeIds: [Swift.String]? = nil, transactionIds: [Swift.String]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIConnectLogs : Swift.Codable {
  public var failures: [DocuSignAPI.DSAPIConnectLog]?
  public var logs: [DocuSignAPI.DSAPIConnectLog]?
  public var totalRecords: Swift.String?
  public var type: Swift.String?
  public init(failures: [DocuSignAPI.DSAPIConnectLog]? = nil, logs: [DocuSignAPI.DSAPIConnectLog]? = nil, totalRecords: Swift.String? = nil, type: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIChunkedUploadRequest : Swift.Codable {
  public var chunkedUploadId: Swift.String?
  public var data: Swift.String?
  public init(chunkedUploadId: Swift.String? = nil, data: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIAccountSignature : Swift.Codable {
  public var adoptedDateTime: Foundation.Date?
  public var createdDateTime: Foundation.Date?
  public var customField: Swift.String?
  public var dateStampProperties: DocuSignAPI.DSAPIDateStampProperties?
  @DocuSignAPI.BoolFromString public var disallowUserResizeStamp: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  public var externalID: Swift.String?
  public var imageBase64: Swift.String?
  public var imageType: Swift.String?
  public var initials150ImageId: Swift.String?
  public var initialsImageUri: Foundation.URL?
  @DocuSignAPI.BoolFromString public var isDefault: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var lastModifiedDateTime: Foundation.Date?
  public var nrdsId: Swift.String?
  public var nrdsLastName: Swift.String?
  public var nrdsStatus: Swift.String?
  public var phoneticName: Swift.String?
  public var signature150ImageId: Swift.String?
  public var signatureFont: Swift.String?
  public var signatureGroups: [DocuSignAPI.DSAPISignatureGroup]?
  public var signatureId: Swift.String?
  public var signatureImageUri: Foundation.URL?
  public var signatureInitials: Swift.String?
  public var signatureName: Swift.String?
  public var signatureRights: Swift.String?
  public var signatureType: Swift.String?
  public var signatureUsers: [DocuSignAPI.DSAPISignatureUser]?
  public var stampFormat: Swift.String?
  public var stampImageUri: Swift.String?
  public var stampSizeMM: Swift.String?
  public var stampType: Swift.String?
  public var status: Swift.String?
  public init(adoptedDateTime: Foundation.Date? = nil, createdDateTime: Foundation.Date? = nil, customField: Swift.String? = nil, dateStampProperties: DocuSignAPI.DSAPIDateStampProperties? = nil, disallowUserResizeStamp: Swift.Bool = false, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, externalID: Swift.String? = nil, imageBase64: Swift.String? = nil, imageType: Swift.String? = nil, initials150ImageId: Swift.String? = nil, initialsImageUri: Foundation.URL? = nil, isDefault: Swift.Bool = false, lastModifiedDateTime: Foundation.Date? = nil, nrdsId: Swift.String? = nil, nrdsLastName: Swift.String? = nil, nrdsStatus: Swift.String? = nil, phoneticName: Swift.String? = nil, signature150ImageId: Swift.String? = nil, signatureFont: Swift.String? = nil, signatureGroups: [DocuSignAPI.DSAPISignatureGroup]? = nil, signatureId: Swift.String? = nil, signatureImageUri: Foundation.URL? = nil, signatureInitials: Swift.String? = nil, signatureName: Swift.String? = nil, signatureRights: Swift.String? = nil, signatureType: Swift.String? = nil, signatureUsers: [DocuSignAPI.DSAPISignatureUser]? = nil, stampFormat: Swift.String? = nil, stampImageUri: Swift.String? = nil, stampSizeMM: Swift.String? = nil, stampType: Swift.String? = nil, status: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPICommentThread : Swift.Codable {
  @DocuSignAPI.BoolFromString public var anchorAllowWhiteSpaceInCharacters: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var anchorAllowWhiteSpaceInCharactersMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var anchorCaseSensitive: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var anchorCaseSensitiveMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorHorizontalAlignment: Swift.String?
  public var anchorHorizontalAlignmentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var anchorIgnoreIfNotPresent: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var anchorIgnoreIfNotPresentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var anchorMatchWholeWord: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var anchorMatchWholeWordMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorString: Swift.String?
  public var anchorStringMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorTabProcessorVersion: Swift.String?
  public var anchorTabProcessorVersionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorUnits: Swift.String?
  public var anchorUnitsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorXOffset: Swift.String?
  public var anchorXOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorYOffset: Swift.String?
  public var anchorYOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var bold: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var boldMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var comments: [DocuSignAPI.DSAPIComment]?
  public var conditionalParentLabel: Swift.String?
  public var conditionalParentLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var conditionalParentValue: Swift.String?
  public var conditionalParentValueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var customTabId: Swift.String?
  public var customTabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var documentId: Swift.String?
  public var documentIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  public var font: Swift.String?
  public var fontColor: Swift.String?
  public var fontColorMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var fontMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var fontSize: Swift.String?
  public var fontSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var formOrder: Swift.String?
  public var formOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var formPageLabel: Swift.String?
  public var formPageLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var formPageNumber: Swift.String?
  public var formPageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var height: Swift.String?
  public var heightMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var italic: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var italicMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var localePolicy: DocuSignAPI.DSAPILocalePolicyTab?
  public var mergeField: DocuSignAPI.DSAPIMergeField?
  public var mergeFieldXml: Swift.String?
  public var pageNumber: Swift.String?
  public var pageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var recipientId: Swift.String?
  public var recipientIdGuid: Swift.String?
  public var recipientIdGuidMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var recipientIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var smartContractInformation: DocuSignAPI.DSAPISmartContractInformation?
  public var source: Swift.String?
  public var status: Swift.String?
  public var statusMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var tabGroupLabels: [Swift.String]?
  public var tabGroupLabelsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var tabId: Swift.String?
  public var tabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var tabLabel: Swift.String?
  public var tabLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var tabOrder: Swift.String?
  public var tabOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var tabType: Swift.String?
  public var tabTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var templateLocked: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var templateLockedMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var templateRequired: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var templateRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var threadId: Swift.String?
  public var tooltip: Swift.String?
  public var toolTipMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var underline: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var underlineMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var width: Swift.String?
  public var widthMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var xPosition: Swift.String?
  public var xPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var yPosition: Swift.String?
  public var yPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public init(anchorAllowWhiteSpaceInCharacters: Swift.Bool = false, anchorAllowWhiteSpaceInCharactersMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorCaseSensitive: Swift.Bool = false, anchorCaseSensitiveMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorHorizontalAlignment: Swift.String? = nil, anchorHorizontalAlignmentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorIgnoreIfNotPresent: Swift.Bool = false, anchorIgnoreIfNotPresentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorMatchWholeWord: Swift.Bool = false, anchorMatchWholeWordMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorString: Swift.String? = nil, anchorStringMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorTabProcessorVersion: Swift.String? = nil, anchorTabProcessorVersionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorUnits: Swift.String? = nil, anchorUnitsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorXOffset: Swift.String? = nil, anchorXOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorYOffset: Swift.String? = nil, anchorYOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, bold: Swift.Bool = false, boldMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, comments: [DocuSignAPI.DSAPIComment]? = nil, conditionalParentLabel: Swift.String? = nil, conditionalParentLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, conditionalParentValue: Swift.String? = nil, conditionalParentValueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, customTabId: Swift.String? = nil, customTabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, documentId: Swift.String? = nil, documentIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, font: Swift.String? = nil, fontColor: Swift.String? = nil, fontColorMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, fontMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, fontSize: Swift.String? = nil, fontSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formOrder: Swift.String? = nil, formOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formPageLabel: Swift.String? = nil, formPageLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formPageNumber: Swift.String? = nil, formPageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, height: Swift.String? = nil, heightMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, italic: Swift.Bool = false, italicMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, localePolicy: DocuSignAPI.DSAPILocalePolicyTab? = nil, mergeField: DocuSignAPI.DSAPIMergeField? = nil, mergeFieldXml: Swift.String? = nil, pageNumber: Swift.String? = nil, pageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, recipientId: Swift.String? = nil, recipientIdGuid: Swift.String? = nil, recipientIdGuidMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, recipientIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, smartContractInformation: DocuSignAPI.DSAPISmartContractInformation? = nil, source: Swift.String? = nil, status: Swift.String? = nil, statusMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabGroupLabels: [Swift.String]? = nil, tabGroupLabelsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabId: Swift.String? = nil, tabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabLabel: Swift.String? = nil, tabLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabOrder: Swift.String? = nil, tabOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabType: Swift.String? = nil, tabTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, templateLocked: Swift.Bool = false, templateLockedMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, templateRequired: Swift.Bool = false, templateRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, threadId: Swift.String? = nil, tooltip: Swift.String? = nil, toolTipMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, underline: Swift.Bool = false, underlineMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, width: Swift.String? = nil, widthMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, xPosition: Swift.String? = nil, xPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, yPosition: Swift.String? = nil, yPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIPurchasedEnvelopesInformation : Swift.Codable {
  public var amount: Swift.String?
  public var appName: Swift.String?
  public var currencyCode: Swift.String?
  public var platform: Swift.String?
  public var productId: Swift.String?
  public var quantity: Swift.String?
  public var receiptData: Swift.String?
  public var storeName: Swift.String?
  public var transactionId: Swift.String?
  public init(amount: Swift.String? = nil, appName: Swift.String? = nil, currencyCode: Swift.String? = nil, platform: Swift.String? = nil, productId: Swift.String? = nil, quantity: Swift.String? = nil, receiptData: Swift.String? = nil, storeName: Swift.String? = nil, transactionId: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @objcMembers public class DSAPITextCustomField : ObjectiveC.NSObject, Swift.Codable {
  @objc public var configurationType: Swift.String?
  @objc public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  @objc public var fieldId: Swift.String?
  @objc public var name: Swift.String?
  @objc @DocuSignAPI.BoolFromString public var required: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc @DocuSignAPI.BoolFromString public var show: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var value: Swift.String?
  @objc override dynamic public init()
  @objc public init(configurationType: Swift.String? = nil, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, fieldId: Swift.String? = nil, name: Swift.String? = nil, required: Swift.Bool = false, show: Swift.Bool = false, value: Swift.String? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct APIHelper {
  public static func rejectNil(_ source: [Swift.String : Any?]) -> [Swift.String : Any]?
  public static func rejectNilHeaders(_ source: [Swift.String : Any?]) -> [Swift.String : Swift.String]
  public static func convertBoolToString(_ source: [Swift.String : Any]?) -> DocuSignAPI.RequestBody?
  public static func mapValuesToQueryItems(_ source: [Swift.String : Any?]) -> [Foundation.URLQueryItem]?
}
public struct DSAPIBillingInvoicesResponse : Swift.Codable {
  public var billingInvoices: [DocuSignAPI.DSAPIBillingInvoice]?
  public var nextUri: Foundation.URL?
  public var previousUri: Foundation.URL?
  public init(billingInvoices: [DocuSignAPI.DSAPIBillingInvoice]? = nil, nextUri: Foundation.URL? = nil, previousUri: Foundation.URL? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIRecipientIdentityVerification : Swift.Codable {
  public var inputOptions: [DocuSignAPI.DSAPIRecipientIdentityInputOption]?
  public var workflowId: Swift.String?
  public var workflowIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public init(inputOptions: [DocuSignAPI.DSAPIRecipientIdentityInputOption]? = nil, workflowId: Swift.String? = nil, workflowIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPINotary : Swift.Codable {
  public var createdDate: Foundation.Date?
  public var enabled: Swift.String?
  @DocuSignAPI.BoolFromString public var searchable: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var userInfo: DocuSignAPI.DSAPIUserInformation?
  public init(createdDate: Foundation.Date? = nil, enabled: Swift.String? = nil, searchable: Swift.Bool = false, userInfo: DocuSignAPI.DSAPIUserInformation? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPICountry : Swift.Codable {
  public var isoCode: Swift.String?
  public var name: Swift.String?
  public var provinces: [DocuSignAPI.DSAPIProvince]?
  @DocuSignAPI.BoolFromString public var provinceValidated: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public init(isoCode: Swift.String? = nil, name: Swift.String? = nil, provinces: [DocuSignAPI.DSAPIProvince]? = nil, provinceValidated: Swift.Bool = false)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIUserProfile : Swift.Codable {
  public var address: DocuSignAPI.DSAPIAddressInformation?
  public var authenticationMethods: [DocuSignAPI.DSAPIAuthenticationMethod]?
  public var companyName: Swift.String?
  public var displayOrganizationInfo: Swift.String?
  @DocuSignAPI.BoolFromString public var displayPersonalInfo: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  @DocuSignAPI.BoolFromString public var displayProfile: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  @DocuSignAPI.BoolFromString public var displayUsageHistory: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var profileImageUri: Foundation.URL?
  public var title: Swift.String?
  public var usageHistory: DocuSignAPI.DSAPIUsageHistory?
  public var userDetails: DocuSignAPI.DSAPIUserInformation?
  public var userProfileLastModifiedDate: Foundation.Date?
  public init(address: DocuSignAPI.DSAPIAddressInformation? = nil, authenticationMethods: [DocuSignAPI.DSAPIAuthenticationMethod]? = nil, companyName: Swift.String? = nil, displayOrganizationInfo: Swift.String? = nil, displayPersonalInfo: Swift.Bool = false, displayProfile: Swift.Bool = false, displayUsageHistory: Swift.Bool = false, profileImageUri: Foundation.URL? = nil, title: Swift.String? = nil, usageHistory: DocuSignAPI.DSAPIUsageHistory? = nil, userDetails: DocuSignAPI.DSAPIUserInformation? = nil, userProfileLastModifiedDate: Foundation.Date? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class Response<T> {
  convenience public init(serviceResponse data: Foundation.Data?)
  @objc deinit
}
public struct DSAPINewAccountDefinition : Swift.Codable {
  public var accountName: Swift.String?
  public var accountSettings: DocuSignAPI.DSAPIAccountSettingsInformation?
  public var addressInformation: DocuSignAPI.DSAPIAccountAddress?
  public var creditCardInformation: DocuSignAPI.DSAPICreditCardInformation?
  public var directDebitProcessorInformation: DocuSignAPI.DSAPIDirectDebitProcessorInformation?
  public var distributorCode: Swift.String?
  public var distributorPassword: Swift.String?
  public var envelopePartitionId: Swift.String?
  public var initialUser: DocuSignAPI.DSAPIUserInformation?
  public var paymentMethod: Swift.String?
  public var paymentProcessorInformation: DocuSignAPI.DSAPIPaymentProcessorInformation?
  public var planInformation: DocuSignAPI.DSAPIPlanInformation?
  public var referralInformation: DocuSignAPI.DSAPIReferralInformation?
  public var socialAccountInformation: DocuSignAPI.DSAPISocialAccountInformation?
  public var taxExemptId: Swift.String?
  public init(accountName: Swift.String? = nil, accountSettings: DocuSignAPI.DSAPIAccountSettingsInformation? = nil, addressInformation: DocuSignAPI.DSAPIAccountAddress? = nil, creditCardInformation: DocuSignAPI.DSAPICreditCardInformation? = nil, directDebitProcessorInformation: DocuSignAPI.DSAPIDirectDebitProcessorInformation? = nil, distributorCode: Swift.String? = nil, distributorPassword: Swift.String? = nil, envelopePartitionId: Swift.String? = nil, initialUser: DocuSignAPI.DSAPIUserInformation? = nil, paymentMethod: Swift.String? = nil, paymentProcessorInformation: DocuSignAPI.DSAPIPaymentProcessorInformation? = nil, planInformation: DocuSignAPI.DSAPIPlanInformation? = nil, referralInformation: DocuSignAPI.DSAPIReferralInformation? = nil, socialAccountInformation: DocuSignAPI.DSAPISocialAccountInformation? = nil, taxExemptId: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIWorkflowStep : Swift.Codable {
  public var action: Swift.String?
  public var completedDate: Foundation.Date?
  public var delayedRouting: DocuSignAPI.DSAPIDelayedRoutingApiModel?
  public var itemId: Swift.String?
  public var recipientRouting: DocuSignAPI.DSAPIRecipientRouting?
  public var status: Swift.String?
  public var triggeredDate: Foundation.Date?
  public var triggerOnItem: Swift.String?
  public var workflowStepId: Swift.String?
  public init(action: Swift.String? = nil, completedDate: Foundation.Date? = nil, delayedRouting: DocuSignAPI.DSAPIDelayedRoutingApiModel? = nil, itemId: Swift.String? = nil, recipientRouting: DocuSignAPI.DSAPIRecipientRouting? = nil, status: Swift.String? = nil, triggeredDate: Foundation.Date? = nil, triggerOnItem: Swift.String? = nil, workflowStepId: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIPowerFormSendersResponse : Swift.Codable {
  public var endPosition: Swift.Int?
  public var nextUri: Foundation.URL?
  public var powerFormSenders: [DocuSignAPI.DSAPIUserInfo]?
  public var previousUri: Foundation.URL?
  public var resultSetSize: Swift.Int?
  public var startPosition: Swift.Int?
  public var totalSetSize: Swift.Int?
  public init(endPosition: Swift.Int? = nil, nextUri: Foundation.URL? = nil, powerFormSenders: [DocuSignAPI.DSAPIUserInfo]? = nil, previousUri: Foundation.URL? = nil, resultSetSize: Swift.Int? = nil, startPosition: Swift.Int? = nil, totalSetSize: Swift.Int? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @objcMembers public class DSAPIStamp : ObjectiveC.NSObject, Swift.Codable {
  @objc public var adoptedDateTime: Foundation.Date?
  @objc public var createdDateTime: Foundation.Date?
  @objc public var customField: Swift.String?
  @objc public var dateStampProperties: DocuSignAPI.DSAPIDateStampProperties?
  @objc @DocuSignAPI.BoolFromString public var disallowUserResizeStamp: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  @objc public var externalID: Swift.String?
  @objc public var imageBase64: Swift.String?
  @objc public var imageType: Swift.String?
  @objc public var lastModifiedDateTime: Foundation.Date?
  @objc public var phoneticName: Swift.String?
  @objc public var signatureName: Swift.String?
  @objc public var stampFormat: Swift.String?
  @objc public var stampImageUri: Foundation.URL?
  @objc public var stampSizeMM: Swift.String?
  @objc public var status: Swift.String?
  @objc public init(adoptedDateTime: Foundation.Date? = nil, createdDateTime: Foundation.Date? = nil, customField: Swift.String? = nil, dateStampProperties: DocuSignAPI.DSAPIDateStampProperties? = nil, disallowUserResizeStamp: Swift.Bool = false, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, externalID: Swift.String? = nil, imageBase64: Swift.String? = nil, imageType: Swift.String? = nil, lastModifiedDateTime: Foundation.Date? = nil, phoneticName: Swift.String? = nil, signatureName: Swift.String? = nil, stampFormat: Swift.String? = nil, stampImageUri: Foundation.URL? = nil, stampSizeMM: Swift.String? = nil, status: Swift.String? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @objcMembers public class DSAPIFolder : ObjectiveC.NSObject, Swift.Codable {
  @objc public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  public var filter: DocuSignAPI.DSAPIFilter?
  @objc public var folderId: Swift.String?
  public var folderItems: [DocuSignAPI.DSAPIFolderItemV2]?
  @objc public var folders: [DocuSignAPI.DSAPIFolder]?
  @objc @DocuSignAPI.BoolFromString public var hasAccess: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc @DocuSignAPI.BoolFromString public var hasSubFolders: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var itemCount: Swift.String?
  @objc public var name: Swift.String?
  @objc public var owner: DocuSignAPI.DSAPIUserInfo?
  @objc public var parentFolderId: Swift.String?
  @objc public var parentFolderUri: Foundation.URL?
  @objc public var subFolderCount: Swift.String?
  @objc public var type: Swift.String?
  @objc public var uri: Foundation.URL?
  public init(errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, filter: DocuSignAPI.DSAPIFilter? = nil, folderId: Swift.String? = nil, folderItems: [DocuSignAPI.DSAPIFolderItemV2]? = nil, folders: [DocuSignAPI.DSAPIFolder]? = nil, hasAccess: Swift.Bool = false, hasSubFolders: Swift.Bool = false, itemCount: Swift.String? = nil, name: Swift.String? = nil, owner: DocuSignAPI.DSAPIUserInfo? = nil, parentFolderId: Swift.String? = nil, parentFolderUri: Foundation.URL? = nil, subFolderCount: Swift.String? = nil, type: Swift.String? = nil, uri: Foundation.URL? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIMobileNotifierConfiguration : Swift.Codable {
  public var deviceId: Swift.String?
  public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  public var platform: Swift.String?
  public init(deviceId: Swift.String? = nil, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, platform: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIDocumentTemplate : Swift.Codable {
  public var documentEndPage: Swift.String?
  public var documentId: Swift.String?
  public var documentStartPage: Swift.String?
  public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  public var templateId: Swift.String?
  public init(documentEndPage: Swift.String? = nil, documentId: Swift.String? = nil, documentStartPage: Swift.String? = nil, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, templateId: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @objcMembers public class DSAPIPropertyMetadata : ObjectiveC.NSObject, Swift.Codable {
  @objc public var options: [Swift.String]?
  @objc public var rights: Swift.String?
  @objc public init(options: [Swift.String]? = nil, rights: Swift.String? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIConnectEventData : Swift.Codable {
  public var format: Swift.String?
  public var includeData: [Swift.String]?
  public var version: Swift.String?
  public init(format: Swift.String? = nil, includeData: [Swift.String]? = nil, version: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIUsageHistory : Swift.Codable {
  public var lastSentDateTime: Foundation.Date?
  public var lastSignedDateTime: Foundation.Date?
  public var sentCount: Swift.String?
  public var signedCount: Swift.String?
  public init(lastSentDateTime: Foundation.Date? = nil, lastSignedDateTime: Foundation.Date? = nil, sentCount: Swift.String? = nil, signedCount: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @objcMembers public class DSAPISealSign : ObjectiveC.NSObject, Swift.Codable {
  @objc public var accessCode: Swift.String?
  @objc public var accessCodeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var addAccessCodeToEmail: Swift.String?
  @objc @DocuSignAPI.BoolFromString public var allowSystemOverrideForLockedRecipient: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var autoRespondedReason: Swift.String?
  @objc public var clientUserId: Swift.String?
  @objc public var completedCount: Swift.String?
  @objc public var customFields: [Swift.String]?
  @objc public var declinedDateTime: Foundation.Date?
  @objc public var declinedReason: Swift.String?
  @objc public var deliveredDateTime: Foundation.Date?
  @objc public var deliveryMethod: Swift.String?
  @objc public var deliveryMethodMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var designatorId: Swift.String?
  @objc public var designatorIdGuid: Swift.String?
  @objc public var documentVisibility: [DocuSignAPI.DSAPIDocumentVisibility]?
  @objc public var emailNotification: DocuSignAPI.DSAPIRecipientEmailNotification?
  @objc public var embeddedRecipientStartURL: Swift.String?
  @objc public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  @objc public var faxNumber: Swift.String?
  @objc public var faxNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var idCheckConfigurationName: Swift.String?
  @objc public var idCheckConfigurationNameMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var idCheckInformationInput: DocuSignAPI.DSAPIIdCheckInformationInput?
  public var identityVerification: DocuSignAPI.DSAPIRecipientIdentityVerification?
  @objc @DocuSignAPI.BoolFromString public var inheritEmailNotificationConfiguration: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var lockedRecipientPhoneAuthEditable: Swift.String?
  @objc public var lockedRecipientSmsEditable: Swift.String?
  @objc public var name: Swift.String?
  @objc public var note: Swift.String?
  @objc public var noteMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var phoneAuthentication: DocuSignAPI.DSAPIRecipientPhoneAuthentication?
  @objc public var recipientAttachments: [DocuSignAPI.DSAPIRecipientAttachment]?
  public var recipientAuthenticationStatus: DocuSignAPI.DSAPIAuthenticationStatus?
  public var recipientFeatureMetadata: [DocuSignAPI.DSAPIFeatureAvailableMetadata]?
  @objc public var recipientId: Swift.String?
  @objc public var recipientIdGuid: Swift.String?
  public var recipientSignatureProviders: [DocuSignAPI.DSAPIRecipientSignatureProvider]?
  @objc public var recipientType: Swift.String?
  @objc public var recipientTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var requireIdLookup: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var requireIdLookupMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var roleName: Swift.String?
  @objc public var routingOrder: Swift.String?
  @objc public var routingOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var sentDateTime: Foundation.Date?
  @objc public var signedDateTime: Foundation.Date?
  @objc public var smsAuthentication: DocuSignAPI.DSAPIRecipientSMSAuthentication?
  @objc public var socialAuthentications: [DocuSignAPI.DSAPISocialAuthentication]?
  @objc public var status: Swift.String?
  @objc public var statusCode: Swift.String?
  @objc public var suppressEmails: Swift.String?
  @objc public var tabs: DocuSignAPI.DSAPITabs?
  @objc @DocuSignAPI.BoolFromString public var templateLocked: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc @DocuSignAPI.BoolFromString public var templateRequired: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var totalTabCount: Swift.String?
  @objc public var userId: Swift.String?
  public init(accessCode: Swift.String? = nil, accessCodeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, addAccessCodeToEmail: Swift.String? = nil, allowSystemOverrideForLockedRecipient: Swift.Bool = false, autoRespondedReason: Swift.String? = nil, clientUserId: Swift.String? = nil, completedCount: Swift.String? = nil, customFields: [Swift.String]? = nil, declinedDateTime: Foundation.Date? = nil, declinedReason: Swift.String? = nil, deliveredDateTime: Foundation.Date? = nil, deliveryMethod: Swift.String? = nil, deliveryMethodMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, designatorId: Swift.String? = nil, designatorIdGuid: Swift.String? = nil, documentVisibility: [DocuSignAPI.DSAPIDocumentVisibility]? = nil, emailNotification: DocuSignAPI.DSAPIRecipientEmailNotification? = nil, embeddedRecipientStartURL: Swift.String? = nil, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, faxNumber: Swift.String? = nil, faxNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, idCheckConfigurationName: Swift.String? = nil, idCheckConfigurationNameMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, idCheckInformationInput: DocuSignAPI.DSAPIIdCheckInformationInput? = nil, identityVerification: DocuSignAPI.DSAPIRecipientIdentityVerification? = nil, inheritEmailNotificationConfiguration: Swift.Bool = false, lockedRecipientPhoneAuthEditable: Swift.String? = nil, lockedRecipientSmsEditable: Swift.String? = nil, name: Swift.String? = nil, note: Swift.String? = nil, noteMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, phoneAuthentication: DocuSignAPI.DSAPIRecipientPhoneAuthentication? = nil, recipientAttachments: [DocuSignAPI.DSAPIRecipientAttachment]? = nil, recipientAuthenticationStatus: DocuSignAPI.DSAPIAuthenticationStatus? = nil, recipientFeatureMetadata: [DocuSignAPI.DSAPIFeatureAvailableMetadata]? = nil, recipientId: Swift.String? = nil, recipientIdGuid: Swift.String? = nil, recipientSignatureProviders: [DocuSignAPI.DSAPIRecipientSignatureProvider]? = nil, recipientType: Swift.String? = nil, recipientTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, requireIdLookup: Swift.Bool = false, requireIdLookupMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, roleName: Swift.String? = nil, routingOrder: Swift.String? = nil, routingOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, sentDateTime: Foundation.Date? = nil, signedDateTime: Foundation.Date? = nil, smsAuthentication: DocuSignAPI.DSAPIRecipientSMSAuthentication? = nil, socialAuthentications: [DocuSignAPI.DSAPISocialAuthentication]? = nil, status: Swift.String? = nil, statusCode: Swift.String? = nil, suppressEmails: Swift.String? = nil, tabs: DocuSignAPI.DSAPITabs? = nil, templateLocked: Swift.Bool = false, templateRequired: Swift.Bool = false, totalTabCount: Swift.String? = nil, userId: Swift.String? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIDocumentVisibilityList : Swift.Codable {
  public var documentVisibility: [DocuSignAPI.DSAPIDocumentVisibility]?
  public init(documentVisibility: [DocuSignAPI.DSAPIDocumentVisibility]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @objcMembers public class DSAPINameValue : ObjectiveC.NSObject, Swift.Codable {
  @objc public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  @objc public var name: Swift.String?
  @objc public var originalValue: Swift.String?
  @objc public var value: Swift.String?
  @objc override dynamic public init()
  @objc public init(errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, name: Swift.String? = nil, originalValue: Swift.String? = nil, value: Swift.String? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIBulkEnvelopeStatus : Swift.Codable {
  public var batchId: Swift.String?
  public var batchSize: Swift.String?
  public var bulkEnvelopes: [DocuSignAPI.DSAPIBulkEnvelope]?
  public var bulkEnvelopesBatchUri: Foundation.URL?
  public var endPosition: Swift.String?
  public var failed: Swift.String?
  public var nextUri: Foundation.URL?
  public var previousUri: Foundation.URL?
  public var queued: Swift.String?
  public var resultSetSize: Swift.String?
  public var sent: Swift.String?
  public var startPosition: Swift.String?
  public var submittedDate: Foundation.Date?
  public var totalSetSize: Swift.String?
  public init(batchId: Swift.String? = nil, batchSize: Swift.String? = nil, bulkEnvelopes: [DocuSignAPI.DSAPIBulkEnvelope]? = nil, bulkEnvelopesBatchUri: Foundation.URL? = nil, endPosition: Swift.String? = nil, failed: Swift.String? = nil, nextUri: Foundation.URL? = nil, previousUri: Foundation.URL? = nil, queued: Swift.String? = nil, resultSetSize: Swift.String? = nil, sent: Swift.String? = nil, startPosition: Swift.String? = nil, submittedDate: Foundation.Date? = nil, totalSetSize: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIRecipientSignatureProviderOptions : Swift.Codable {
  public var cpfNumber: Swift.String?
  public var cpfNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var oneTimePassword: Swift.String?
  public var oneTimePasswordMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var signerRole: Swift.String?
  public var signerRoleMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var sms: Swift.String?
  public var smsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public init(cpfNumber: Swift.String? = nil, cpfNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, oneTimePassword: Swift.String? = nil, oneTimePasswordMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, signerRole: Swift.String? = nil, signerRoleMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, sms: Swift.String? = nil, smsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIApiRequestLog : Swift.Codable {
  public var createdDateTime: Foundation.Date?
  public var description: Swift.String?
  public var requestLogId: Swift.String?
  public var status: Swift.String?
  public init(createdDateTime: Foundation.Date? = nil, description: Swift.String? = nil, requestLogId: Swift.String? = nil, status: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPITemplateSummary : Swift.Codable {
  public var applied: Swift.String?
  public var documentId: Swift.String?
  public var documentName: Swift.String?
  public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  public var name: Swift.String?
  public var templateId: Swift.String?
  public var templateMatch: DocuSignAPI.DSAPITemplateMatch?
  public var uri: Foundation.URL?
  public init(applied: Swift.String? = nil, documentId: Swift.String? = nil, documentName: Swift.String? = nil, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, name: Swift.String? = nil, templateId: Swift.String? = nil, templateMatch: DocuSignAPI.DSAPITemplateMatch? = nil, uri: Foundation.URL? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIDocumentHtmlDefinitionOriginal : Swift.Codable {
  public var documentId: Swift.String?
  public var documentIdGuid: Swift.String?
  public var htmlDefinition: DocuSignAPI.DSAPIDocumentHtmlDefinition?
  public init(documentId: Swift.String? = nil, documentIdGuid: Swift.String? = nil, htmlDefinition: DocuSignAPI.DSAPIDocumentHtmlDefinition? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @objcMembers public class DSAPIEnvelopeSummary : ObjectiveC.NSObject, Swift.Codable {
  public var bulkEnvelopeStatus: DocuSignAPI.DSAPIBulkEnvelopeStatus?
  @objc public var envelopeId: Swift.String?
  @objc public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  @objc public var recipientSigningUri: Foundation.URL?
  @objc public var recipientSigningUriError: Swift.String?
  @objc public var status: Swift.String?
  @objc public var statusDateTime: Foundation.Date?
  @objc public var uri: Foundation.URL?
  public init(bulkEnvelopeStatus: DocuSignAPI.DSAPIBulkEnvelopeStatus? = nil, envelopeId: Swift.String? = nil, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, recipientSigningUri: Foundation.URL? = nil, recipientSigningUriError: Swift.String? = nil, status: Swift.String? = nil, statusDateTime: Foundation.Date? = nil, uri: Foundation.URL? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIFolderItemsResponse : Swift.Codable {
  public var endPosition: Swift.String?
  public var envelopes: [DocuSignAPI.DSAPIEnvelopeSummary]?
  public var folders: [DocuSignAPI.DSAPIFolder]?
  public var nextUri: Foundation.URL?
  public var previousUri: Foundation.URL?
  public var resultSetSize: Swift.String?
  public var startPosition: Swift.String?
  public var totalSetSize: Swift.String?
  public init(endPosition: Swift.String? = nil, envelopes: [DocuSignAPI.DSAPIEnvelopeSummary]? = nil, folders: [DocuSignAPI.DSAPIFolder]? = nil, nextUri: Foundation.URL? = nil, previousUri: Foundation.URL? = nil, resultSetSize: Swift.String? = nil, startPosition: Swift.String? = nil, totalSetSize: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @objcMembers public class DSAPIRecipients : ObjectiveC.NSObject, Swift.Codable {
  @objc public var agents: [DocuSignAPI.DSAPIAgent]?
  @objc public var carbonCopies: [DocuSignAPI.DSAPICarbonCopy]?
  @objc public var certifiedDeliveries: [DocuSignAPI.DSAPICertifiedDelivery]?
  @objc public var currentRoutingOrder: Swift.String?
  @objc public var editors: [DocuSignAPI.DSAPIEditor]?
  @objc public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  @objc public var inPersonSigners: [DocuSignAPI.DSAPIInPersonSigner]?
  @objc public var intermediaries: [DocuSignAPI.DSAPIIntermediary]?
  @objc public var notaries: [DocuSignAPI.DSAPINotaryRecipient]?
  @objc public var recipientCount: Swift.String?
  @objc public var seals: [DocuSignAPI.DSAPISealSign]?
  @objc public var signers: [DocuSignAPI.DSAPISigner]?
  @objc public var witnesses: [DocuSignAPI.DSAPIWitness]?
  @objc override dynamic public init()
  @objc public init(agents: [DocuSignAPI.DSAPIAgent]? = nil, carbonCopies: [DocuSignAPI.DSAPICarbonCopy]? = nil, certifiedDeliveries: [DocuSignAPI.DSAPICertifiedDelivery]? = nil, currentRoutingOrder: Swift.String? = nil, editors: [DocuSignAPI.DSAPIEditor]? = nil, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, inPersonSigners: [DocuSignAPI.DSAPIInPersonSigner]? = nil, intermediaries: [DocuSignAPI.DSAPIIntermediary]? = nil, notaries: [DocuSignAPI.DSAPINotaryRecipient]? = nil, recipientCount: Swift.String? = nil, seals: [DocuSignAPI.DSAPISealSign]? = nil, signers: [DocuSignAPI.DSAPISigner]? = nil, witnesses: [DocuSignAPI.DSAPIWitness]? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public enum ReachabilityError : Swift.Error {
  case FailedToCreateWithAddress(Darwin.sockaddr_in)
  case FailedToCreateWithHostname(Swift.String)
  case UnableToSetCallback
  case UnableToSetDispatchQueue
  case UnableToGetInitialFlags
}
@available(*, unavailable, renamed: "Notification.Name.reachabilityChanged")
public let ReachabilityChangedNotification: Foundation.NSNotification.Name
public class Reachability {
  public typealias NetworkReachable = (DocuSignAPI.Reachability) -> ()
  public typealias NetworkUnreachable = (DocuSignAPI.Reachability) -> ()
  @available(*, unavailable, renamed: "Connection")
  public enum NetworkStatus : Swift.CustomStringConvertible {
    case notReachable, reachableViaWiFi, reachableViaWWAN
    public var description: Swift.String {
      get
    }
    public static func == (a: DocuSignAPI.Reachability.NetworkStatus, b: DocuSignAPI.Reachability.NetworkStatus) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Connection : Swift.CustomStringConvertible {
    case none, wifi, cellular
    public var description: Swift.String {
      get
    }
    public static func == (a: DocuSignAPI.Reachability.Connection, b: DocuSignAPI.Reachability.Connection) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var whenReachable: DocuSignAPI.Reachability.NetworkReachable?
  public var whenUnreachable: DocuSignAPI.Reachability.NetworkUnreachable?
  @available(*, deprecated, renamed: "allowsCellularConnection")
  final public let reachableOnWWAN: Swift.Bool
  public var allowsCellularConnection: Swift.Bool
  public var notificationCenter: Foundation.NotificationCenter
  @available(*, deprecated, renamed: "connection.description")
  public var currentReachabilityString: Swift.String {
    get
  }
  @available(*, unavailable, renamed: "connection")
  public var currentReachabilityStatus: DocuSignAPI.Reachability.Connection {
    get
  }
  public var connection: DocuSignAPI.Reachability.Connection {
    get
  }
  required public init(reachabilityRef: SystemConfiguration.SCNetworkReachability, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil)
  convenience public init?(hostname: Swift.String, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil)
  convenience public init?(queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil)
  @objc deinit
}
extension DocuSignAPI.Reachability {
  public func startNotifier() throws
  public func stopNotifier()
  @available(*, deprecated, message: "Please use `connection != .none`")
  public var isReachable: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .cellular`")
  public var isReachableViaWWAN: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .wifi`")
  public var isReachableViaWiFi: Swift.Bool {
    get
  }
  public var description: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class DSAPIRecipientViewRequest : ObjectiveC.NSObject, Swift.Codable {
  @objc public var assertionId: Swift.String?
  @objc public var authenticationInstant: Swift.String?
  @objc public var authenticationMethod: Swift.String?
  public var clientURLs: DocuSignAPI.DSAPIRecipientTokenClientURLs?
  @objc public var clientUserId: Swift.String?
  @objc public var email: Swift.String?
  @objc public var frameAncestors: [Swift.String]?
  @objc public var messageOrigins: [Swift.String]?
  @objc public var pingFrequency: Swift.String?
  @objc public var pingUrl: Foundation.URL?
  @objc public var recipientId: Swift.String?
  @objc public var returnUrl: Foundation.URL?
  @objc public var securityDomain: Swift.String?
  @objc public var userId: Swift.String?
  @objc public var userName: Swift.String?
  @objc public var xFrameOptions: Swift.String?
  @objc public var xFrameOptionsAllowFromUrl: Foundation.URL?
  @objc override dynamic public init()
  public init(assertionId: Swift.String? = nil, authenticationInstant: Swift.String? = nil, authenticationMethod: Swift.String? = nil, clientURLs: DocuSignAPI.DSAPIRecipientTokenClientURLs? = nil, clientUserId: Swift.String? = nil, email: Swift.String? = nil, frameAncestors: [Swift.String]? = nil, messageOrigins: [Swift.String]? = nil, pingFrequency: Swift.String? = nil, pingUrl: Foundation.URL? = nil, recipientId: Swift.String? = nil, returnUrl: Foundation.URL? = nil, securityDomain: Swift.String? = nil, userId: Swift.String? = nil, userName: Swift.String? = nil, xFrameOptions: Swift.String? = nil, xFrameOptionsAllowFromUrl: Foundation.URL? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct DSAPINotarize : Swift.Codable {
  @DocuSignAPI.BoolFromString public var anchorAllowWhiteSpaceInCharacters: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var anchorAllowWhiteSpaceInCharactersMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var anchorCaseSensitive: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var anchorCaseSensitiveMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorHorizontalAlignment: Swift.String?
  public var anchorHorizontalAlignmentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var anchorIgnoreIfNotPresent: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var anchorIgnoreIfNotPresentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var anchorMatchWholeWord: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var anchorMatchWholeWordMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorString: Swift.String?
  public var anchorStringMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorTabProcessorVersion: Swift.String?
  public var anchorTabProcessorVersionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorUnits: Swift.String?
  public var anchorUnitsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorXOffset: Swift.String?
  public var anchorXOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorYOffset: Swift.String?
  public var anchorYOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var conditionalParentLabel: Swift.String?
  public var conditionalParentLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var conditionalParentValue: Swift.String?
  public var conditionalParentValueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var customTabId: Swift.String?
  public var customTabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var documentId: Swift.String?
  public var documentIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  public var formOrder: Swift.String?
  public var formOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var formPageLabel: Swift.String?
  public var formPageLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var formPageNumber: Swift.String?
  public var formPageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var height: Swift.String?
  public var heightMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var locked: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var lockedMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var mergeField: DocuSignAPI.DSAPIMergeField?
  public var mergeFieldXml: Swift.String?
  public var pageNumber: Swift.String?
  public var pageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var recipientId: Swift.String?
  public var recipientIdGuid: Swift.String?
  public var recipientIdGuidMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var recipientIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var required: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var requiredMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var smartContractInformation: DocuSignAPI.DSAPISmartContractInformation?
  public var source: Swift.String?
  public var status: Swift.String?
  public var statusMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var tabGroupLabels: [Swift.String]?
  public var tabGroupLabelsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var tabId: Swift.String?
  public var tabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var tabOrder: Swift.String?
  public var tabOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var tabType: Swift.String?
  public var tabTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var templateLocked: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var templateLockedMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var templateRequired: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var templateRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var tooltip: Swift.String?
  public var toolTipMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var width: Swift.String?
  public var widthMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var xPosition: Swift.String?
  public var xPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var yPosition: Swift.String?
  public var yPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public init(anchorAllowWhiteSpaceInCharacters: Swift.Bool = false, anchorAllowWhiteSpaceInCharactersMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorCaseSensitive: Swift.Bool = false, anchorCaseSensitiveMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorHorizontalAlignment: Swift.String? = nil, anchorHorizontalAlignmentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorIgnoreIfNotPresent: Swift.Bool = false, anchorIgnoreIfNotPresentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorMatchWholeWord: Swift.Bool = false, anchorMatchWholeWordMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorString: Swift.String? = nil, anchorStringMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorTabProcessorVersion: Swift.String? = nil, anchorTabProcessorVersionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorUnits: Swift.String? = nil, anchorUnitsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorXOffset: Swift.String? = nil, anchorXOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorYOffset: Swift.String? = nil, anchorYOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, conditionalParentLabel: Swift.String? = nil, conditionalParentLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, conditionalParentValue: Swift.String? = nil, conditionalParentValueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, customTabId: Swift.String? = nil, customTabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, documentId: Swift.String? = nil, documentIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, formOrder: Swift.String? = nil, formOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formPageLabel: Swift.String? = nil, formPageLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formPageNumber: Swift.String? = nil, formPageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, height: Swift.String? = nil, heightMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, locked: Swift.Bool = false, lockedMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, mergeField: DocuSignAPI.DSAPIMergeField? = nil, mergeFieldXml: Swift.String? = nil, pageNumber: Swift.String? = nil, pageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, recipientId: Swift.String? = nil, recipientIdGuid: Swift.String? = nil, recipientIdGuidMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, recipientIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, required: Swift.Bool = false, requiredMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, smartContractInformation: DocuSignAPI.DSAPISmartContractInformation? = nil, source: Swift.String? = nil, status: Swift.String? = nil, statusMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabGroupLabels: [Swift.String]? = nil, tabGroupLabelsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabId: Swift.String? = nil, tabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabOrder: Swift.String? = nil, tabOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabType: Swift.String? = nil, tabTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, templateLocked: Swift.Bool = false, templateLockedMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, templateRequired: Swift.Bool = false, templateRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tooltip: Swift.String? = nil, toolTipMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, width: Swift.String? = nil, widthMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, xPosition: Swift.String? = nil, xPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, yPosition: Swift.String? = nil, yPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIBillingPlan : Swift.Codable {
  public var appStoreProducts: [DocuSignAPI.DSAPIAppStoreProduct]?
  public var currencyPlanPrices: [DocuSignAPI.DSAPICurrencyPlanPrice]?
  @DocuSignAPI.BoolFromString public var enableSupport: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var includedSeats: Swift.String?
  public var otherDiscountPercent: Swift.String?
  public var paymentCycle: Swift.String?
  public var paymentMethod: Swift.String?
  public var perSeatPrice: Swift.String?
  public var planClassification: Swift.String?
  public var planFeatureSets: [DocuSignAPI.DSAPIFeatureSet]?
  public var planId: Swift.String?
  public var planName: Swift.String?
  public var seatDiscounts: [DocuSignAPI.DSAPISeatDiscount]?
  public var supportIncidentFee: Swift.String?
  public var supportPlanFee: Swift.String?
  public init(appStoreProducts: [DocuSignAPI.DSAPIAppStoreProduct]? = nil, currencyPlanPrices: [DocuSignAPI.DSAPICurrencyPlanPrice]? = nil, enableSupport: Swift.Bool = false, includedSeats: Swift.String? = nil, otherDiscountPercent: Swift.String? = nil, paymentCycle: Swift.String? = nil, paymentMethod: Swift.String? = nil, perSeatPrice: Swift.String? = nil, planClassification: Swift.String? = nil, planFeatureSets: [DocuSignAPI.DSAPIFeatureSet]? = nil, planId: Swift.String? = nil, planName: Swift.String? = nil, seatDiscounts: [DocuSignAPI.DSAPISeatDiscount]? = nil, supportIncidentFee: Swift.String? = nil, supportPlanFee: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIRecipientProofFile : Swift.Codable {
  public var hasIdentityAttempts: Swift.String?
  public var isInProofFile: Swift.String?
  public init(hasIdentityAttempts: Swift.String? = nil, isInProofFile: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIBulkRecipientsUpdateResponse : Swift.Codable {
  public var signer: DocuSignAPI.DSAPISigner?
  public init(signer: DocuSignAPI.DSAPISigner? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIPlanInformation : Swift.Codable {
  public var addOns: [DocuSignAPI.DSAPIAddOn]?
  public var currencyCode: Swift.String?
  public var freeTrialDaysOverride: Swift.String?
  public var planFeatureSets: [DocuSignAPI.DSAPIFeatureSet]?
  public var planId: Swift.String?
  public var recipientDomains: [DocuSignAPI.DSAPIRecipientDomain]?
  public init(addOns: [DocuSignAPI.DSAPIAddOn]? = nil, currencyCode: Swift.String? = nil, freeTrialDaysOverride: Swift.String? = nil, planFeatureSets: [DocuSignAPI.DSAPIFeatureSet]? = nil, planId: Swift.String? = nil, recipientDomains: [DocuSignAPI.DSAPIRecipientDomain]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @objcMembers public class DSAPIReminders : ObjectiveC.NSObject, Swift.Codable {
  @objc public var reminderDelay: Swift.String?
  @objc @DocuSignAPI.BoolFromString public var reminderEnabled: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var reminderFrequency: Swift.String?
  @objc override dynamic public init()
  @objc public init(reminderDelay: Swift.String? = nil, reminderEnabled: Swift.Bool = false, reminderFrequency: Swift.String? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIBccEmailArchiveList : Swift.Codable {
  public var bccEmailArchives: [DocuSignAPI.DSAPIBccEmailArchive]?
  public var endPosition: Swift.String?
  public var nextUri: Foundation.URL?
  public var previousUri: Foundation.URL?
  public var resultSetSize: Swift.String?
  public var startPosition: Swift.String?
  public var totalSetSize: Swift.String?
  public init(bccEmailArchives: [DocuSignAPI.DSAPIBccEmailArchive]? = nil, endPosition: Swift.String? = nil, nextUri: Foundation.URL? = nil, previousUri: Foundation.URL? = nil, resultSetSize: Swift.String? = nil, startPosition: Swift.String? = nil, totalSetSize: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPISignatureUser : Swift.Codable {
  @DocuSignAPI.BoolFromString public var isDefault: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var rights: Swift.String?
  public var userId: Swift.String?
  public var userName: Swift.String?
  public init(isDefault: Swift.Bool = false, rights: Swift.String? = nil, userId: Swift.String? = nil, userName: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPISharedItem : Swift.Codable {
  public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  public var shared: Swift.String?
  public var user: DocuSignAPI.DSAPIUserInfo?
  public init(errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, shared: Swift.String? = nil, user: DocuSignAPI.DSAPIUserInfo? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIConsoleViewRequest : Swift.Codable {
  public var envelopeId: Swift.String?
  public var returnUrl: Foundation.URL?
  public init(envelopeId: Swift.String? = nil, returnUrl: Foundation.URL? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIAccountPasswordStrengthTypeOption : Swift.Codable {
  public var minimumLength: Swift.String?
  public var name: Swift.String?
  @DocuSignAPI.BoolFromString public var passwordIncludeDigit: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  @DocuSignAPI.BoolFromString public var passwordIncludeDigitOrSpecialCharacter: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  @DocuSignAPI.BoolFromString public var passwordIncludeLowerCase: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  @DocuSignAPI.BoolFromString public var passwordIncludeSpecialCharacter: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  @DocuSignAPI.BoolFromString public var passwordIncludeUpperCase: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public init(minimumLength: Swift.String? = nil, name: Swift.String? = nil, passwordIncludeDigit: Swift.Bool = false, passwordIncludeDigitOrSpecialCharacter: Swift.Bool = false, passwordIncludeLowerCase: Swift.Bool = false, passwordIncludeSpecialCharacter: Swift.Bool = false, passwordIncludeUpperCase: Swift.Bool = false)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers open class EmailArchiveAPI {
  open class func bCCEmailArchiveDeleteBCCEmailArchive(accountId: Swift.String, bccEmailArchiveId: Swift.String, completion: @escaping ((_ data: Swift.Void?, _ error: Swift.Error?) -> Swift.Void))
  open class func bCCEmailArchiveDeleteBCCEmailArchiveWithRequestBuilder(accountId: Swift.String, bccEmailArchiveId: Swift.String) -> DocuSignAPI.RequestBuilder<Swift.Void>
  open class func bCCEmailArchiveGetBCCEmailArchiveHistoryList(accountId: Swift.String, bccEmailArchiveId: Swift.String, count: Swift.String? = nil, startPosition: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIBccEmailArchiveHistoryList?, _ error: Swift.Error?) -> Swift.Void))
  open class func bCCEmailArchiveGetBCCEmailArchiveHistoryListWithRequestBuilder(accountId: Swift.String, bccEmailArchiveId: Swift.String, count: Swift.String? = nil, startPosition: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIBccEmailArchiveHistoryList>
  open class func bCCEmailArchiveGetBCCEmailArchiveList(accountId: Swift.String, count: Swift.String? = nil, startPosition: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIBccEmailArchiveList?, _ error: Swift.Error?) -> Swift.Void))
  open class func bCCEmailArchiveGetBCCEmailArchiveListWithRequestBuilder(accountId: Swift.String, count: Swift.String? = nil, startPosition: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIBccEmailArchiveList>
  open class func bCCEmailArchivePostBCCEmailArchive(accountId: Swift.String, body: DocuSignAPI.DSAPIBccEmailArchive? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIBccEmailArchive?, _ error: Swift.Error?) -> Swift.Void))
  open class func bCCEmailArchivePostBCCEmailArchiveWithRequestBuilder(accountId: Swift.String, body: DocuSignAPI.DSAPIBccEmailArchive? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIBccEmailArchive>
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class DSAPIInPersonSigner : ObjectiveC.NSObject, Swift.Codable {
  @objc public var accessCode: Swift.String?
  @objc public var accessCodeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var addAccessCodeToEmail: Swift.String?
  @objc @DocuSignAPI.BoolFromString public var allowSystemOverrideForLockedRecipient: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc @DocuSignAPI.BoolFromString public var autoNavigation: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var autoRespondedReason: Swift.String?
  @objc @DocuSignAPI.BoolFromString public var canSignOffline: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var clientUserId: Swift.String?
  @objc public var completedCount: Swift.String?
  @objc public var creationReason: Swift.String?
  @objc public var customFields: [Swift.String]?
  @objc public var declinedDateTime: Foundation.Date?
  @objc public var declinedReason: Swift.String?
  @objc @DocuSignAPI.BoolFromString public var defaultRecipient: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var deliveredDateTime: Foundation.Date?
  @objc public var deliveryMethod: Swift.String?
  @objc public var deliveryMethodMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var designatorId: Swift.String?
  @objc public var designatorIdGuid: Swift.String?
  @objc public var documentVisibility: [DocuSignAPI.DSAPIDocumentVisibility]?
  @objc public var email: Swift.String?
  @objc public var emailMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var emailNotification: DocuSignAPI.DSAPIRecipientEmailNotification?
  @objc public var embeddedRecipientStartURL: Swift.String?
  @objc public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  @objc public var excludedDocuments: [Swift.String]?
  @objc public var faxNumber: Swift.String?
  @objc public var faxNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var hostEmail: Swift.String?
  @objc public var hostEmailMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var hostName: Swift.String?
  @objc public var hostNameMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var idCheckConfigurationName: Swift.String?
  @objc public var idCheckConfigurationNameMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var idCheckInformationInput: DocuSignAPI.DSAPIIdCheckInformationInput?
  public var identityVerification: DocuSignAPI.DSAPIRecipientIdentityVerification?
  @objc @DocuSignAPI.BoolFromString public var inheritEmailNotificationConfiguration: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var inPersonSigningType: Swift.String?
  @objc public var inPersonSigningTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var lockedRecipientPhoneAuthEditable: Swift.String?
  @objc public var lockedRecipientSmsEditable: Swift.String?
  @objc public var name: Swift.String?
  @objc public var nameMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var notaryHost: DocuSignAPI.DSAPINotaryHost?
  @objc public var notaryId: Swift.String?
  @objc public var note: Swift.String?
  @objc public var noteMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var offlineAttributes: DocuSignAPI.DSAPIOfflineAttributes?
  public var phoneAuthentication: DocuSignAPI.DSAPIRecipientPhoneAuthentication?
  @objc public var recipientAttachments: [DocuSignAPI.DSAPIRecipientAttachment]?
  public var recipientAuthenticationStatus: DocuSignAPI.DSAPIAuthenticationStatus?
  public var recipientFeatureMetadata: [DocuSignAPI.DSAPIFeatureAvailableMetadata]?
  @objc public var recipientId: Swift.String?
  @objc public var recipientIdGuid: Swift.String?
  public var recipientSignatureProviders: [DocuSignAPI.DSAPIRecipientSignatureProvider]?
  @objc @DocuSignAPI.BoolFromString public var recipientSuppliesTabs: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var recipientType: Swift.String?
  @objc public var recipientTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var requireIdLookup: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var requireIdLookupMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var requireSignerCertificate: Swift.String?
  @objc @DocuSignAPI.BoolFromString public var requireSignOnPaper: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc @DocuSignAPI.BoolFromString public var requireUploadSignature: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var roleName: Swift.String?
  @objc public var routingOrder: Swift.String?
  @objc public var routingOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var sentDateTime: Foundation.Date?
  @objc public var signatureInfo: DocuSignAPI.DSAPIRecipientSignatureInformation?
  @objc public var signedDateTime: Foundation.Date?
  @objc public var signerEmail: Swift.String?
  @objc public var signerEmailMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var signerFirstName: Swift.String?
  @objc public var signerFirstNameMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var signerLastName: Swift.String?
  @objc public var signerLastNameMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var signerName: Swift.String?
  @objc public var signerNameMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var signInEachLocation: Swift.String?
  @objc public var signInEachLocationMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var signingGroupId: Swift.String?
  @objc public var signingGroupIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var signingGroupName: Swift.String?
  @objc public var signingGroupUsers: [DocuSignAPI.DSAPIUserInfo]?
  @objc public var smsAuthentication: DocuSignAPI.DSAPIRecipientSMSAuthentication?
  @objc public var socialAuthentications: [DocuSignAPI.DSAPISocialAuthentication]?
  @objc public var status: Swift.String?
  @objc public var statusCode: Swift.String?
  @objc @DocuSignAPI.BoolFromString public var suppressEmails: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var tabs: DocuSignAPI.DSAPITabs?
  @objc @DocuSignAPI.BoolFromString public var templateLocked: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc @DocuSignAPI.BoolFromString public var templateRequired: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var totalTabCount: Swift.String?
  @objc public var userId: Swift.String?
  @objc public var consumerDisclosure: DocuSignAPI.DSAPIConsumerDisclosure?
  @objc public var recipientPhotoImageDataBase64: Swift.String?
  @objc override dynamic public init()
  public init(accessCode: Swift.String? = nil, accessCodeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, addAccessCodeToEmail: Swift.String? = nil, allowSystemOverrideForLockedRecipient: Swift.Bool = false, autoNavigation: Swift.Bool = false, autoRespondedReason: Swift.String? = nil, canSignOffline: Swift.Bool = false, clientUserId: Swift.String? = nil, completedCount: Swift.String? = nil, creationReason: Swift.String? = nil, customFields: [Swift.String]? = nil, declinedDateTime: Foundation.Date? = nil, declinedReason: Swift.String? = nil, defaultRecipient: Swift.Bool = false, deliveredDateTime: Foundation.Date? = nil, deliveryMethod: Swift.String? = nil, deliveryMethodMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, designatorId: Swift.String? = nil, designatorIdGuid: Swift.String? = nil, documentVisibility: [DocuSignAPI.DSAPIDocumentVisibility]? = nil, email: Swift.String? = nil, emailMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, emailNotification: DocuSignAPI.DSAPIRecipientEmailNotification? = nil, embeddedRecipientStartURL: Swift.String? = nil, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, excludedDocuments: [Swift.String]? = nil, faxNumber: Swift.String? = nil, faxNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, hostEmail: Swift.String? = nil, hostEmailMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, hostName: Swift.String? = nil, hostNameMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, idCheckConfigurationName: Swift.String? = nil, idCheckConfigurationNameMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, idCheckInformationInput: DocuSignAPI.DSAPIIdCheckInformationInput? = nil, identityVerification: DocuSignAPI.DSAPIRecipientIdentityVerification? = nil, inheritEmailNotificationConfiguration: Swift.Bool = false, inPersonSigningType: Swift.String? = nil, inPersonSigningTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, lockedRecipientPhoneAuthEditable: Swift.String? = nil, lockedRecipientSmsEditable: Swift.String? = nil, name: Swift.String? = nil, nameMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, notaryHost: DocuSignAPI.DSAPINotaryHost? = nil, notaryId: Swift.String? = nil, note: Swift.String? = nil, noteMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, offlineAttributes: DocuSignAPI.DSAPIOfflineAttributes? = nil, phoneAuthentication: DocuSignAPI.DSAPIRecipientPhoneAuthentication? = nil, recipientAttachments: [DocuSignAPI.DSAPIRecipientAttachment]? = nil, recipientAuthenticationStatus: DocuSignAPI.DSAPIAuthenticationStatus? = nil, recipientFeatureMetadata: [DocuSignAPI.DSAPIFeatureAvailableMetadata]? = nil, recipientId: Swift.String? = nil, recipientIdGuid: Swift.String? = nil, recipientSignatureProviders: [DocuSignAPI.DSAPIRecipientSignatureProvider]? = nil, recipientSuppliesTabs: Swift.Bool = false, recipientType: Swift.String? = nil, recipientTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, requireIdLookup: Swift.Bool = false, requireIdLookupMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, requireSignerCertificate: Swift.String? = nil, requireSignOnPaper: Swift.Bool = false, requireUploadSignature: Swift.Bool = false, roleName: Swift.String? = nil, routingOrder: Swift.String? = nil, routingOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, sentDateTime: Foundation.Date? = nil, signatureInfo: DocuSignAPI.DSAPIRecipientSignatureInformation? = nil, signedDateTime: Foundation.Date? = nil, signerEmail: Swift.String? = nil, signerEmailMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, signerFirstName: Swift.String? = nil, signerFirstNameMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, signerLastName: Swift.String? = nil, signerLastNameMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, signerName: Swift.String? = nil, signerNameMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, signInEachLocation: Swift.String? = nil, signInEachLocationMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, signingGroupId: Swift.String? = nil, signingGroupIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, signingGroupName: Swift.String? = nil, signingGroupUsers: [DocuSignAPI.DSAPIUserInfo]? = nil, smsAuthentication: DocuSignAPI.DSAPIRecipientSMSAuthentication? = nil, socialAuthentications: [DocuSignAPI.DSAPISocialAuthentication]? = nil, status: Swift.String? = nil, statusCode: Swift.String? = nil, suppressEmails: Swift.Bool = false, tabs: DocuSignAPI.DSAPITabs? = nil, templateLocked: Swift.Bool = false, templateRequired: Swift.Bool = false, totalTabCount: Swift.String? = nil, userId: Swift.String? = nil, consumerDisclosure: DocuSignAPI.DSAPIConsumerDisclosure? = nil, recipientPhotoImageDataBase64: Swift.String? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIIdCheckSecurityStep : Swift.Codable {
  public var authType: Swift.String?
  public init(authType: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @objcMembers public class DSAPIConsumerDisclosure : ObjectiveC.NSObject, Swift.Codable {
  @objc public var accountEsignId: Swift.String?
  @objc @DocuSignAPI.BoolFromString public var allowCDWithdraw: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowCDWithdrawMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc public var changeEmail: Swift.String?
  @objc public var changeEmailOther: Swift.String?
  @objc public var companyName: Swift.String?
  @objc public var companyPhone: Swift.String?
  @objc public var copyCostPerPage: Swift.String?
  @objc public var copyFeeCollectionMethod: Swift.String?
  @objc public var copyRequestEmail: Swift.String?
  @objc @DocuSignAPI.BoolFromString public var custom: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var enableEsign: Swift.String?
  @objc public var esignAgreement: Swift.String?
  @objc public var esignText: Swift.String?
  @objc public var languageCode: Swift.String?
  @objc @DocuSignAPI.BoolFromString public var mustAgreeToEsign: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var pdfId: Swift.String?
  @objc @DocuSignAPI.BoolFromString public var useBrand: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc @DocuSignAPI.BoolFromString public var useConsumerDisclosureWithinAccount: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var useConsumerDisclosureWithinAccountMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc public var withdrawAddressLine1: Swift.String?
  @objc public var withdrawAddressLine2: Swift.String?
  @objc public var withdrawByEmail: Swift.String?
  @objc @DocuSignAPI.BoolFromString public var withdrawByMail: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc @DocuSignAPI.BoolFromString public var withdrawByPhone: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var withdrawCity: Swift.String?
  @objc public var withdrawConsequences: Swift.String?
  @objc public var withdrawEmail: Swift.String?
  @objc public var withdrawOther: Swift.String?
  @objc public var withdrawPhone: Swift.String?
  @objc public var withdrawPostalCode: Swift.String?
  @objc public var withdrawState: Swift.String?
  @objc public init(accountEsignId: Swift.String? = nil, allowCDWithdraw: Swift.Bool = false, allowCDWithdrawMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, changeEmail: Swift.String? = nil, changeEmailOther: Swift.String? = nil, companyName: Swift.String? = nil, companyPhone: Swift.String? = nil, copyCostPerPage: Swift.String? = nil, copyFeeCollectionMethod: Swift.String? = nil, copyRequestEmail: Swift.String? = nil, custom: Swift.Bool = false, enableEsign: Swift.String? = nil, esignAgreement: Swift.String? = nil, esignText: Swift.String? = nil, languageCode: Swift.String? = nil, mustAgreeToEsign: Swift.Bool = false, pdfId: Swift.String? = nil, useBrand: Swift.Bool = false, useConsumerDisclosureWithinAccount: Swift.Bool = false, useConsumerDisclosureWithinAccountMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, withdrawAddressLine1: Swift.String? = nil, withdrawAddressLine2: Swift.String? = nil, withdrawByEmail: Swift.String? = nil, withdrawByMail: Swift.Bool = false, withdrawByPhone: Swift.Bool = false, withdrawCity: Swift.String? = nil, withdrawConsequences: Swift.String? = nil, withdrawEmail: Swift.String? = nil, withdrawOther: Swift.String? = nil, withdrawPhone: Swift.String? = nil, withdrawPostalCode: Swift.String? = nil, withdrawState: Swift.String? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIPayPalLegacySettings : Swift.Codable {
  public var currency: Swift.String?
  public var partner: Swift.String?
  public var password: Swift.String?
  public var userName: Swift.String?
  public var vendor: Swift.String?
  public init(currency: Swift.String? = nil, partner: Swift.String? = nil, password: Swift.String? = nil, userName: Swift.String? = nil, vendor: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIUserSocialIdResult : Swift.Codable {
  public var socialAccountInformation: [DocuSignAPI.DSAPISocialAccountInformation]?
  public var userId: Swift.String?
  public init(socialAccountInformation: [DocuSignAPI.DSAPISocialAccountInformation]? = nil, userId: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIAddOn : Swift.Codable {
  public var active: Swift.String?
  public var addOnId: Swift.String?
  public var id: Swift.String?
  public var name: Swift.String?
  public init(active: Swift.String? = nil, addOnId: Swift.String? = nil, id: Swift.String? = nil, name: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIBulkSendingCopy : Swift.Codable {
  public var customFields: [DocuSignAPI.DSAPIBulkSendingCopyCustomField]?
  public var emailBlurb: Swift.String?
  public var emailSubject: Swift.String?
  public var recipients: [DocuSignAPI.DSAPIBulkSendingCopyRecipient]?
  public init(customFields: [DocuSignAPI.DSAPIBulkSendingCopyCustomField]? = nil, emailBlurb: Swift.String? = nil, emailSubject: Swift.String? = nil, recipients: [DocuSignAPI.DSAPIBulkSendingCopyRecipient]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @objcMembers public class DSAPIEnvelope : ObjectiveC.NSObject, Swift.Codable {
  @objc public var accessControlListBase64: Swift.String?
  @objc @DocuSignAPI.BoolFromString public var allowComments: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc @DocuSignAPI.BoolFromString public var allowMarkup: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc @DocuSignAPI.BoolFromString public var allowReassign: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc @DocuSignAPI.BoolFromString public var allowViewHistory: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anySigner: Swift.String?
  @objc @DocuSignAPI.BoolFromString public var asynchronous: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var attachmentsUri: Foundation.URL?
  @objc @DocuSignAPI.BoolFromString public var authoritativeCopy: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var authoritativeCopyDefault: Swift.String?
  @objc @DocuSignAPI.BoolFromString public var autoNavigation: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var brandId: Swift.String?
  @objc @DocuSignAPI.BoolFromString public var brandLock: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var certificateUri: Foundation.URL?
  @objc public var completedDateTime: Foundation.Date?
  @objc public var copyRecipientData: Swift.String?
  @objc public var createdDateTime: Foundation.Date?
  @objc public var customFields: DocuSignAPI.DSAPICustomFields?
  @objc public var customFieldsUri: Foundation.URL?
  @objc public var declinedDateTime: Foundation.Date?
  @objc public var deletedDateTime: Foundation.Date?
  @objc public var deliveredDateTime: Foundation.Date?
  @objc @DocuSignAPI.BoolFromString public var disableResponsiveDocument: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var documentBase64: Swift.String?
  @objc public var documentsCombinedUri: Foundation.URL?
  @objc public var documentsUri: Foundation.URL?
  @objc public var emailBlurb: Swift.String?
  @objc public var emailSettings: DocuSignAPI.DSAPIEmailSettings?
  @objc public var emailSubject: Swift.String?
  @objc @DocuSignAPI.BoolFromString public var enableWetSign: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc @DocuSignAPI.BoolFromString public var enforceSignerVisibility: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var envelopeAttachments: [DocuSignAPI.DSAPIAttachment]?
  public var envelopeCustomMetadata: DocuSignAPI.DSAPIEnvelopeCustomMetadata?
  @objc public var envelopeDocuments: [DocuSignAPI.DSAPIEnvelopeDocument]?
  @objc public var envelopeId: Swift.String?
  @objc @DocuSignAPI.BoolFromString public var envelopeIdStamping: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var envelopeLocation: Swift.String?
  public var envelopeMetadata: DocuSignAPI.DSAPIEnvelopeMetadata?
  @objc public var envelopeUri: Foundation.URL?
  @objc public var expireAfter: Swift.String?
  @objc public var expireDateTime: Foundation.Date?
  @objc public var expireEnabled: Swift.String?
  @objc public var externalEnvelopeId: Swift.String?
  @objc public var folders: [DocuSignAPI.DSAPIFolder]?
  @objc @DocuSignAPI.BoolFromString public var hasComments: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc @DocuSignAPI.BoolFromString public var hasFormDataChanged: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc @DocuSignAPI.BoolFromString public var hasWavFile: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var holder: Swift.String?
  @objc public var initialSentDateTime: Foundation.Date?
  @objc @DocuSignAPI.BoolFromString public var is21CFRPart11: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc @DocuSignAPI.BoolFromString public var isDynamicEnvelope: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc @DocuSignAPI.BoolFromString public var isSignatureProviderEnvelope: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var lastModifiedDateTime: Foundation.Date?
  @objc public var location: Swift.String?
  @objc public var lockInformation: DocuSignAPI.DSAPILockInformation?
  @objc @DocuSignAPI.BoolFromString public var messageLock: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var notification: DocuSignAPI.DSAPINotification?
  @objc public var notificationUri: Foundation.URL?
  public var powerForm: DocuSignAPI.DSAPIPowerForm?
  @objc public var purgeCompletedDate: Foundation.Date?
  @objc public var purgeRequestDate: Foundation.Date?
  @objc public var purgeState: Swift.String?
  @objc public var recipients: DocuSignAPI.DSAPIRecipients?
  @objc @DocuSignAPI.BoolFromString public var recipientsLock: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var recipientsUri: Foundation.URL?
  @objc public var sender: DocuSignAPI.DSAPIUserInfo?
  @objc public var sentDateTime: Foundation.Date?
  @objc @DocuSignAPI.BoolFromString public var signerCanSignOnMobile: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var signingLocation: Swift.String?
  @objc public var status: Swift.String?
  @objc public var statusChangedDateTime: Foundation.Date?
  @objc public var statusDateTime: Foundation.Date?
  @objc public var templatesUri: Foundation.URL?
  @objc public var transactionId: Swift.String?
  @objc public var useDisclosure: Swift.String?
  @objc public var voidedDateTime: Foundation.Date?
  @objc public var voidedReason: Swift.String?
  public var workflow: DocuSignAPI.DSAPIWorkflow?
  public init(accessControlListBase64: Swift.String? = nil, allowComments: Swift.Bool = false, allowMarkup: Swift.Bool = false, allowReassign: Swift.Bool = false, allowViewHistory: Swift.Bool = false, anySigner: Swift.String? = nil, asynchronous: Swift.Bool = false, attachmentsUri: Foundation.URL? = nil, authoritativeCopy: Swift.Bool = false, authoritativeCopyDefault: Swift.String? = nil, autoNavigation: Swift.Bool = false, brandId: Swift.String? = nil, brandLock: Swift.Bool = false, certificateUri: Foundation.URL? = nil, completedDateTime: Foundation.Date? = nil, copyRecipientData: Swift.String? = nil, createdDateTime: Foundation.Date? = nil, customFields: DocuSignAPI.DSAPICustomFields? = nil, customFieldsUri: Foundation.URL? = nil, declinedDateTime: Foundation.Date? = nil, deletedDateTime: Foundation.Date? = nil, deliveredDateTime: Foundation.Date? = nil, disableResponsiveDocument: Swift.Bool = false, documentBase64: Swift.String? = nil, documentsCombinedUri: Foundation.URL? = nil, documentsUri: Foundation.URL? = nil, emailBlurb: Swift.String? = nil, emailSettings: DocuSignAPI.DSAPIEmailSettings? = nil, emailSubject: Swift.String? = nil, enableWetSign: Swift.Bool = false, enforceSignerVisibility: Swift.Bool = false, envelopeAttachments: [DocuSignAPI.DSAPIAttachment]? = nil, envelopeCustomMetadata: DocuSignAPI.DSAPIEnvelopeCustomMetadata? = nil, envelopeDocuments: [DocuSignAPI.DSAPIEnvelopeDocument]? = nil, envelopeId: Swift.String? = nil, envelopeIdStamping: Swift.Bool = false, envelopeLocation: Swift.String? = nil, envelopeMetadata: DocuSignAPI.DSAPIEnvelopeMetadata? = nil, envelopeUri: Foundation.URL? = nil, expireAfter: Swift.String? = nil, expireDateTime: Foundation.Date? = nil, expireEnabled: Swift.String? = nil, externalEnvelopeId: Swift.String? = nil, folders: [DocuSignAPI.DSAPIFolder]? = nil, hasComments: Swift.Bool = false, hasFormDataChanged: Swift.Bool = false, hasWavFile: Swift.Bool = false, holder: Swift.String? = nil, initialSentDateTime: Foundation.Date? = nil, is21CFRPart11: Swift.Bool = false, isDynamicEnvelope: Swift.Bool = false, isSignatureProviderEnvelope: Swift.Bool = false, lastModifiedDateTime: Foundation.Date? = nil, location: Swift.String? = nil, lockInformation: DocuSignAPI.DSAPILockInformation? = nil, messageLock: Swift.Bool = false, notification: DocuSignAPI.DSAPINotification? = nil, notificationUri: Foundation.URL? = nil, powerForm: DocuSignAPI.DSAPIPowerForm? = nil, purgeCompletedDate: Foundation.Date? = nil, purgeRequestDate: Foundation.Date? = nil, purgeState: Swift.String? = nil, recipients: DocuSignAPI.DSAPIRecipients? = nil, recipientsLock: Swift.Bool = false, recipientsUri: Foundation.URL? = nil, sender: DocuSignAPI.DSAPIUserInfo? = nil, sentDateTime: Foundation.Date? = nil, signerCanSignOnMobile: Swift.Bool = false, signingLocation: Swift.String? = nil, status: Swift.String? = nil, statusChangedDateTime: Foundation.Date? = nil, statusDateTime: Foundation.Date? = nil, templatesUri: Foundation.URL? = nil, transactionId: Swift.String? = nil, useDisclosure: Swift.String? = nil, voidedDateTime: Foundation.Date? = nil, voidedReason: Swift.String? = nil, workflow: DocuSignAPI.DSAPIWorkflow? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct DSAPITemplateCustomFields : Swift.Codable {
  public var listCustomFields: [DocuSignAPI.DSAPIListCustomField]?
  public var textCustomFields: [DocuSignAPI.DSAPITextCustomField]?
  public init(listCustomFields: [DocuSignAPI.DSAPIListCustomField]? = nil, textCustomFields: [DocuSignAPI.DSAPITextCustomField]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPISenderEmailNotifications : Swift.Codable {
  @DocuSignAPI.BoolFromString public var changedSigner: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var clickwrapResponsesLimitNotificationEmail: Swift.String?
  @DocuSignAPI.BoolFromString public var commentsOnlyPrivateAndMention: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  @DocuSignAPI.BoolFromString public var commentsReceiveAll: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  @DocuSignAPI.BoolFromString public var deliveryFailed: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  @DocuSignAPI.BoolFromString public var envelopeComplete: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  @DocuSignAPI.BoolFromString public var offlineSigningFailed: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var powerformResponsesLimitNotificationEmail: Swift.String?
  @DocuSignAPI.BoolFromString public var purgeDocuments: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  @DocuSignAPI.BoolFromString public var recipientViewed: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  @DocuSignAPI.BoolFromString public var senderEnvelopeDeclined: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  @DocuSignAPI.BoolFromString public var withdrawnConsent: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public init(changedSigner: Swift.Bool = false, clickwrapResponsesLimitNotificationEmail: Swift.String? = nil, commentsOnlyPrivateAndMention: Swift.Bool = false, commentsReceiveAll: Swift.Bool = false, deliveryFailed: Swift.Bool = false, envelopeComplete: Swift.Bool = false, offlineSigningFailed: Swift.Bool = false, powerformResponsesLimitNotificationEmail: Swift.String? = nil, purgeDocuments: Swift.Bool = false, recipientViewed: Swift.Bool = false, senderEnvelopeDeclined: Swift.Bool = false, withdrawnConsent: Swift.Bool = false)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIDowngradePlanUpdateResponse : Swift.Codable {
  public var accountPaymentMethod: Swift.String?
  @DocuSignAPI.BoolFromString public var discountApplied: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var downgradeEffectiveDate: Foundation.Date?
  public var downgradePaymentCycle: Swift.String?
  public var downgradePlanId: Swift.String?
  public var downgradePlanName: Swift.String?
  public var downgradeRequestStatus: Swift.String?
  public var message: Swift.String?
  public var productId: Swift.String?
  public var promoCode: Swift.String?
  public var saleDiscount: Swift.String?
  public var saleDiscountPeriods: Swift.String?
  public var saleDiscountType: Swift.String?
  public init(accountPaymentMethod: Swift.String? = nil, discountApplied: Swift.Bool = false, downgradeEffectiveDate: Foundation.Date? = nil, downgradePaymentCycle: Swift.String? = nil, downgradePlanId: Swift.String? = nil, downgradePlanName: Swift.String? = nil, downgradeRequestStatus: Swift.String? = nil, message: Swift.String? = nil, productId: Swift.String? = nil, promoCode: Swift.String? = nil, saleDiscount: Swift.String? = nil, saleDiscountPeriods: Swift.String? = nil, saleDiscountType: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @objcMembers public class DSAPISsn : ObjectiveC.NSObject, Swift.Codable {
  @objc @DocuSignAPI.BoolFromString public var anchorAllowWhiteSpaceInCharacters: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorAllowWhiteSpaceInCharactersMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var anchorCaseSensitive: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorCaseSensitiveMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorHorizontalAlignment: Swift.String?
  @objc public var anchorHorizontalAlignmentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var anchorIgnoreIfNotPresent: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorIgnoreIfNotPresentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var anchorMatchWholeWord: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorMatchWholeWordMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorString: Swift.String?
  @objc public var anchorStringMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorTabProcessorVersion: Swift.String?
  @objc public var anchorTabProcessorVersionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorUnits: Swift.String?
  @objc public var anchorUnitsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorXOffset: Swift.String?
  @objc public var anchorXOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorYOffset: Swift.String?
  @objc public var anchorYOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var bold: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var boldMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var concealValueOnDocument: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var concealValueOnDocumentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var conditionalParentLabel: Swift.String?
  @objc public var conditionalParentLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var conditionalParentValue: Swift.String?
  @objc public var conditionalParentValueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var customTabId: Swift.String?
  @objc public var customTabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var disableAutoSize: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var disableAutoSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var documentId: Swift.String?
  @objc public var documentIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  @objc public var font: Swift.String?
  @objc public var fontColor: Swift.String?
  @objc public var fontColorMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var fontMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var fontSize: Swift.String?
  @objc public var fontSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var formOrder: Swift.String?
  @objc public var formOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var formPageLabel: Swift.String?
  @objc public var formPageLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var formPageNumber: Swift.String?
  @objc public var formPageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var height: Swift.String?
  @objc public var heightMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var italic: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var italicMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var localePolicy: DocuSignAPI.DSAPILocalePolicyTab?
  @objc @DocuSignAPI.BoolFromString public var locked: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var lockedMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var maxLength: Swift.String?
  @objc public var maxLengthMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var mergeField: DocuSignAPI.DSAPIMergeField?
  @objc public var mergeFieldXml: Swift.String?
  @objc public var name: Swift.String?
  @objc public var nameMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var originalValue: Swift.String?
  @objc public var originalValueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var pageNumber: Swift.String?
  @objc public var pageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var recipientId: Swift.String?
  @objc public var recipientIdGuid: Swift.String?
  @objc public var recipientIdGuidMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var recipientIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var requireAll: Swift.String?
  @objc public var requireAllMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var required: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var requiredMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var requireInitialOnSharedChange: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var requireInitialOnSharedChangeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var senderRequired: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var senderRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var shared: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var sharedMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var shareToRecipients: Swift.String?
  @objc public var shareToRecipientsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var smartContractInformation: DocuSignAPI.DSAPISmartContractInformation?
  @objc public var source: Swift.String?
  @objc public var status: Swift.String?
  @objc public var statusMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabGroupLabels: [Swift.String]?
  @objc public var tabGroupLabelsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabId: Swift.String?
  @objc public var tabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabLabel: Swift.String?
  @objc public var tabLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabOrder: Swift.String?
  @objc public var tabOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabType: Swift.String?
  @objc public var tabTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var templateLocked: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var templateLockedMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var templateRequired: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var templateRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tooltip: Swift.String?
  @objc public var toolTipMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var underline: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var underlineMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var validationMessage: Swift.String?
  @objc public var validationMessageMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var validationPattern: Swift.String?
  @objc public var validationPatternMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var value: Swift.String?
  @objc public var valueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var width: Swift.String?
  @objc public var widthMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var xPosition: Swift.String?
  @objc public var xPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var yPosition: Swift.String?
  @objc public var yPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public init(anchorAllowWhiteSpaceInCharacters: Swift.Bool = false, anchorAllowWhiteSpaceInCharactersMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorCaseSensitive: Swift.Bool = false, anchorCaseSensitiveMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorHorizontalAlignment: Swift.String? = nil, anchorHorizontalAlignmentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorIgnoreIfNotPresent: Swift.Bool = false, anchorIgnoreIfNotPresentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorMatchWholeWord: Swift.Bool = false, anchorMatchWholeWordMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorString: Swift.String? = nil, anchorStringMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorTabProcessorVersion: Swift.String? = nil, anchorTabProcessorVersionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorUnits: Swift.String? = nil, anchorUnitsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorXOffset: Swift.String? = nil, anchorXOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorYOffset: Swift.String? = nil, anchorYOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, bold: Swift.Bool = false, boldMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, concealValueOnDocument: Swift.Bool = false, concealValueOnDocumentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, conditionalParentLabel: Swift.String? = nil, conditionalParentLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, conditionalParentValue: Swift.String? = nil, conditionalParentValueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, customTabId: Swift.String? = nil, customTabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, disableAutoSize: Swift.Bool = false, disableAutoSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, documentId: Swift.String? = nil, documentIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, font: Swift.String? = nil, fontColor: Swift.String? = nil, fontColorMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, fontMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, fontSize: Swift.String? = nil, fontSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formOrder: Swift.String? = nil, formOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formPageLabel: Swift.String? = nil, formPageLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formPageNumber: Swift.String? = nil, formPageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, height: Swift.String? = nil, heightMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, italic: Swift.Bool = false, italicMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, localePolicy: DocuSignAPI.DSAPILocalePolicyTab? = nil, locked: Swift.Bool = false, lockedMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, maxLength: Swift.String? = nil, maxLengthMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, mergeField: DocuSignAPI.DSAPIMergeField? = nil, mergeFieldXml: Swift.String? = nil, name: Swift.String? = nil, nameMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, originalValue: Swift.String? = nil, originalValueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, pageNumber: Swift.String? = nil, pageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, recipientId: Swift.String? = nil, recipientIdGuid: Swift.String? = nil, recipientIdGuidMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, recipientIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, requireAll: Swift.String? = nil, requireAllMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, required: Swift.Bool = false, requiredMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, requireInitialOnSharedChange: Swift.Bool = false, requireInitialOnSharedChangeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, senderRequired: Swift.Bool = false, senderRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, shared: Swift.Bool = false, sharedMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, shareToRecipients: Swift.String? = nil, shareToRecipientsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, smartContractInformation: DocuSignAPI.DSAPISmartContractInformation? = nil, source: Swift.String? = nil, status: Swift.String? = nil, statusMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabGroupLabels: [Swift.String]? = nil, tabGroupLabelsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabId: Swift.String? = nil, tabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabLabel: Swift.String? = nil, tabLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabOrder: Swift.String? = nil, tabOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabType: Swift.String? = nil, tabTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, templateLocked: Swift.Bool = false, templateLockedMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, templateRequired: Swift.Bool = false, templateRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tooltip: Swift.String? = nil, toolTipMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, underline: Swift.Bool = false, underlineMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, validationMessage: Swift.String? = nil, validationMessageMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, validationPattern: Swift.String? = nil, validationPatternMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, value: Swift.String? = nil, valueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, width: Swift.String? = nil, widthMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, xPosition: Swift.String? = nil, xPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, yPosition: Swift.String? = nil, yPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIBulkSendBatchRequest : Swift.Codable {
  public var batchName: Swift.String?
  public init(batchName: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIFavoriteTemplatesContentItem : Swift.Codable {
  public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  public var favoritedDate: Foundation.Date?
  public var templateId: Swift.String?
  public init(errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, favoritedDate: Foundation.Date? = nil, templateId: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers open class BulkProcessDataSendAPI {
  open class func bulkProcessSendDeleteBulkProcessList(accountId: Swift.String, bulkProcessListId: Swift.String, processAction: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPIBulkProcessResult?, _ error: Swift.Error?) -> Swift.Void))
  open class func bulkProcessSendDeleteBulkProcessListWithRequestBuilder(accountId: Swift.String, bulkProcessListId: Swift.String, processAction: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIBulkProcessResult>
  open class func bulkProcessSendGetBulkProcessList(accountId: Swift.String, bulkProcessListId: Swift.String, processAction: Swift.String, completion: @escaping ((_ data: Swift.Void?, _ error: Swift.Error?) -> Swift.Void))
  open class func bulkProcessSendGetBulkProcessListWithRequestBuilder(accountId: Swift.String, bulkProcessListId: Swift.String, processAction: Swift.String) -> DocuSignAPI.RequestBuilder<Swift.Void>
  open class func bulkProcessSendPostBulkProcessRequestToQueue(accountId: Swift.String, bulkProcessListId: Swift.String, processAction: Swift.String, body: DocuSignAPI.DSAPIBulkProcessRequest? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIBulkProcessResponse?, _ error: Swift.Error?) -> Swift.Void))
  open class func bulkProcessSendPostBulkProcessRequestToQueueWithRequestBuilder(accountId: Swift.String, bulkProcessListId: Swift.String, processAction: Swift.String, body: DocuSignAPI.DSAPIBulkProcessRequest? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIBulkProcessResponse>
  open class func bulkProcessSendPutBulkProcessList(accountId: Swift.String, bulkProcessListId: Swift.String, processAction: Swift.String, completion: @escaping ((_ data: Swift.Void?, _ error: Swift.Error?) -> Swift.Void))
  open class func bulkProcessSendPutBulkProcessListWithRequestBuilder(accountId: Swift.String, bulkProcessListId: Swift.String, processAction: Swift.String) -> DocuSignAPI.RequestBuilder<Swift.Void>
  @objc deinit
}
public struct DSAPIBulkSendBatchStatus : Swift.Codable {
  public var action: Swift.String?
  public var actionStatus: Swift.String?
  public var batchId: Swift.String?
  public var batchName: Swift.String?
  public var batchSize: Swift.String?
  public var bulkErrors: [DocuSignAPI.DSAPIBulkSendErrorStatus]?
  public var envelopeIdOrTemplateId: Swift.String?
  public var envelopesInfo: DocuSignAPI.DSAPIBulkSendEnvelopesInfo?
  public var envelopesUri: Foundation.URL?
  public var failed: Swift.String?
  public var mailingListId: Swift.String?
  public var mailingListName: Swift.String?
  public var ownerUserId: Swift.String?
  public var queued: Swift.String?
  public var senderUserId: Swift.String?
  public var sent: Swift.String?
  public var submittedDate: Foundation.Date?
  public init(action: Swift.String? = nil, actionStatus: Swift.String? = nil, batchId: Swift.String? = nil, batchName: Swift.String? = nil, batchSize: Swift.String? = nil, bulkErrors: [DocuSignAPI.DSAPIBulkSendErrorStatus]? = nil, envelopeIdOrTemplateId: Swift.String? = nil, envelopesInfo: DocuSignAPI.DSAPIBulkSendEnvelopesInfo? = nil, envelopesUri: Foundation.URL? = nil, failed: Swift.String? = nil, mailingListId: Swift.String? = nil, mailingListName: Swift.String? = nil, ownerUserId: Swift.String? = nil, queued: Swift.String? = nil, senderUserId: Swift.String? = nil, sent: Swift.String? = nil, submittedDate: Foundation.Date? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIAccountMinimumPasswordLength : Swift.Codable {
  public var maximumLength: Swift.String?
  public var minimumLength: Swift.String?
  public init(maximumLength: Swift.String? = nil, minimumLength: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIWorkspaceItem : Swift.Codable {
  public var callerAuthorization: DocuSignAPI.DSAPIWorkspaceUserAuthorization?
  public var contentType: Swift.String?
  public var created: Swift.String?
  public var createdById: Swift.String?
  public var createdByInformation: DocuSignAPI.DSAPIWorkspaceUser?
  public var _extension: Swift.String?
  public var fileSize: Swift.String?
  public var fileUri: Foundation.URL?
  public var _id: Swift.String?
  public var isPublic: Swift.String?
  public var lastModified: Swift.String?
  public var lastModifiedById: Swift.String?
  public var lastModifiedByInformation: DocuSignAPI.DSAPIWorkspaceUser?
  public var name: Swift.String?
  public var pageCount: Swift.String?
  public var parentFolderId: Swift.String?
  public var parentFolderUri: Foundation.URL?
  public var sha256: Swift.String?
  public var thumbHeight: Swift.String?
  public var thumbnail: DocuSignAPI.DSAPIPage?
  public var thumbWidth: Swift.String?
  public var type: Swift.String?
  public var uri: Foundation.URL?
  public var userAuthorization: DocuSignAPI.DSAPIWorkspaceUserAuthorization?
  public init(callerAuthorization: DocuSignAPI.DSAPIWorkspaceUserAuthorization? = nil, contentType: Swift.String? = nil, created: Swift.String? = nil, createdById: Swift.String? = nil, createdByInformation: DocuSignAPI.DSAPIWorkspaceUser? = nil, _extension: Swift.String? = nil, fileSize: Swift.String? = nil, fileUri: Foundation.URL? = nil, _id: Swift.String? = nil, isPublic: Swift.String? = nil, lastModified: Swift.String? = nil, lastModifiedById: Swift.String? = nil, lastModifiedByInformation: DocuSignAPI.DSAPIWorkspaceUser? = nil, name: Swift.String? = nil, pageCount: Swift.String? = nil, parentFolderId: Swift.String? = nil, parentFolderUri: Foundation.URL? = nil, sha256: Swift.String? = nil, thumbHeight: Swift.String? = nil, thumbnail: DocuSignAPI.DSAPIPage? = nil, thumbWidth: Swift.String? = nil, type: Swift.String? = nil, uri: Foundation.URL? = nil, userAuthorization: DocuSignAPI.DSAPIWorkspaceUserAuthorization? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case callerAuthorization
    case contentType
    case created
    case createdById
    case createdByInformation
    case _extension
    case fileSize
    case fileUri
    case _id
    case isPublic
    case lastModified
    case lastModifiedById
    case lastModifiedByInformation
    case name
    case pageCount
    case parentFolderId
    case parentFolderUri
    case sha256
    case thumbHeight
    case thumbnail
    case thumbWidth
    case type
    case uri
    case userAuthorization
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIDocumentHtmlDisplayAnchor : Swift.Codable {
  public var caseSensitive: Swift.Bool
  public var displaySettings: DocuSignAPI.DSAPIDocumentHtmlDisplaySettings?
  public var endAnchor: Swift.String?
  public var removeEndAnchor: Swift.Bool
  public var removeStartAnchor: Swift.Bool
  public var startAnchor: Swift.String?
  public init(caseSensitive: Swift.Bool = false, displaySettings: DocuSignAPI.DSAPIDocumentHtmlDisplaySettings? = nil, endAnchor: Swift.String? = nil, removeEndAnchor: Swift.Bool = false, removeStartAnchor: Swift.Bool = false, startAnchor: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPITemplateDocumentVisibilityList : Swift.Codable {
  public var documentVisibility: [DocuSignAPI.DSAPIDocumentVisibility]?
  public init(documentVisibility: [DocuSignAPI.DSAPIDocumentVisibility]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPINotarySeal : Swift.Codable {
  @DocuSignAPI.BoolFromString public var anchorAllowWhiteSpaceInCharacters: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var anchorAllowWhiteSpaceInCharactersMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var anchorCaseSensitive: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var anchorCaseSensitiveMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorHorizontalAlignment: Swift.String?
  public var anchorHorizontalAlignmentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var anchorIgnoreIfNotPresent: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var anchorIgnoreIfNotPresentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var anchorMatchWholeWord: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var anchorMatchWholeWordMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorString: Swift.String?
  public var anchorStringMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorTabProcessorVersion: Swift.String?
  public var anchorTabProcessorVersionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorUnits: Swift.String?
  public var anchorUnitsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorXOffset: Swift.String?
  public var anchorXOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorYOffset: Swift.String?
  public var anchorYOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var conditionalParentLabel: Swift.String?
  public var conditionalParentLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var conditionalParentValue: Swift.String?
  public var conditionalParentValueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var customTabId: Swift.String?
  public var customTabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var documentId: Swift.String?
  public var documentIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  public var formOrder: Swift.String?
  public var formOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var formPageLabel: Swift.String?
  public var formPageLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var formPageNumber: Swift.String?
  public var formPageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var height: Swift.String?
  public var heightMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var mergeField: DocuSignAPI.DSAPIMergeField?
  public var mergeFieldXml: Swift.String?
  public var name: Swift.String?
  public var nameMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var pageNumber: Swift.String?
  public var pageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var recipientId: Swift.String?
  public var recipientIdGuid: Swift.String?
  public var recipientIdGuidMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var recipientIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var scaleValue: Swift.String?
  public var scaleValueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var smartContractInformation: DocuSignAPI.DSAPISmartContractInformation?
  public var source: Swift.String?
  public var status: Swift.String?
  public var statusMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var tabGroupLabels: [Swift.String]?
  public var tabGroupLabelsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var tabId: Swift.String?
  public var tabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var tabLabel: Swift.String?
  public var tabLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var tabOrder: Swift.String?
  public var tabOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var tabType: Swift.String?
  public var tabTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var templateLocked: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var templateLockedMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var templateRequired: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var templateRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var tooltip: Swift.String?
  public var toolTipMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var width: Swift.String?
  public var widthMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var xPosition: Swift.String?
  public var xPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var yPosition: Swift.String?
  public var yPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public init(anchorAllowWhiteSpaceInCharacters: Swift.Bool = false, anchorAllowWhiteSpaceInCharactersMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorCaseSensitive: Swift.Bool = false, anchorCaseSensitiveMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorHorizontalAlignment: Swift.String? = nil, anchorHorizontalAlignmentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorIgnoreIfNotPresent: Swift.Bool = false, anchorIgnoreIfNotPresentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorMatchWholeWord: Swift.Bool = false, anchorMatchWholeWordMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorString: Swift.String? = nil, anchorStringMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorTabProcessorVersion: Swift.String? = nil, anchorTabProcessorVersionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorUnits: Swift.String? = nil, anchorUnitsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorXOffset: Swift.String? = nil, anchorXOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorYOffset: Swift.String? = nil, anchorYOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, conditionalParentLabel: Swift.String? = nil, conditionalParentLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, conditionalParentValue: Swift.String? = nil, conditionalParentValueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, customTabId: Swift.String? = nil, customTabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, documentId: Swift.String? = nil, documentIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, formOrder: Swift.String? = nil, formOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formPageLabel: Swift.String? = nil, formPageLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formPageNumber: Swift.String? = nil, formPageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, height: Swift.String? = nil, heightMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, mergeField: DocuSignAPI.DSAPIMergeField? = nil, mergeFieldXml: Swift.String? = nil, name: Swift.String? = nil, nameMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, pageNumber: Swift.String? = nil, pageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, recipientId: Swift.String? = nil, recipientIdGuid: Swift.String? = nil, recipientIdGuidMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, recipientIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, scaleValue: Swift.String? = nil, scaleValueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, smartContractInformation: DocuSignAPI.DSAPISmartContractInformation? = nil, source: Swift.String? = nil, status: Swift.String? = nil, statusMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabGroupLabels: [Swift.String]? = nil, tabGroupLabelsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabId: Swift.String? = nil, tabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabLabel: Swift.String? = nil, tabLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabOrder: Swift.String? = nil, tabOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabType: Swift.String? = nil, tabTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, templateLocked: Swift.Bool = false, templateLockedMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, templateRequired: Swift.Bool = false, templateRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tooltip: Swift.String? = nil, toolTipMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, width: Swift.String? = nil, widthMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, xPosition: Swift.String? = nil, xPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, yPosition: Swift.String? = nil, yPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIBulkSendingCopyRecipient : Swift.Codable {
  public var accessCode: Swift.String?
  public var clientUserId: Swift.String?
  public var customFields: [Swift.String]?
  public var deliveryMethod: Swift.String?
  public var email: Swift.String?
  public var emailNotification: DocuSignAPI.DSAPIRecipientEmailNotification?
  public var embeddedRecipientStartURL: Swift.String?
  public var faxNumber: Swift.String?
  public var hostEmail: Swift.String?
  public var hostName: Swift.String?
  public var idCheckConfigurationName: Swift.String?
  public var idCheckInformationInput: DocuSignAPI.DSAPIIdCheckInformationInput?
  public var identificationMethod: Swift.String?
  public var name: Swift.String?
  public var note: Swift.String?
  public var phoneAuthentication: DocuSignAPI.DSAPIRecipientPhoneAuthentication?
  public var recipientId: Swift.String?
  public var recipientSignatureProviders: [DocuSignAPI.DSAPIRecipientSignatureProvider]?
  public var roleName: Swift.String?
  public var signerName: Swift.String?
  public var signingGroupId: Swift.String?
  public var smsAuthentication: DocuSignAPI.DSAPIRecipientSMSAuthentication?
  public var socialAuthentications: [DocuSignAPI.DSAPISocialAuthentication]?
  public var tabs: [DocuSignAPI.DSAPIBulkSendingCopyTab]?
  public init(accessCode: Swift.String? = nil, clientUserId: Swift.String? = nil, customFields: [Swift.String]? = nil, deliveryMethod: Swift.String? = nil, email: Swift.String? = nil, emailNotification: DocuSignAPI.DSAPIRecipientEmailNotification? = nil, embeddedRecipientStartURL: Swift.String? = nil, faxNumber: Swift.String? = nil, hostEmail: Swift.String? = nil, hostName: Swift.String? = nil, idCheckConfigurationName: Swift.String? = nil, idCheckInformationInput: DocuSignAPI.DSAPIIdCheckInformationInput? = nil, identificationMethod: Swift.String? = nil, name: Swift.String? = nil, note: Swift.String? = nil, phoneAuthentication: DocuSignAPI.DSAPIRecipientPhoneAuthentication? = nil, recipientId: Swift.String? = nil, recipientSignatureProviders: [DocuSignAPI.DSAPIRecipientSignatureProvider]? = nil, roleName: Swift.String? = nil, signerName: Swift.String? = nil, signingGroupId: Swift.String? = nil, smsAuthentication: DocuSignAPI.DSAPIRecipientSMSAuthentication? = nil, socialAuthentications: [DocuSignAPI.DSAPISocialAuthentication]? = nil, tabs: [DocuSignAPI.DSAPIBulkSendingCopyTab]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIBillingCharge : Swift.Codable {
  public var allowedQuantity: Swift.String?
  public var blocked: Swift.String?
  public var chargeName: Swift.String?
  public var chargeType: Swift.String?
  public var chargeUnitOfMeasure: Swift.String?
  public var discounts: [DocuSignAPI.DSAPIBillingDiscount]?
  public var firstEffectiveDate: Foundation.Date?
  public var includedQuantity: Swift.String?
  public var incrementalQuantity: Swift.String?
  public var lastEffectiveDate: Foundation.Date?
  public var prices: [DocuSignAPI.DSAPIBillingPrice]?
  public var unitPrice: Swift.String?
  public var usedQuantity: Swift.String?
  public init(allowedQuantity: Swift.String? = nil, blocked: Swift.String? = nil, chargeName: Swift.String? = nil, chargeType: Swift.String? = nil, chargeUnitOfMeasure: Swift.String? = nil, discounts: [DocuSignAPI.DSAPIBillingDiscount]? = nil, firstEffectiveDate: Foundation.Date? = nil, includedQuantity: Swift.String? = nil, incrementalQuantity: Swift.String? = nil, lastEffectiveDate: Foundation.Date? = nil, prices: [DocuSignAPI.DSAPIBillingPrice]? = nil, unitPrice: Swift.String? = nil, usedQuantity: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPICommentPublish : Swift.Codable {
  public var _id: Swift.String?
  public var mentions: [Swift.String]?
  public var text: Swift.String?
  public var threadAnchorKeys: [Swift.String : Swift.String]?
  public var threadId: Swift.String?
  public var visibleTo: [Swift.String]?
  public init(_id: Swift.String? = nil, mentions: [Swift.String]? = nil, text: Swift.String? = nil, threadAnchorKeys: [Swift.String : Swift.String]? = nil, threadId: Swift.String? = nil, visibleTo: [Swift.String]? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case _id
    case mentions
    case text
    case threadAnchorKeys
    case threadId
    case visibleTo
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIMatchBox : Swift.Codable {
  public var height: Swift.String?
  public var pageNumber: Swift.String?
  public var width: Swift.String?
  public var xPosition: Swift.String?
  public var yPosition: Swift.String?
  public init(height: Swift.String? = nil, pageNumber: Swift.String? = nil, width: Swift.String? = nil, xPosition: Swift.String? = nil, yPosition: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIPageImages : Swift.Codable {
  public var endPosition: Swift.String?
  public var nextUri: Foundation.URL?
  public var pages: [DocuSignAPI.DSAPIPage]?
  public var previousUri: Foundation.URL?
  public var resultSetSize: Swift.String?
  public var startPosition: Swift.String?
  public var totalSetSize: Swift.String?
  public init(endPosition: Swift.String? = nil, nextUri: Foundation.URL? = nil, pages: [DocuSignAPI.DSAPIPage]? = nil, previousUri: Foundation.URL? = nil, resultSetSize: Swift.String? = nil, startPosition: Swift.String? = nil, totalSetSize: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPISigningGroup : Swift.Codable {
  public var created: Swift.String?
  public var createdBy: Swift.String?
  public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  public var groupEmail: Swift.String?
  public var groupName: Swift.String?
  public var groupType: Swift.String?
  public var modified: Swift.String?
  public var modifiedBy: Swift.String?
  public var signingGroupId: Swift.String?
  public var users: [DocuSignAPI.DSAPISigningGroupUser]?
  public init(created: Swift.String? = nil, createdBy: Swift.String? = nil, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, groupEmail: Swift.String? = nil, groupName: Swift.String? = nil, groupType: Swift.String? = nil, modified: Swift.String? = nil, modifiedBy: Swift.String? = nil, signingGroupId: Swift.String? = nil, users: [DocuSignAPI.DSAPISigningGroupUser]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIDowngradeBillingPlanInformation : Swift.Codable {
  public var downgradeEventType: Swift.String?
  public var planInformation: DocuSignAPI.DSAPIPlanInformation?
  public var promoCode: Swift.String?
  public var saleDiscount: Swift.String?
  public var saleDiscountPeriods: Swift.String?
  public var saleDiscountType: Swift.String?
  public init(downgradeEventType: Swift.String? = nil, planInformation: DocuSignAPI.DSAPIPlanInformation? = nil, promoCode: Swift.String? = nil, saleDiscount: Swift.String? = nil, saleDiscountPeriods: Swift.String? = nil, saleDiscountType: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIAccountPasswordExpirePasswordDays : Swift.Codable {
  public var maximumDays: Swift.String?
  public var minimumDays: Swift.String?
  public init(maximumDays: Swift.String? = nil, minimumDays: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIBillingDiscount : Swift.Codable {
  public var beginQuantity: Swift.String?
  public var discount: Swift.String?
  public var endQuantity: Swift.String?
  public init(beginQuantity: Swift.String? = nil, discount: Swift.String? = nil, endQuantity: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIBulkProcessingListSummary : Swift.Codable {
  public var bulkProcessListId: Swift.String?
  public var createdByUser: Swift.String?
  public var createdDate: Foundation.Date?
  public var name: Swift.String?
  public init(bulkProcessListId: Swift.String? = nil, createdByUser: Swift.String? = nil, createdDate: Foundation.Date? = nil, name: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIBulkSendRequest : Swift.Codable {
  public var batchName: Swift.String?
  public var envelopeOrTemplateId: Swift.String?
  public init(batchName: Swift.String? = nil, envelopeOrTemplateId: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIForgottenPasswordInformation : Swift.Codable {
  public var forgottenPasswordAnswer1: Swift.String?
  public var forgottenPasswordAnswer2: Swift.String?
  public var forgottenPasswordAnswer3: Swift.String?
  public var forgottenPasswordAnswer4: Swift.String?
  public var forgottenPasswordQuestion1: Swift.String?
  public var forgottenPasswordQuestion2: Swift.String?
  public var forgottenPasswordQuestion3: Swift.String?
  public var forgottenPasswordQuestion4: Swift.String?
  public init(forgottenPasswordAnswer1: Swift.String? = nil, forgottenPasswordAnswer2: Swift.String? = nil, forgottenPasswordAnswer3: Swift.String? = nil, forgottenPasswordAnswer4: Swift.String? = nil, forgottenPasswordQuestion1: Swift.String? = nil, forgottenPasswordQuestion2: Swift.String? = nil, forgottenPasswordQuestion3: Swift.String? = nil, forgottenPasswordQuestion4: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPINewUser : Swift.Codable {
  public var apiPassword: Swift.String?
  public var createdDateTime: Foundation.Date?
  public var email: Swift.String?
  public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  public var membershipId: Swift.String?
  public var permissionProfileId: Swift.String?
  public var permissionProfileName: Swift.String?
  public var uri: Foundation.URL?
  public var userId: Swift.String?
  public var userName: Swift.String?
  public var userStatus: Swift.String?
  public init(apiPassword: Swift.String? = nil, createdDateTime: Foundation.Date? = nil, email: Swift.String? = nil, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, membershipId: Swift.String? = nil, permissionProfileId: Swift.String? = nil, permissionProfileName: Swift.String? = nil, uri: Foundation.URL? = nil, userId: Swift.String? = nil, userName: Swift.String? = nil, userStatus: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIUserSharedItem : Swift.Codable {
  public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  public var shared: Swift.String?
  public var user: DocuSignAPI.DSAPIUserInfo?
  public init(errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, shared: Swift.String? = nil, user: DocuSignAPI.DSAPIUserInfo? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIBulkSendBatchSummary : Swift.Codable {
  public var batchId: Swift.String?
  public var batchName: Swift.String?
  public var batchSize: Swift.String?
  public var batchUri: Foundation.URL?
  public var failed: Swift.String?
  public var queued: Swift.String?
  public var sent: Swift.String?
  public var submittedDate: Foundation.Date?
  public init(batchId: Swift.String? = nil, batchName: Swift.String? = nil, batchSize: Swift.String? = nil, batchUri: Foundation.URL? = nil, failed: Swift.String? = nil, queued: Swift.String? = nil, sent: Swift.String? = nil, submittedDate: Foundation.Date? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIContactUpdateResponse : Swift.Codable {
  public var contacts: [DocuSignAPI.DSAPIContact]?
  public init(contacts: [DocuSignAPI.DSAPIContact]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIAccountBillingPlan : Swift.Codable {
  public var addOns: [DocuSignAPI.DSAPIAddOn]?
  public var appStoreReceiptExpirationDate: Foundation.Date?
  public var appStoreReceiptPurchaseDate: Foundation.Date?
  @DocuSignAPI.BoolFromString public var canCancelRenewal: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  @DocuSignAPI.BoolFromString public var canUpgrade: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var currencyCode: Swift.String?
  public var downgradePlanInformation: DocuSignAPI.DSAPIDowngradePlanUpdateResponse?
  @DocuSignAPI.BoolFromString public var enableSupport: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var includedSeats: Swift.String?
  public var incrementalSeats: Swift.String?
  @DocuSignAPI.BoolFromString public var isDowngrade: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var notificationType: Swift.String?
  public var otherDiscountPercent: Swift.String?
  public var paymentCycle: Swift.String?
  public var paymentMethod: Swift.String?
  public var perSeatPrice: Swift.String?
  public var planClassification: Swift.String?
  public var planFeatureSets: [DocuSignAPI.DSAPIFeatureSet]?
  public var planId: Swift.String?
  public var planName: Swift.String?
  public var planStartDate: Foundation.Date?
  public var productId: Swift.String?
  public var renewalDate: Foundation.Date?
  public var renewalStatus: Swift.String?
  public var seatDiscounts: [DocuSignAPI.DSAPISeatDiscount]?
  public var subscriptionStartDate: Foundation.Date?
  public var supportIncidentFee: Swift.String?
  public var supportPlanFee: Swift.String?
  public var taxExemptId: Swift.String?
  public init(addOns: [DocuSignAPI.DSAPIAddOn]? = nil, appStoreReceiptExpirationDate: Foundation.Date? = nil, appStoreReceiptPurchaseDate: Foundation.Date? = nil, canCancelRenewal: Swift.Bool = false, canUpgrade: Swift.Bool = false, currencyCode: Swift.String? = nil, downgradePlanInformation: DocuSignAPI.DSAPIDowngradePlanUpdateResponse? = nil, enableSupport: Swift.Bool = false, includedSeats: Swift.String? = nil, incrementalSeats: Swift.String? = nil, isDowngrade: Swift.Bool = false, notificationType: Swift.String? = nil, otherDiscountPercent: Swift.String? = nil, paymentCycle: Swift.String? = nil, paymentMethod: Swift.String? = nil, perSeatPrice: Swift.String? = nil, planClassification: Swift.String? = nil, planFeatureSets: [DocuSignAPI.DSAPIFeatureSet]? = nil, planId: Swift.String? = nil, planName: Swift.String? = nil, planStartDate: Foundation.Date? = nil, productId: Swift.String? = nil, renewalDate: Foundation.Date? = nil, renewalStatus: Swift.String? = nil, seatDiscounts: [DocuSignAPI.DSAPISeatDiscount]? = nil, subscriptionStartDate: Foundation.Date? = nil, supportIncidentFee: Swift.String? = nil, supportPlanFee: Swift.String? = nil, taxExemptId: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @objcMembers public class DSAPIUserAccountManagementGranularInformation : ObjectiveC.NSObject, Swift.Codable {
  @objc public var canManageAccountSecuritySettings: Swift.String?
  @objc public var canManageAccountSecuritySettingsMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc public var canManageAccountSettings: Swift.String?
  @objc public var canManageAccountSettingsMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc public var canManageAdmins: Swift.String?
  @objc public var canManageAdminsMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc public var canManageConnect: Swift.String?
  @objc public var canManageConnectMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc public var canManageDocumentRetention: Swift.String?
  @objc public var canManageDocumentRetentionMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc public var canManageEnvelopeTransfer: Swift.String?
  @objc public var canManageEnvelopeTransferMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc public var canManageGroupsButNotUsers: Swift.String?
  @objc public var canManageGroupsButNotUsersMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc public var canManageReporting: Swift.String?
  @objc public var canManageReportingMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc public var canManageSharing: Swift.String?
  @objc public var canManageSharingMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc public var canManageSigningGroups: Swift.String?
  @objc public var canManageSigningGroupsMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc public var canManageUsers: Swift.String?
  @objc public var canManageUsersMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc public var canViewUsers: Swift.String?
  @objc public init(canManageAccountSecuritySettings: Swift.String? = nil, canManageAccountSecuritySettingsMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, canManageAccountSettings: Swift.String? = nil, canManageAccountSettingsMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, canManageAdmins: Swift.String? = nil, canManageAdminsMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, canManageConnect: Swift.String? = nil, canManageConnectMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, canManageDocumentRetention: Swift.String? = nil, canManageDocumentRetentionMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, canManageEnvelopeTransfer: Swift.String? = nil, canManageEnvelopeTransferMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, canManageGroupsButNotUsers: Swift.String? = nil, canManageGroupsButNotUsersMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, canManageReporting: Swift.String? = nil, canManageReportingMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, canManageSharing: Swift.String? = nil, canManageSharingMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, canManageSigningGroups: Swift.String? = nil, canManageSigningGroupsMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, canManageUsers: Swift.String? = nil, canManageUsersMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, canViewUsers: Swift.String? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIPolyLineOverlay : Swift.Codable {
  @DocuSignAPI.BoolFromString public var anchorAllowWhiteSpaceInCharacters: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var anchorAllowWhiteSpaceInCharactersMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var anchorCaseSensitive: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var anchorCaseSensitiveMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorHorizontalAlignment: Swift.String?
  public var anchorHorizontalAlignmentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var anchorIgnoreIfNotPresent: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var anchorIgnoreIfNotPresentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var anchorMatchWholeWord: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var anchorMatchWholeWordMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorString: Swift.String?
  public var anchorStringMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorTabProcessorVersion: Swift.String?
  public var anchorTabProcessorVersionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorUnits: Swift.String?
  public var anchorUnitsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorXOffset: Swift.String?
  public var anchorXOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorYOffset: Swift.String?
  public var anchorYOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var conditionalParentLabel: Swift.String?
  public var conditionalParentLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var conditionalParentValue: Swift.String?
  public var conditionalParentValueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var customTabId: Swift.String?
  public var customTabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var documentId: Swift.String?
  public var documentIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  public var formOrder: Swift.String?
  public var formOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var formPageLabel: Swift.String?
  public var formPageLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var formPageNumber: Swift.String?
  public var formPageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var graphicsContext: DocuSignAPI.DSAPIGraphicsContext?
  public var height: Swift.String?
  public var heightMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var locked: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var lockedMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var mergeField: DocuSignAPI.DSAPIMergeField?
  public var mergeFieldXml: Swift.String?
  public var overlayType: Swift.String?
  public var overlayTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var pageNumber: Swift.String?
  public var pageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var polyLines: [DocuSignAPI.DSAPIPolyLine]?
  public var recipientId: Swift.String?
  public var recipientIdGuid: Swift.String?
  public var recipientIdGuidMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var recipientIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var shared: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var sharedMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var smartContractInformation: DocuSignAPI.DSAPISmartContractInformation?
  public var source: Swift.String?
  public var status: Swift.String?
  public var statusMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var tabGroupLabels: [Swift.String]?
  public var tabGroupLabelsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var tabId: Swift.String?
  public var tabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var tabLabel: Swift.String?
  public var tabOrder: Swift.String?
  public var tabOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var tabType: Swift.String?
  public var tabTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var templateLocked: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var templateLockedMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var templateRequired: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var templateRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var tooltip: Swift.String?
  public var toolTipMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var width: Swift.String?
  public var widthMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var xPosition: Swift.String?
  public var xPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var yPosition: Swift.String?
  public var yPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public init(anchorAllowWhiteSpaceInCharacters: Swift.Bool = false, anchorAllowWhiteSpaceInCharactersMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorCaseSensitive: Swift.Bool = false, anchorCaseSensitiveMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorHorizontalAlignment: Swift.String? = nil, anchorHorizontalAlignmentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorIgnoreIfNotPresent: Swift.Bool = false, anchorIgnoreIfNotPresentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorMatchWholeWord: Swift.Bool = false, anchorMatchWholeWordMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorString: Swift.String? = nil, anchorStringMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorTabProcessorVersion: Swift.String? = nil, anchorTabProcessorVersionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorUnits: Swift.String? = nil, anchorUnitsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorXOffset: Swift.String? = nil, anchorXOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorYOffset: Swift.String? = nil, anchorYOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, conditionalParentLabel: Swift.String? = nil, conditionalParentLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, conditionalParentValue: Swift.String? = nil, conditionalParentValueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, customTabId: Swift.String? = nil, customTabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, documentId: Swift.String? = nil, documentIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, formOrder: Swift.String? = nil, formOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formPageLabel: Swift.String? = nil, formPageLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formPageNumber: Swift.String? = nil, formPageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, graphicsContext: DocuSignAPI.DSAPIGraphicsContext? = nil, height: Swift.String? = nil, heightMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, locked: Swift.Bool = false, lockedMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, mergeField: DocuSignAPI.DSAPIMergeField? = nil, mergeFieldXml: Swift.String? = nil, overlayType: Swift.String? = nil, overlayTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, pageNumber: Swift.String? = nil, pageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, polyLines: [DocuSignAPI.DSAPIPolyLine]? = nil, recipientId: Swift.String? = nil, recipientIdGuid: Swift.String? = nil, recipientIdGuidMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, recipientIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, shared: Swift.Bool = false, sharedMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, smartContractInformation: DocuSignAPI.DSAPISmartContractInformation? = nil, source: Swift.String? = nil, status: Swift.String? = nil, statusMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabGroupLabels: [Swift.String]? = nil, tabGroupLabelsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabId: Swift.String? = nil, tabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabLabel: Swift.String? = nil, tabOrder: Swift.String? = nil, tabOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabType: Swift.String? = nil, tabTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, templateLocked: Swift.Bool = false, templateLockedMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, templateRequired: Swift.Bool = false, templateRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tooltip: Swift.String? = nil, toolTipMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, width: Swift.String? = nil, widthMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, xPosition: Swift.String? = nil, xPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, yPosition: Swift.String? = nil, yPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @objcMembers public class DSAPIWitness : ObjectiveC.NSObject, Swift.Codable {
  @objc public var accessCode: Swift.String?
  @objc public var accessCodeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var addAccessCodeToEmail: Swift.String?
  @objc public var additionalNotifications: [DocuSignAPI.DSAPIRecipientAdditionalNotification]?
  @objc public var agentCanEditEmail: Swift.String?
  @objc public var agentCanEditName: Swift.String?
  @objc @DocuSignAPI.BoolFromString public var allowSystemOverrideForLockedRecipient: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc @DocuSignAPI.BoolFromString public var autoNavigation: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var autoRespondedReason: Swift.String?
  @objc public var bulkRecipientsUri: Foundation.URL?
  @objc @DocuSignAPI.BoolFromString public var canSignOffline: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var clientUserId: Swift.String?
  @objc public var completedCount: Swift.String?
  @objc public var creationReason: Swift.String?
  @objc public var customFields: [Swift.String]?
  @objc public var declinedDateTime: Foundation.Date?
  @objc public var declinedReason: Swift.String?
  @objc @DocuSignAPI.BoolFromString public var defaultRecipient: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  public var delegatedBy: DocuSignAPI.DSAPIDelegationInfo?
  public var delegatedTo: [DocuSignAPI.DSAPIDelegationInfo]?
  @objc public var deliveredDateTime: Foundation.Date?
  @objc public var deliveryMethod: Swift.String?
  @objc public var deliveryMethodMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var designatorId: Swift.String?
  @objc public var designatorIdGuid: Swift.String?
  @objc public var documentVisibility: [DocuSignAPI.DSAPIDocumentVisibility]?
  @objc public var email: Swift.String?
  @objc public var emailMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var emailNotification: DocuSignAPI.DSAPIRecipientEmailNotification?
  @objc public var emailRecipientPostSigningURL: Swift.String?
  @objc public var embeddedRecipientStartURL: Swift.String?
  @objc public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  @objc public var excludedDocuments: [Swift.String]?
  @objc public var faxNumber: Swift.String?
  @objc public var faxNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var firstName: Swift.String?
  @objc public var firstNameMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var fullName: Swift.String?
  @objc public var fullNameMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var idCheckConfigurationName: Swift.String?
  @objc public var idCheckConfigurationNameMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var idCheckInformationInput: DocuSignAPI.DSAPIIdCheckInformationInput?
  public var identityVerification: DocuSignAPI.DSAPIRecipientIdentityVerification?
  @objc @DocuSignAPI.BoolFromString public var inheritEmailNotificationConfiguration: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var isBulkRecipient: Swift.String?
  @objc public var isBulkRecipientMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var lastName: Swift.String?
  @objc public var lastNameMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var lockedRecipientPhoneAuthEditable: Swift.String?
  @objc public var lockedRecipientSmsEditable: Swift.String?
  @objc public var name: Swift.String?
  @objc public var nameMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var notaryId: Swift.String?
  @objc public var notarySignerEmailSent: Swift.String?
  @objc public var note: Swift.String?
  @objc public var noteMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var offlineAttributes: DocuSignAPI.DSAPIOfflineAttributes?
  public var phoneAuthentication: DocuSignAPI.DSAPIRecipientPhoneAuthentication?
  public var phoneNumber: DocuSignAPI.DSAPIRecipientPhoneNumber?
  public var proofFile: DocuSignAPI.DSAPIRecipientProofFile?
  @objc public var recipientAttachments: [DocuSignAPI.DSAPIRecipientAttachment]?
  public var recipientAuthenticationStatus: DocuSignAPI.DSAPIAuthenticationStatus?
  public var recipientFeatureMetadata: [DocuSignAPI.DSAPIFeatureAvailableMetadata]?
  @objc public var recipientId: Swift.String?
  @objc public var recipientIdGuid: Swift.String?
  public var recipientSignatureProviders: [DocuSignAPI.DSAPIRecipientSignatureProvider]?
  @objc @DocuSignAPI.BoolFromString public var recipientSuppliesTabs: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var recipientType: Swift.String?
  @objc public var recipientTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var requireIdLookup: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var requireIdLookupMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var requireSignerCertificate: Swift.String?
  @objc @DocuSignAPI.BoolFromString public var requireSignOnPaper: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc @DocuSignAPI.BoolFromString public var requireUploadSignature: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var roleName: Swift.String?
  @objc public var routingOrder: Swift.String?
  @objc public var routingOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var sentDateTime: Foundation.Date?
  @objc public var signatureInfo: DocuSignAPI.DSAPIRecipientSignatureInformation?
  @objc public var signedDateTime: Foundation.Date?
  @objc @DocuSignAPI.BoolFromString public var signInEachLocation: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var signInEachLocationMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var signingGroupId: Swift.String?
  @objc public var signingGroupIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var signingGroupName: Swift.String?
  @objc public var signingGroupUsers: [DocuSignAPI.DSAPIUserInfo]?
  @objc public var smsAuthentication: DocuSignAPI.DSAPIRecipientSMSAuthentication?
  @objc public var socialAuthentications: [DocuSignAPI.DSAPISocialAuthentication]?
  @objc public var status: Swift.String?
  @objc public var statusCode: Swift.String?
  @objc @DocuSignAPI.BoolFromString public var suppressEmails: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var tabs: DocuSignAPI.DSAPITabs?
  @objc @DocuSignAPI.BoolFromString public var templateLocked: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc @DocuSignAPI.BoolFromString public var templateRequired: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var totalTabCount: Swift.String?
  @objc public var userId: Swift.String?
  @objc public var witnessFor: Swift.String?
  @objc public var witnessForGuid: Swift.String?
  public init(accessCode: Swift.String? = nil, accessCodeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, addAccessCodeToEmail: Swift.String? = nil, additionalNotifications: [DocuSignAPI.DSAPIRecipientAdditionalNotification]? = nil, agentCanEditEmail: Swift.String? = nil, agentCanEditName: Swift.String? = nil, allowSystemOverrideForLockedRecipient: Swift.Bool = false, autoNavigation: Swift.Bool = false, autoRespondedReason: Swift.String? = nil, bulkRecipientsUri: Foundation.URL? = nil, canSignOffline: Swift.Bool = false, clientUserId: Swift.String? = nil, completedCount: Swift.String? = nil, creationReason: Swift.String? = nil, customFields: [Swift.String]? = nil, declinedDateTime: Foundation.Date? = nil, declinedReason: Swift.String? = nil, defaultRecipient: Swift.Bool = false, delegatedBy: DocuSignAPI.DSAPIDelegationInfo? = nil, delegatedTo: [DocuSignAPI.DSAPIDelegationInfo]? = nil, deliveredDateTime: Foundation.Date? = nil, deliveryMethod: Swift.String? = nil, deliveryMethodMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, designatorId: Swift.String? = nil, designatorIdGuid: Swift.String? = nil, documentVisibility: [DocuSignAPI.DSAPIDocumentVisibility]? = nil, email: Swift.String? = nil, emailMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, emailNotification: DocuSignAPI.DSAPIRecipientEmailNotification? = nil, emailRecipientPostSigningURL: Swift.String? = nil, embeddedRecipientStartURL: Swift.String? = nil, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, excludedDocuments: [Swift.String]? = nil, faxNumber: Swift.String? = nil, faxNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, firstName: Swift.String? = nil, firstNameMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, fullName: Swift.String? = nil, fullNameMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, idCheckConfigurationName: Swift.String? = nil, idCheckConfigurationNameMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, idCheckInformationInput: DocuSignAPI.DSAPIIdCheckInformationInput? = nil, identityVerification: DocuSignAPI.DSAPIRecipientIdentityVerification? = nil, inheritEmailNotificationConfiguration: Swift.Bool = false, isBulkRecipient: Swift.String? = nil, isBulkRecipientMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, lastName: Swift.String? = nil, lastNameMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, lockedRecipientPhoneAuthEditable: Swift.String? = nil, lockedRecipientSmsEditable: Swift.String? = nil, name: Swift.String? = nil, nameMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, notaryId: Swift.String? = nil, notarySignerEmailSent: Swift.String? = nil, note: Swift.String? = nil, noteMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, offlineAttributes: DocuSignAPI.DSAPIOfflineAttributes? = nil, phoneAuthentication: DocuSignAPI.DSAPIRecipientPhoneAuthentication? = nil, phoneNumber: DocuSignAPI.DSAPIRecipientPhoneNumber? = nil, proofFile: DocuSignAPI.DSAPIRecipientProofFile? = nil, recipientAttachments: [DocuSignAPI.DSAPIRecipientAttachment]? = nil, recipientAuthenticationStatus: DocuSignAPI.DSAPIAuthenticationStatus? = nil, recipientFeatureMetadata: [DocuSignAPI.DSAPIFeatureAvailableMetadata]? = nil, recipientId: Swift.String? = nil, recipientIdGuid: Swift.String? = nil, recipientSignatureProviders: [DocuSignAPI.DSAPIRecipientSignatureProvider]? = nil, recipientSuppliesTabs: Swift.Bool = false, recipientType: Swift.String? = nil, recipientTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, requireIdLookup: Swift.Bool = false, requireIdLookupMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, requireSignerCertificate: Swift.String? = nil, requireSignOnPaper: Swift.Bool = false, requireUploadSignature: Swift.Bool = false, roleName: Swift.String? = nil, routingOrder: Swift.String? = nil, routingOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, sentDateTime: Foundation.Date? = nil, signatureInfo: DocuSignAPI.DSAPIRecipientSignatureInformation? = nil, signedDateTime: Foundation.Date? = nil, signInEachLocation: Swift.Bool = false, signInEachLocationMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, signingGroupId: Swift.String? = nil, signingGroupIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, signingGroupName: Swift.String? = nil, signingGroupUsers: [DocuSignAPI.DSAPIUserInfo]? = nil, smsAuthentication: DocuSignAPI.DSAPIRecipientSMSAuthentication? = nil, socialAuthentications: [DocuSignAPI.DSAPISocialAuthentication]? = nil, status: Swift.String? = nil, statusCode: Swift.String? = nil, suppressEmails: Swift.Bool = false, tabs: DocuSignAPI.DSAPITabs? = nil, templateLocked: Swift.Bool = false, templateRequired: Swift.Bool = false, totalTabCount: Swift.String? = nil, userId: Swift.String? = nil, witnessFor: Swift.String? = nil, witnessForGuid: Swift.String? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct DSAPINotaryResult : Swift.Codable {
  public var jurisdictions: [DocuSignAPI.DSAPIJurisdiction]?
  public var notary: DocuSignAPI.DSAPINotary?
  public init(jurisdictions: [DocuSignAPI.DSAPIJurisdiction]? = nil, notary: DocuSignAPI.DSAPINotary? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIAddressInformationInput : Swift.Codable {
  public var addressInformation: DocuSignAPI.DSAPIAddressInformation?
  public var displayLevelCode: Swift.String?
  @DocuSignAPI.BoolFromString public var receiveInResponse: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public init(addressInformation: DocuSignAPI.DSAPIAddressInformation? = nil, displayLevelCode: Swift.String? = nil, receiveInResponse: Swift.Bool = false)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPISenderName : Swift.Codable {
  @DocuSignAPI.BoolFromString public var anchorAllowWhiteSpaceInCharacters: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var anchorAllowWhiteSpaceInCharactersMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var anchorCaseSensitive: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var anchorCaseSensitiveMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorHorizontalAlignment: Swift.String?
  public var anchorHorizontalAlignmentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var anchorIgnoreIfNotPresent: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var anchorIgnoreIfNotPresentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var anchorMatchWholeWord: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var anchorMatchWholeWordMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorString: Swift.String?
  public var anchorStringMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorTabProcessorVersion: Swift.String?
  public var anchorTabProcessorVersionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorUnits: Swift.String?
  public var anchorUnitsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorXOffset: Swift.String?
  public var anchorXOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorYOffset: Swift.String?
  public var anchorYOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var bold: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var boldMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var conditionalParentLabel: Swift.String?
  public var conditionalParentLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var conditionalParentValue: Swift.String?
  public var conditionalParentValueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var customTabId: Swift.String?
  public var customTabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var documentId: Swift.String?
  public var documentIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  public var font: Swift.String?
  public var fontColor: Swift.String?
  public var fontColorMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var fontMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var fontSize: Swift.String?
  public var fontSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var formOrder: Swift.String?
  public var formOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var formPageLabel: Swift.String?
  public var formPageLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var formPageNumber: Swift.String?
  public var formPageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var height: Swift.String?
  public var heightMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var italic: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var italicMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var localePolicy: DocuSignAPI.DSAPILocalePolicyTab?
  public var mergeField: DocuSignAPI.DSAPIMergeField?
  public var mergeFieldXml: Swift.String?
  public var name: Swift.String?
  public var nameMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var pageNumber: Swift.String?
  public var pageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var recipientId: Swift.String?
  public var recipientIdGuid: Swift.String?
  public var recipientIdGuidMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var recipientIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var smartContractInformation: DocuSignAPI.DSAPISmartContractInformation?
  public var source: Swift.String?
  public var status: Swift.String?
  public var statusMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var tabGroupLabels: [Swift.String]?
  public var tabGroupLabelsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var tabId: Swift.String?
  public var tabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var tabLabel: Swift.String?
  public var tabLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var tabOrder: Swift.String?
  public var tabOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var tabType: Swift.String?
  public var tabTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var templateLocked: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var templateLockedMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var templateRequired: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var templateRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var tooltip: Swift.String?
  public var toolTipMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var underline: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var underlineMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var value: Swift.String?
  public var valueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var width: Swift.String?
  public var widthMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var xPosition: Swift.String?
  public var xPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var yPosition: Swift.String?
  public var yPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public init(anchorAllowWhiteSpaceInCharacters: Swift.Bool = false, anchorAllowWhiteSpaceInCharactersMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorCaseSensitive: Swift.Bool = false, anchorCaseSensitiveMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorHorizontalAlignment: Swift.String? = nil, anchorHorizontalAlignmentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorIgnoreIfNotPresent: Swift.Bool = false, anchorIgnoreIfNotPresentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorMatchWholeWord: Swift.Bool = false, anchorMatchWholeWordMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorString: Swift.String? = nil, anchorStringMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorTabProcessorVersion: Swift.String? = nil, anchorTabProcessorVersionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorUnits: Swift.String? = nil, anchorUnitsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorXOffset: Swift.String? = nil, anchorXOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorYOffset: Swift.String? = nil, anchorYOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, bold: Swift.Bool = false, boldMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, conditionalParentLabel: Swift.String? = nil, conditionalParentLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, conditionalParentValue: Swift.String? = nil, conditionalParentValueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, customTabId: Swift.String? = nil, customTabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, documentId: Swift.String? = nil, documentIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, font: Swift.String? = nil, fontColor: Swift.String? = nil, fontColorMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, fontMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, fontSize: Swift.String? = nil, fontSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formOrder: Swift.String? = nil, formOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formPageLabel: Swift.String? = nil, formPageLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formPageNumber: Swift.String? = nil, formPageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, height: Swift.String? = nil, heightMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, italic: Swift.Bool = false, italicMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, localePolicy: DocuSignAPI.DSAPILocalePolicyTab? = nil, mergeField: DocuSignAPI.DSAPIMergeField? = nil, mergeFieldXml: Swift.String? = nil, name: Swift.String? = nil, nameMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, pageNumber: Swift.String? = nil, pageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, recipientId: Swift.String? = nil, recipientIdGuid: Swift.String? = nil, recipientIdGuidMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, recipientIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, smartContractInformation: DocuSignAPI.DSAPISmartContractInformation? = nil, source: Swift.String? = nil, status: Swift.String? = nil, statusMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabGroupLabels: [Swift.String]? = nil, tabGroupLabelsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabId: Swift.String? = nil, tabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabLabel: Swift.String? = nil, tabLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabOrder: Swift.String? = nil, tabOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabType: Swift.String? = nil, tabTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, templateLocked: Swift.Bool = false, templateLockedMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, templateRequired: Swift.Bool = false, templateRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tooltip: Swift.String? = nil, toolTipMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, underline: Swift.Bool = false, underlineMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, value: Swift.String? = nil, valueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, width: Swift.String? = nil, widthMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, xPosition: Swift.String? = nil, xPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, yPosition: Swift.String? = nil, yPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIChunkedUploadResponse : Swift.Codable {
  public var checksum: Swift.String?
  public var chunkedUploadId: Swift.String?
  public var chunkedUploadParts: [DocuSignAPI.DSAPIChunkedUploadPart]?
  public var chunkedUploadUri: Foundation.URL?
  @DocuSignAPI.BoolFromString public var committed: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var expirationDateTime: Foundation.Date?
  public var maxChunkedUploadParts: Swift.String?
  public var maxTotalSize: Swift.String?
  public var totalSize: Swift.String?
  public init(checksum: Swift.String? = nil, chunkedUploadId: Swift.String? = nil, chunkedUploadParts: [DocuSignAPI.DSAPIChunkedUploadPart]? = nil, chunkedUploadUri: Foundation.URL? = nil, committed: Swift.Bool = false, expirationDateTime: Foundation.Date? = nil, maxChunkedUploadParts: Swift.String? = nil, maxTotalSize: Swift.String? = nil, totalSize: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPICurrency : Swift.Codable {
  @DocuSignAPI.BoolFromString public var anchorAllowWhiteSpaceInCharacters: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var anchorAllowWhiteSpaceInCharactersMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var anchorCaseSensitive: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var anchorCaseSensitiveMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorHorizontalAlignment: Swift.String?
  public var anchorHorizontalAlignmentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var anchorIgnoreIfNotPresent: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var anchorIgnoreIfNotPresentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var anchorMatchWholeWord: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var anchorMatchWholeWordMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorString: Swift.String?
  public var anchorStringMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorTabProcessorVersion: Swift.String?
  public var anchorTabProcessorVersionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorUnits: Swift.String?
  public var anchorUnitsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorXOffset: Swift.String?
  public var anchorXOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorYOffset: Swift.String?
  public var anchorYOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var bold: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var boldMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var concealValueOnDocument: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var concealValueOnDocumentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var conditionalParentLabel: Swift.String?
  public var conditionalParentLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var conditionalParentValue: Swift.String?
  public var conditionalParentValueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var customTabId: Swift.String?
  public var customTabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var disableAutoSize: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var disableAutoSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var documentId: Swift.String?
  public var documentIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  public var font: Swift.String?
  public var fontColor: Swift.String?
  public var fontColorMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var fontMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var fontSize: Swift.String?
  public var fontSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var formOrder: Swift.String?
  public var formOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var formPageLabel: Swift.String?
  public var formPageLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var formPageNumber: Swift.String?
  public var formPageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var height: Swift.String?
  public var heightMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var italic: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var italicMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var localePolicy: DocuSignAPI.DSAPILocalePolicyTab?
  @DocuSignAPI.BoolFromString public var locked: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var lockedMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var maxLength: Swift.String?
  public var maxLengthMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var maxNumericalValue: Swift.String?
  public var mergeField: DocuSignAPI.DSAPIMergeField?
  public var mergeFieldXml: Swift.String?
  public var minNumericalValue: Swift.String?
  public var name: Swift.String?
  public var nameMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var numericalValue: Swift.String?
  public var originalValue: Swift.String?
  public var originalValueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var pageNumber: Swift.String?
  public var pageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var recipientId: Swift.String?
  public var recipientIdGuid: Swift.String?
  public var recipientIdGuidMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var recipientIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var requireAll: Swift.String?
  public var requireAllMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var required: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var requiredMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var requireInitialOnSharedChange: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var requireInitialOnSharedChangeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var senderRequired: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var senderRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var shared: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var sharedMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var smartContractInformation: DocuSignAPI.DSAPISmartContractInformation?
  public var source: Swift.String?
  public var status: Swift.String?
  public var statusMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var tabGroupLabels: [Swift.String]?
  public var tabGroupLabelsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var tabId: Swift.String?
  public var tabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var tabLabel: Swift.String?
  public var tabLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var tabOrder: Swift.String?
  public var tabOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var tabType: Swift.String?
  public var tabTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var templateLocked: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var templateLockedMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var templateRequired: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var templateRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var tooltip: Swift.String?
  public var toolTipMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var underline: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var underlineMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var value: Swift.String?
  public var valueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var width: Swift.String?
  public var widthMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var xPosition: Swift.String?
  public var xPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var yPosition: Swift.String?
  public var yPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public init(anchorAllowWhiteSpaceInCharacters: Swift.Bool = false, anchorAllowWhiteSpaceInCharactersMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorCaseSensitive: Swift.Bool = false, anchorCaseSensitiveMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorHorizontalAlignment: Swift.String? = nil, anchorHorizontalAlignmentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorIgnoreIfNotPresent: Swift.Bool = false, anchorIgnoreIfNotPresentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorMatchWholeWord: Swift.Bool = false, anchorMatchWholeWordMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorString: Swift.String? = nil, anchorStringMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorTabProcessorVersion: Swift.String? = nil, anchorTabProcessorVersionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorUnits: Swift.String? = nil, anchorUnitsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorXOffset: Swift.String? = nil, anchorXOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorYOffset: Swift.String? = nil, anchorYOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, bold: Swift.Bool = false, boldMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, concealValueOnDocument: Swift.Bool = false, concealValueOnDocumentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, conditionalParentLabel: Swift.String? = nil, conditionalParentLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, conditionalParentValue: Swift.String? = nil, conditionalParentValueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, customTabId: Swift.String? = nil, customTabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, disableAutoSize: Swift.Bool = false, disableAutoSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, documentId: Swift.String? = nil, documentIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, font: Swift.String? = nil, fontColor: Swift.String? = nil, fontColorMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, fontMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, fontSize: Swift.String? = nil, fontSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formOrder: Swift.String? = nil, formOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formPageLabel: Swift.String? = nil, formPageLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formPageNumber: Swift.String? = nil, formPageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, height: Swift.String? = nil, heightMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, italic: Swift.Bool = false, italicMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, localePolicy: DocuSignAPI.DSAPILocalePolicyTab? = nil, locked: Swift.Bool = false, lockedMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, maxLength: Swift.String? = nil, maxLengthMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, maxNumericalValue: Swift.String? = nil, mergeField: DocuSignAPI.DSAPIMergeField? = nil, mergeFieldXml: Swift.String? = nil, minNumericalValue: Swift.String? = nil, name: Swift.String? = nil, nameMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, numericalValue: Swift.String? = nil, originalValue: Swift.String? = nil, originalValueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, pageNumber: Swift.String? = nil, pageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, recipientId: Swift.String? = nil, recipientIdGuid: Swift.String? = nil, recipientIdGuidMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, recipientIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, requireAll: Swift.String? = nil, requireAllMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, required: Swift.Bool = false, requiredMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, requireInitialOnSharedChange: Swift.Bool = false, requireInitialOnSharedChangeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, senderRequired: Swift.Bool = false, senderRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, shared: Swift.Bool = false, sharedMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, smartContractInformation: DocuSignAPI.DSAPISmartContractInformation? = nil, source: Swift.String? = nil, status: Swift.String? = nil, statusMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabGroupLabels: [Swift.String]? = nil, tabGroupLabelsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabId: Swift.String? = nil, tabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabLabel: Swift.String? = nil, tabLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabOrder: Swift.String? = nil, tabOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabType: Swift.String? = nil, tabTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, templateLocked: Swift.Bool = false, templateLockedMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, templateRequired: Swift.Bool = false, templateRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tooltip: Swift.String? = nil, toolTipMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, underline: Swift.Bool = false, underlineMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, value: Swift.String? = nil, valueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, width: Swift.String? = nil, widthMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, xPosition: Swift.String? = nil, xPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, yPosition: Swift.String? = nil, yPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIProofServiceResourceToken : Swift.Codable {
  public var proofBaseURI: Foundation.URL?
  public var resourceToken: Swift.String?
  public init(proofBaseURI: Foundation.URL? = nil, resourceToken: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIBrandEmailContent : Swift.Codable {
  public var content: Swift.String?
  public var emailContentType: Swift.String?
  public var emailToLink: Swift.String?
  public var linkText: Swift.String?
  public init(content: Swift.String? = nil, emailContentType: Swift.String? = nil, emailToLink: Swift.String? = nil, linkText: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPISealIdentifier : Swift.Codable {
  public var sealDisplayName: Swift.String?
  public var sealName: Swift.String?
  public init(sealDisplayName: Swift.String? = nil, sealName: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPICorrectViewRequest : Swift.Codable {
  public var returnUrl: Foundation.URL?
  public var suppressNavigation: Swift.String?
  public var viewUrl: Foundation.URL?
  public init(returnUrl: Foundation.URL? = nil, suppressNavigation: Swift.String? = nil, viewUrl: Foundation.URL? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum JSONValue : Swift.Codable, Swift.Equatable {
  case string(Swift.String)
  case int(Swift.Int)
  case double(Swift.Double)
  case bool(Swift.Bool)
  case object([Swift.String : DocuSignAPI.JSONValue])
  case array([DocuSignAPI.JSONValue])
  case null
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (a: DocuSignAPI.JSONValue, b: DocuSignAPI.JSONValue) -> Swift.Bool
}
extension DocuSignAPI.JSONValue : Swift.ExpressibleByStringLiteral {
  public init(stringLiteral value: Swift.String)
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension DocuSignAPI.JSONValue : Swift.ExpressibleByIntegerLiteral {
  public init(integerLiteral value: Swift.Int)
  public typealias IntegerLiteralType = Swift.Int
}
extension DocuSignAPI.JSONValue : Swift.ExpressibleByFloatLiteral {
  public init(floatLiteral value: Swift.Double)
  public typealias FloatLiteralType = Swift.Double
}
extension DocuSignAPI.JSONValue : Swift.ExpressibleByBooleanLiteral {
  public init(booleanLiteral value: Swift.Bool)
  public typealias BooleanLiteralType = Swift.Bool
}
extension DocuSignAPI.JSONValue : Swift.ExpressibleByDictionaryLiteral {
  public init(dictionaryLiteral elements: (Swift.String, DocuSignAPI.JSONValue)...)
  public typealias Key = Swift.String
  public typealias Value = DocuSignAPI.JSONValue
}
extension DocuSignAPI.JSONValue : Swift.ExpressibleByArrayLiteral {
  public init(arrayLiteral elements: DocuSignAPI.JSONValue...)
  public typealias ArrayLiteralElement = DocuSignAPI.JSONValue
}
public struct DSAPICommissionExpiration : Swift.Codable {
  @DocuSignAPI.BoolFromString public var anchorAllowWhiteSpaceInCharacters: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var anchorAllowWhiteSpaceInCharactersMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var anchorCaseSensitive: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var anchorCaseSensitiveMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorHorizontalAlignment: Swift.String?
  public var anchorHorizontalAlignmentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var anchorIgnoreIfNotPresent: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var anchorIgnoreIfNotPresentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var anchorMatchWholeWord: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var anchorMatchWholeWordMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorString: Swift.String?
  public var anchorStringMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorTabProcessorVersion: Swift.String?
  public var anchorTabProcessorVersionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorUnits: Swift.String?
  public var anchorUnitsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorXOffset: Swift.String?
  public var anchorXOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorYOffset: Swift.String?
  public var anchorYOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var bold: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var boldMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var concealValueOnDocument: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var concealValueOnDocumentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var conditionalParentLabel: Swift.String?
  public var conditionalParentLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var conditionalParentValue: Swift.String?
  public var conditionalParentValueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var customTabId: Swift.String?
  public var customTabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var disableAutoSize: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var disableAutoSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var documentId: Swift.String?
  public var documentIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  public var font: Swift.String?
  public var fontColor: Swift.String?
  public var fontColorMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var fontMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var fontSize: Swift.String?
  public var fontSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var formOrder: Swift.String?
  public var formOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var formPageLabel: Swift.String?
  public var formPageLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var formPageNumber: Swift.String?
  public var formPageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var height: Swift.String?
  public var heightMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var italic: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var italicMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var localePolicy: DocuSignAPI.DSAPILocalePolicyTab?
  @DocuSignAPI.BoolFromString public var locked: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var lockedMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var maxLength: Swift.String?
  public var maxLengthMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var mergeField: DocuSignAPI.DSAPIMergeField?
  public var mergeFieldXml: Swift.String?
  public var name: Swift.String?
  public var nameMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var originalValue: Swift.String?
  public var originalValueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var pageNumber: Swift.String?
  public var pageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var recipientId: Swift.String?
  public var recipientIdGuid: Swift.String?
  public var recipientIdGuidMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var recipientIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var required: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var requiredMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var smartContractInformation: DocuSignAPI.DSAPISmartContractInformation?
  public var source: Swift.String?
  public var status: Swift.String?
  public var statusMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var tabGroupLabels: [Swift.String]?
  public var tabGroupLabelsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var tabId: Swift.String?
  public var tabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var tabLabel: Swift.String?
  public var tabLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var tabOrder: Swift.String?
  public var tabOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var tabType: Swift.String?
  public var tabTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var templateLocked: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var templateLockedMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var templateRequired: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var templateRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var tooltip: Swift.String?
  public var toolTipMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var underline: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var underlineMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var value: Swift.String?
  public var valueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var width: Swift.String?
  public var widthMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var xPosition: Swift.String?
  public var xPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var yPosition: Swift.String?
  public var yPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public init(anchorAllowWhiteSpaceInCharacters: Swift.Bool = false, anchorAllowWhiteSpaceInCharactersMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorCaseSensitive: Swift.Bool = false, anchorCaseSensitiveMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorHorizontalAlignment: Swift.String? = nil, anchorHorizontalAlignmentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorIgnoreIfNotPresent: Swift.Bool = false, anchorIgnoreIfNotPresentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorMatchWholeWord: Swift.Bool = false, anchorMatchWholeWordMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorString: Swift.String? = nil, anchorStringMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorTabProcessorVersion: Swift.String? = nil, anchorTabProcessorVersionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorUnits: Swift.String? = nil, anchorUnitsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorXOffset: Swift.String? = nil, anchorXOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorYOffset: Swift.String? = nil, anchorYOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, bold: Swift.Bool = false, boldMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, concealValueOnDocument: Swift.Bool = false, concealValueOnDocumentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, conditionalParentLabel: Swift.String? = nil, conditionalParentLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, conditionalParentValue: Swift.String? = nil, conditionalParentValueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, customTabId: Swift.String? = nil, customTabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, disableAutoSize: Swift.Bool = false, disableAutoSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, documentId: Swift.String? = nil, documentIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, font: Swift.String? = nil, fontColor: Swift.String? = nil, fontColorMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, fontMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, fontSize: Swift.String? = nil, fontSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formOrder: Swift.String? = nil, formOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formPageLabel: Swift.String? = nil, formPageLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formPageNumber: Swift.String? = nil, formPageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, height: Swift.String? = nil, heightMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, italic: Swift.Bool = false, italicMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, localePolicy: DocuSignAPI.DSAPILocalePolicyTab? = nil, locked: Swift.Bool = false, lockedMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, maxLength: Swift.String? = nil, maxLengthMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, mergeField: DocuSignAPI.DSAPIMergeField? = nil, mergeFieldXml: Swift.String? = nil, name: Swift.String? = nil, nameMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, originalValue: Swift.String? = nil, originalValueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, pageNumber: Swift.String? = nil, pageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, recipientId: Swift.String? = nil, recipientIdGuid: Swift.String? = nil, recipientIdGuidMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, recipientIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, required: Swift.Bool = false, requiredMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, smartContractInformation: DocuSignAPI.DSAPISmartContractInformation? = nil, source: Swift.String? = nil, status: Swift.String? = nil, statusMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabGroupLabels: [Swift.String]? = nil, tabGroupLabelsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabId: Swift.String? = nil, tabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabLabel: Swift.String? = nil, tabLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabOrder: Swift.String? = nil, tabOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabType: Swift.String? = nil, tabTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, templateLocked: Swift.Bool = false, templateLockedMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, templateRequired: Swift.Bool = false, templateRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tooltip: Swift.String? = nil, toolTipMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, underline: Swift.Bool = false, underlineMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, value: Swift.String? = nil, valueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, width: Swift.String? = nil, widthMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, xPosition: Swift.String? = nil, xPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, yPosition: Swift.String? = nil, yPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIWatermark : Swift.Codable {
  public var displayAngle: Swift.String?
  public var enabled: Swift.String?
  public var font: Swift.String?
  public var fontColor: Swift.String?
  public var fontSize: Swift.String?
  public var _id: Swift.String?
  public var imageBase64: Swift.String?
  public var transparency: Swift.String?
  public var watermarkText: Swift.String?
  public init(displayAngle: Swift.String? = nil, enabled: Swift.String? = nil, font: Swift.String? = nil, fontColor: Swift.String? = nil, fontSize: Swift.String? = nil, _id: Swift.String? = nil, imageBase64: Swift.String? = nil, transparency: Swift.String? = nil, watermarkText: Swift.String? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case displayAngle
    case enabled
    case font
    case fontColor
    case fontSize
    case _id
    case imageBase64
    case transparency
    case watermarkText
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @objcMembers public class DSAPIDecline : ObjectiveC.NSObject, Swift.Codable {
  @objc @DocuSignAPI.BoolFromString public var anchorAllowWhiteSpaceInCharacters: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorAllowWhiteSpaceInCharactersMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var anchorCaseSensitive: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorCaseSensitiveMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorHorizontalAlignment: Swift.String?
  @objc public var anchorHorizontalAlignmentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var anchorIgnoreIfNotPresent: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorIgnoreIfNotPresentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var anchorMatchWholeWord: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorMatchWholeWordMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorString: Swift.String?
  @objc public var anchorStringMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorTabProcessorVersion: Swift.String?
  @objc public var anchorTabProcessorVersionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorUnits: Swift.String?
  @objc public var anchorUnitsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorXOffset: Swift.String?
  @objc public var anchorXOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorYOffset: Swift.String?
  @objc public var anchorYOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var bold: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var boldMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var buttonText: Swift.String?
  @objc public var buttonTextMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var conditionalParentLabel: Swift.String?
  @objc public var conditionalParentLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var conditionalParentValue: Swift.String?
  @objc public var conditionalParentValueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var customTabId: Swift.String?
  @objc public var customTabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var declineReason: Swift.String?
  @objc public var declineReasonMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var documentId: Swift.String?
  @objc public var documentIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  @objc public var font: Swift.String?
  @objc public var fontColor: Swift.String?
  @objc public var fontColorMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var fontMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var fontSize: Swift.String?
  @objc public var fontSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var formOrder: Swift.String?
  @objc public var formOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var formPageLabel: Swift.String?
  @objc public var formPageLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var formPageNumber: Swift.String?
  @objc public var formPageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var height: Swift.String?
  @objc public var heightMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var italic: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var italicMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var localePolicy: DocuSignAPI.DSAPILocalePolicyTab?
  @objc public var mergeField: DocuSignAPI.DSAPIMergeField?
  @objc public var mergeFieldXml: Swift.String?
  @objc public var pageNumber: Swift.String?
  @objc public var pageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var recipientId: Swift.String?
  @objc public var recipientIdGuid: Swift.String?
  @objc public var recipientIdGuidMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var recipientIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var smartContractInformation: DocuSignAPI.DSAPISmartContractInformation?
  @objc public var source: Swift.String?
  @objc public var status: Swift.String?
  @objc public var statusMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabGroupLabels: [Swift.String]?
  @objc public var tabGroupLabelsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabId: Swift.String?
  @objc public var tabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabLabel: Swift.String?
  @objc public var tabLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabOrder: Swift.String?
  @objc public var tabOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabType: Swift.String?
  @objc public var tabTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var templateLocked: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var templateLockedMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var templateRequired: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var templateRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tooltip: Swift.String?
  @objc public var toolTipMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var underline: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var underlineMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var width: Swift.String?
  @objc public var widthMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var xPosition: Swift.String?
  @objc public var xPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var yPosition: Swift.String?
  @objc public var yPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public init(anchorAllowWhiteSpaceInCharacters: Swift.Bool = false, anchorAllowWhiteSpaceInCharactersMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorCaseSensitive: Swift.Bool = false, anchorCaseSensitiveMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorHorizontalAlignment: Swift.String? = nil, anchorHorizontalAlignmentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorIgnoreIfNotPresent: Swift.Bool = false, anchorIgnoreIfNotPresentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorMatchWholeWord: Swift.Bool = false, anchorMatchWholeWordMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorString: Swift.String? = nil, anchorStringMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorTabProcessorVersion: Swift.String? = nil, anchorTabProcessorVersionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorUnits: Swift.String? = nil, anchorUnitsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorXOffset: Swift.String? = nil, anchorXOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorYOffset: Swift.String? = nil, anchorYOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, bold: Swift.Bool = false, boldMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, buttonText: Swift.String? = nil, buttonTextMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, conditionalParentLabel: Swift.String? = nil, conditionalParentLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, conditionalParentValue: Swift.String? = nil, conditionalParentValueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, customTabId: Swift.String? = nil, customTabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, declineReason: Swift.String? = nil, declineReasonMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, documentId: Swift.String? = nil, documentIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, font: Swift.String? = nil, fontColor: Swift.String? = nil, fontColorMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, fontMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, fontSize: Swift.String? = nil, fontSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formOrder: Swift.String? = nil, formOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formPageLabel: Swift.String? = nil, formPageLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formPageNumber: Swift.String? = nil, formPageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, height: Swift.String? = nil, heightMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, italic: Swift.Bool = false, italicMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, localePolicy: DocuSignAPI.DSAPILocalePolicyTab? = nil, mergeField: DocuSignAPI.DSAPIMergeField? = nil, mergeFieldXml: Swift.String? = nil, pageNumber: Swift.String? = nil, pageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, recipientId: Swift.String? = nil, recipientIdGuid: Swift.String? = nil, recipientIdGuidMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, recipientIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, smartContractInformation: DocuSignAPI.DSAPISmartContractInformation? = nil, source: Swift.String? = nil, status: Swift.String? = nil, statusMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabGroupLabels: [Swift.String]? = nil, tabGroupLabelsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabId: Swift.String? = nil, tabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabLabel: Swift.String? = nil, tabLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabOrder: Swift.String? = nil, tabOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabType: Swift.String? = nil, tabTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, templateLocked: Swift.Bool = false, templateLockedMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, templateRequired: Swift.Bool = false, templateRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tooltip: Swift.String? = nil, toolTipMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, underline: Swift.Bool = false, underlineMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, width: Swift.String? = nil, widthMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, xPosition: Swift.String? = nil, xPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, yPosition: Swift.String? = nil, yPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIEnvelopeAuditEvent : Swift.Codable {
  public var eventFields: [DocuSignAPI.DSAPINameValue]?
  public init(eventFields: [DocuSignAPI.DSAPINameValue]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIRecipientEvent : Swift.Codable {
  @DocuSignAPI.BoolFromString public var includeDocuments: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var recipientEventStatusCode: Swift.String?
  public init(includeDocuments: Swift.Bool = false, recipientEventStatusCode: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIConnectFailureResult : Swift.Codable {
  public var configId: Swift.String?
  public var configUrl: Foundation.URL?
  public var envelopeId: Swift.String?
  public var status: Swift.String?
  public var statusMessage: Swift.String?
  public init(configId: Swift.String? = nil, configUrl: Foundation.URL? = nil, envelopeId: Swift.String? = nil, status: Swift.String? = nil, statusMessage: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIUserInformation : Swift.Codable {
  public var activationAccessCode: Swift.String?
  public var company: Swift.String?
  public var connectConfigurations: [DocuSignAPI.DSAPIConnectUserObject]?
  public var countryCode: Swift.String?
  public var createdDateTime: Foundation.Date?
  public var customSettings: [DocuSignAPI.DSAPINameValue]?
  public var defaultAccountId: Swift.String?
  public var email: Swift.String?
  public var enableConnectForUser: Swift.String?
  public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  public var firstName: Swift.String?
  public var forgottenPasswordInfo: DocuSignAPI.DSAPIForgottenPasswordInformation?
  public var groupList: [DocuSignAPI.DSAPIGroup]?
  public var hasRemoteNotary: Swift.Bool
  public var homeAddress: DocuSignAPI.DSAPIAddressInformation?
  public var initialsImageUri: Foundation.URL?
  public var isAdmin: Swift.String?
  @DocuSignAPI.BoolFromString public var isNAREnabled: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var jobTitle: Swift.String?
  public var lastLogin: Swift.String?
  public var lastName: Swift.String?
  public var loginStatus: Swift.String?
  public var middleName: Swift.String?
  public var password: Swift.String?
  public var passwordExpiration: Swift.String?
  public var permissionProfileId: Swift.String?
  public var permissionProfileName: Swift.String?
  public var profileImageUri: Foundation.URL?
  public var sendActivationEmail: Swift.String?
  @DocuSignAPI.BoolFromString public var sendActivationOnInvalidLogin: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var signatureImageUri: Foundation.URL?
  public var subscribe: Swift.String?
  public var suffixName: Swift.String?
  public var title: Swift.String?
  public var uri: Foundation.URL?
  public var userAddedToAccountDateTime: Foundation.Date?
  public var userId: Swift.String?
  public var userName: Swift.String?
  public var userProfileLastModifiedDate: Foundation.Date?
  public var userSettings: DocuSignAPI.DSAPIUserSettingsInformation?
  public var userStatus: Swift.String?
  public var userType: Swift.String?
  public var workAddress: DocuSignAPI.DSAPIAddressInformation?
  public init(activationAccessCode: Swift.String? = nil, company: Swift.String? = nil, connectConfigurations: [DocuSignAPI.DSAPIConnectUserObject]? = nil, countryCode: Swift.String? = nil, createdDateTime: Foundation.Date? = nil, customSettings: [DocuSignAPI.DSAPINameValue]? = nil, defaultAccountId: Swift.String? = nil, email: Swift.String? = nil, enableConnectForUser: Swift.String? = nil, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, firstName: Swift.String? = nil, forgottenPasswordInfo: DocuSignAPI.DSAPIForgottenPasswordInformation? = nil, groupList: [DocuSignAPI.DSAPIGroup]? = nil, hasRemoteNotary: Swift.Bool = false, homeAddress: DocuSignAPI.DSAPIAddressInformation? = nil, initialsImageUri: Foundation.URL? = nil, isAdmin: Swift.String? = nil, isNAREnabled: Swift.Bool = false, jobTitle: Swift.String? = nil, lastLogin: Swift.String? = nil, lastName: Swift.String? = nil, loginStatus: Swift.String? = nil, middleName: Swift.String? = nil, password: Swift.String? = nil, passwordExpiration: Swift.String? = nil, permissionProfileId: Swift.String? = nil, permissionProfileName: Swift.String? = nil, profileImageUri: Foundation.URL? = nil, sendActivationEmail: Swift.String? = nil, sendActivationOnInvalidLogin: Swift.Bool = false, signatureImageUri: Foundation.URL? = nil, subscribe: Swift.String? = nil, suffixName: Swift.String? = nil, title: Swift.String? = nil, uri: Foundation.URL? = nil, userAddedToAccountDateTime: Foundation.Date? = nil, userId: Swift.String? = nil, userName: Swift.String? = nil, userProfileLastModifiedDate: Foundation.Date? = nil, userSettings: DocuSignAPI.DSAPIUserSettingsInformation? = nil, userStatus: Swift.String? = nil, userType: Swift.String? = nil, workAddress: DocuSignAPI.DSAPIAddressInformation? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIAuthenticationMethod : Swift.Codable {
  public var authenticationType: Swift.String?
  public var lastProvider: Swift.String?
  public var lastTimestamp: Foundation.Date?
  public var totalCount: Swift.String?
  public init(authenticationType: Swift.String? = nil, lastProvider: Swift.String? = nil, lastTimestamp: Foundation.Date? = nil, totalCount: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIPowerFormsFormDataResponse : Swift.Codable {
  public var envelopes: [DocuSignAPI.DSAPIPowerFormFormDataEnvelope]?
  public init(envelopes: [DocuSignAPI.DSAPIPowerFormFormDataEnvelope]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIDowngradRequestBillingInfoResponse : Swift.Codable {
  public var downgradePlanInformation: DocuSignAPI.DSAPIDowngradePlanUpdateResponse?
  public var paymentMethod: Swift.String?
  public init(downgradePlanInformation: DocuSignAPI.DSAPIDowngradePlanUpdateResponse? = nil, paymentMethod: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIPaymentLineItem : Swift.Codable {
  public var amountReference: Swift.String?
  public var _description: Swift.String?
  public var itemCode: Swift.String?
  public var name: Swift.String?
  public init(amountReference: Swift.String? = nil, _description: Swift.String? = nil, itemCode: Swift.String? = nil, name: Swift.String? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case amountReference
    case _description
    case itemCode
    case name
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPILocalePolicyTab : Swift.Codable {
  public var addressFormat: Swift.String?
  public var calendarType: Swift.String?
  public var cultureName: Swift.String?
  public var currencyCode: Swift.String?
  public var currencyNegativeFormat: Swift.String?
  public var currencyPositiveFormat: Swift.String?
  public var customDateFormat: Swift.String?
  public var customTimeFormat: Swift.String?
  public var dateFormat: Swift.String?
  public var initialFormat: Swift.String?
  public var nameFormat: Swift.String?
  public var timeFormat: Swift.String?
  public var timeZone: Swift.String?
  public init(addressFormat: Swift.String? = nil, calendarType: Swift.String? = nil, cultureName: Swift.String? = nil, currencyCode: Swift.String? = nil, currencyNegativeFormat: Swift.String? = nil, currencyPositiveFormat: Swift.String? = nil, customDateFormat: Swift.String? = nil, customTimeFormat: Swift.String? = nil, dateFormat: Swift.String? = nil, initialFormat: Swift.String? = nil, nameFormat: Swift.String? = nil, timeFormat: Swift.String? = nil, timeZone: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIDelegationInfo : Swift.Codable {
  public var email: Swift.String?
  public var name: Swift.String?
  public var userAuthorizationId: Swift.String?
  public var userId: Swift.String?
  public init(email: Swift.String? = nil, name: Swift.String? = nil, userAuthorizationId: Swift.String? = nil, userId: Swift.String? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case email
    case name
    case userAuthorizationId
    case userId
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIIntegratedConnectUserInfoList : Swift.Codable {
  public var endPosition: Swift.String?
  public var nextUri: Foundation.URL?
  public var previousUri: Foundation.URL?
  public var resultSetSize: Swift.String?
  public var startPosition: Swift.String?
  public var totalSetSize: Swift.String?
  public var users: [DocuSignAPI.DSAPIConnectUserInfo]?
  public init(endPosition: Swift.String? = nil, nextUri: Foundation.URL? = nil, previousUri: Foundation.URL? = nil, resultSetSize: Swift.String? = nil, startPosition: Swift.String? = nil, totalSetSize: Swift.String? = nil, users: [DocuSignAPI.DSAPIConnectUserInfo]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIBillingPlansResponse : Swift.Codable {
  public var billingPlans: [DocuSignAPI.DSAPIBillingPlan]?
  public init(billingPlans: [DocuSignAPI.DSAPIBillingPlan]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIAppStoreProduct : Swift.Codable {
  public var marketPlace: Swift.String?
  public var productId: Swift.String?
  public init(marketPlace: Swift.String? = nil, productId: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @objcMembers public class DSAPIEmailAddress : ObjectiveC.NSObject, Swift.Codable {
  @objc @DocuSignAPI.BoolFromString public var anchorAllowWhiteSpaceInCharacters: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorAllowWhiteSpaceInCharactersMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var anchorCaseSensitive: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorCaseSensitiveMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorHorizontalAlignment: Swift.String?
  @objc public var anchorHorizontalAlignmentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var anchorIgnoreIfNotPresent: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorIgnoreIfNotPresentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var anchorMatchWholeWord: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorMatchWholeWordMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorString: Swift.String?
  @objc public var anchorStringMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorTabProcessorVersion: Swift.String?
  @objc public var anchorTabProcessorVersionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorUnits: Swift.String?
  @objc public var anchorUnitsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorXOffset: Swift.String?
  @objc public var anchorXOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorYOffset: Swift.String?
  @objc public var anchorYOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var bold: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var boldMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var conditionalParentLabel: Swift.String?
  @objc public var conditionalParentLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var conditionalParentValue: Swift.String?
  @objc public var conditionalParentValueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var customTabId: Swift.String?
  @objc public var customTabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var documentId: Swift.String?
  @objc public var documentIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  @objc public var font: Swift.String?
  @objc public var fontColor: Swift.String?
  @objc public var fontColorMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var fontMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var fontSize: Swift.String?
  @objc public var fontSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var formOrder: Swift.String?
  @objc public var formOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var formPageLabel: Swift.String?
  @objc public var formPageLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var formPageNumber: Swift.String?
  @objc public var formPageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var height: Swift.String?
  @objc public var heightMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var italic: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var italicMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var localePolicy: DocuSignAPI.DSAPILocalePolicyTab?
  @objc public var mergeField: DocuSignAPI.DSAPIMergeField?
  @objc public var mergeFieldXml: Swift.String?
  @objc public var name: Swift.String?
  @objc public var nameMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var pageNumber: Swift.String?
  @objc public var pageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var recipientId: Swift.String?
  @objc public var recipientIdGuid: Swift.String?
  @objc public var recipientIdGuidMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var recipientIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var smartContractInformation: DocuSignAPI.DSAPISmartContractInformation?
  @objc public var source: Swift.String?
  @objc public var status: Swift.String?
  @objc public var statusMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabGroupLabels: [Swift.String]?
  @objc public var tabGroupLabelsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabId: Swift.String?
  @objc public var tabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabLabel: Swift.String?
  @objc public var tabLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabOrder: Swift.String?
  @objc public var tabOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabType: Swift.String?
  @objc public var tabTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var templateLocked: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var templateLockedMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var templateRequired: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var templateRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tooltip: Swift.String?
  @objc public var toolTipMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var underline: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var underlineMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var value: Swift.String?
  @objc public var valueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var width: Swift.String?
  @objc public var widthMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var xPosition: Swift.String?
  @objc public var xPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var yPosition: Swift.String?
  @objc public var yPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public init(anchorAllowWhiteSpaceInCharacters: Swift.Bool = false, anchorAllowWhiteSpaceInCharactersMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorCaseSensitive: Swift.Bool = false, anchorCaseSensitiveMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorHorizontalAlignment: Swift.String? = nil, anchorHorizontalAlignmentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorIgnoreIfNotPresent: Swift.Bool = false, anchorIgnoreIfNotPresentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorMatchWholeWord: Swift.Bool = false, anchorMatchWholeWordMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorString: Swift.String? = nil, anchorStringMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorTabProcessorVersion: Swift.String? = nil, anchorTabProcessorVersionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorUnits: Swift.String? = nil, anchorUnitsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorXOffset: Swift.String? = nil, anchorXOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorYOffset: Swift.String? = nil, anchorYOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, bold: Swift.Bool = false, boldMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, conditionalParentLabel: Swift.String? = nil, conditionalParentLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, conditionalParentValue: Swift.String? = nil, conditionalParentValueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, customTabId: Swift.String? = nil, customTabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, documentId: Swift.String? = nil, documentIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, font: Swift.String? = nil, fontColor: Swift.String? = nil, fontColorMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, fontMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, fontSize: Swift.String? = nil, fontSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formOrder: Swift.String? = nil, formOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formPageLabel: Swift.String? = nil, formPageLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formPageNumber: Swift.String? = nil, formPageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, height: Swift.String? = nil, heightMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, italic: Swift.Bool = false, italicMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, localePolicy: DocuSignAPI.DSAPILocalePolicyTab? = nil, mergeField: DocuSignAPI.DSAPIMergeField? = nil, mergeFieldXml: Swift.String? = nil, name: Swift.String? = nil, nameMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, pageNumber: Swift.String? = nil, pageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, recipientId: Swift.String? = nil, recipientIdGuid: Swift.String? = nil, recipientIdGuidMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, recipientIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, smartContractInformation: DocuSignAPI.DSAPISmartContractInformation? = nil, source: Swift.String? = nil, status: Swift.String? = nil, statusMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabGroupLabels: [Swift.String]? = nil, tabGroupLabelsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabId: Swift.String? = nil, tabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabLabel: Swift.String? = nil, tabLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabOrder: Swift.String? = nil, tabOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabType: Swift.String? = nil, tabTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, templateLocked: Swift.Bool = false, templateLockedMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, templateRequired: Swift.Bool = false, templateRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tooltip: Swift.String? = nil, toolTipMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, underline: Swift.Bool = false, underlineMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, value: Swift.String? = nil, valueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, width: Swift.String? = nil, widthMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, xPosition: Swift.String? = nil, xPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, yPosition: Swift.String? = nil, yPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIDelayedRoutingApiModel : Swift.Codable {
  public var resumeDate: Foundation.Date?
  public var rules: [DocuSignAPI.DSAPIEnvelopeDelayRuleApiModel]?
  public var status: Swift.String?
  public init(resumeDate: Foundation.Date? = nil, rules: [DocuSignAPI.DSAPIEnvelopeDelayRuleApiModel]? = nil, status: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIRecipientOption : Swift.Codable {
  public var email: Swift.String?
  public var name: Swift.String?
  public var recipientLabel: Swift.String?
  public var roleName: Swift.String?
  public var signingGroupId: Swift.String?
  public init(email: Swift.String? = nil, name: Swift.String? = nil, recipientLabel: Swift.String? = nil, roleName: Swift.String? = nil, signingGroupId: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @objcMembers public class DSAPIEmailSettings : ObjectiveC.NSObject, Swift.Codable {
  @objc public var bccEmailAddresses: [DocuSignAPI.DSAPIBccEmailAddress]?
  @objc public var replyEmailAddressOverride: Swift.String?
  @objc public var replyEmailNameOverride: Swift.String?
  @objc override dynamic public init()
  @objc public init(bccEmailAddresses: [DocuSignAPI.DSAPIBccEmailAddress]? = nil, replyEmailAddressOverride: Swift.String? = nil, replyEmailNameOverride: Swift.String? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @objcMembers public class DSAPIDateSigned : ObjectiveC.NSObject, Swift.Codable {
  @objc @DocuSignAPI.BoolFromString public var anchorAllowWhiteSpaceInCharacters: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorAllowWhiteSpaceInCharactersMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var anchorCaseSensitive: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorCaseSensitiveMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorHorizontalAlignment: Swift.String?
  @objc public var anchorHorizontalAlignmentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var anchorIgnoreIfNotPresent: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorIgnoreIfNotPresentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var anchorMatchWholeWord: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorMatchWholeWordMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorString: Swift.String?
  @objc public var anchorStringMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorTabProcessorVersion: Swift.String?
  @objc public var anchorTabProcessorVersionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorUnits: Swift.String?
  @objc public var anchorUnitsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorXOffset: Swift.String?
  @objc public var anchorXOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorYOffset: Swift.String?
  @objc public var anchorYOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var bold: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var boldMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var conditionalParentLabel: Swift.String?
  @objc public var conditionalParentLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var conditionalParentValue: Swift.String?
  @objc public var conditionalParentValueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var customTabId: Swift.String?
  @objc public var customTabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var documentId: Swift.String?
  @objc public var documentIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  @objc public var font: Swift.String?
  @objc public var fontColor: Swift.String?
  @objc public var fontColorMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var fontMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var fontSize: Swift.String?
  @objc public var fontSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var formOrder: Swift.String?
  @objc public var formOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var formPageLabel: Swift.String?
  @objc public var formPageLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var formPageNumber: Swift.String?
  @objc public var formPageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var height: Swift.String?
  @objc public var heightMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var italic: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var italicMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var localePolicy: DocuSignAPI.DSAPILocalePolicyTab?
  @objc public var mergeField: DocuSignAPI.DSAPIMergeField?
  @objc public var mergeFieldXml: Swift.String?
  @objc public var name: Swift.String?
  @objc public var nameMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var pageNumber: Swift.String?
  @objc public var pageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var recipientId: Swift.String?
  @objc public var recipientIdGuid: Swift.String?
  @objc public var recipientIdGuidMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var recipientIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var smartContractInformation: DocuSignAPI.DSAPISmartContractInformation?
  @objc public var source: Swift.String?
  @objc public var status: Swift.String?
  @objc public var statusMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabGroupLabels: [Swift.String]?
  @objc public var tabGroupLabelsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabId: Swift.String?
  @objc public var tabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabLabel: Swift.String?
  @objc public var tabLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabOrder: Swift.String?
  @objc public var tabOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabType: Swift.String?
  @objc public var tabTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var templateLocked: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var templateLockedMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var templateRequired: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var templateRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tooltip: Swift.String?
  @objc public var toolTipMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var underline: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var underlineMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var value: Swift.String?
  @objc public var valueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var width: Swift.String?
  @objc public var widthMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var xPosition: Swift.String?
  @objc public var xPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var yPosition: Swift.String?
  @objc public var yPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc override dynamic public init()
  public init(anchorAllowWhiteSpaceInCharacters: Swift.Bool = false, anchorAllowWhiteSpaceInCharactersMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorCaseSensitive: Swift.Bool = false, anchorCaseSensitiveMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorHorizontalAlignment: Swift.String? = nil, anchorHorizontalAlignmentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorIgnoreIfNotPresent: Swift.Bool = false, anchorIgnoreIfNotPresentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorMatchWholeWord: Swift.Bool = false, anchorMatchWholeWordMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorString: Swift.String? = nil, anchorStringMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorTabProcessorVersion: Swift.String? = nil, anchorTabProcessorVersionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorUnits: Swift.String? = nil, anchorUnitsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorXOffset: Swift.String? = nil, anchorXOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorYOffset: Swift.String? = nil, anchorYOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, bold: Swift.Bool = false, boldMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, conditionalParentLabel: Swift.String? = nil, conditionalParentLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, conditionalParentValue: Swift.String? = nil, conditionalParentValueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, customTabId: Swift.String? = nil, customTabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, documentId: Swift.String? = nil, documentIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, font: Swift.String? = nil, fontColor: Swift.String? = nil, fontColorMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, fontMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, fontSize: Swift.String? = nil, fontSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formOrder: Swift.String? = nil, formOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formPageLabel: Swift.String? = nil, formPageLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formPageNumber: Swift.String? = nil, formPageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, height: Swift.String? = nil, heightMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, italic: Swift.Bool = false, italicMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, localePolicy: DocuSignAPI.DSAPILocalePolicyTab? = nil, mergeField: DocuSignAPI.DSAPIMergeField? = nil, mergeFieldXml: Swift.String? = nil, name: Swift.String? = nil, nameMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, pageNumber: Swift.String? = nil, pageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, recipientId: Swift.String? = nil, recipientIdGuid: Swift.String? = nil, recipientIdGuidMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, recipientIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, smartContractInformation: DocuSignAPI.DSAPISmartContractInformation? = nil, source: Swift.String? = nil, status: Swift.String? = nil, statusMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabGroupLabels: [Swift.String]? = nil, tabGroupLabelsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabId: Swift.String? = nil, tabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabLabel: Swift.String? = nil, tabLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabOrder: Swift.String? = nil, tabOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabType: Swift.String? = nil, tabTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, templateLocked: Swift.Bool = false, templateLockedMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, templateRequired: Swift.Bool = false, templateRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tooltip: Swift.String? = nil, toolTipMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, underline: Swift.Bool = false, underlineMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, value: Swift.String? = nil, valueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, width: Swift.String? = nil, widthMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, xPosition: Swift.String? = nil, xPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, yPosition: Swift.String? = nil, yPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @objcMembers public class DSAPIAccountSettingsInformation : ObjectiveC.NSObject, Swift.Codable {
  public var accessCodeFormat: DocuSignAPI.DSAPIAccessCodeFormat?
  @objc public var accountDateTimeFormat: Swift.String?
  @objc public var accountDateTimeFormatMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc public var accountDefaultLanguage: Swift.String?
  @objc public var accountDefaultLanguageMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc public var accountName: Swift.String?
  @objc public var accountNameMetadata: DocuSignAPI.DSAPISettingsMetadata?
  public var accountNotification: DocuSignAPI.DSAPIAccountNotification?
  public var accountUISettings: DocuSignAPI.DSAPIAccountUISettings?
  @objc @DocuSignAPI.BoolFromString public var adoptSigConfig: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var adoptSigConfigMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var advancedCorrect: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var advancedCorrectMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var allowAccessCodeFormat: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowAccessCodeFormatMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var allowAccountManagementGranular: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowAccountManagementGranularMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var allowAccountMemberNameChange: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowAccountMemberNameChangeMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var allowAdvancedRecipientRoutingConditional: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowAdvancedRecipientRoutingConditionalMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var allowAgentNameEmailEdit: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowAgentNameEmailEditMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var allowAgreementActions: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowAgreementActionsMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var allowAutoNavSettings: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowAutoNavSettingsMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var allowAutoTagging: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowAutoTaggingMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var allowBulkSend: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowBulkSendMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var allowCDWithdraw: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowCDWithdrawMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var allowConnectHttpListenerConfigs: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc @DocuSignAPI.BoolFromString public var allowConnectSendFinishLater: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowConnectSendFinishLaterMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var allowConnectUnifiedPayloadUI: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc @DocuSignAPI.BoolFromString public var allowConsumerDisclosureOverride: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowConsumerDisclosureOverrideMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var allowDataDownload: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowDataDownloadMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var allowDelayedRouting: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowDelayedRoutingMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var allowDelegatedSigning: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowDelegatedSigningMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var allowDocumentDisclosures: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowDocumentDisclosuresMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var allowDocumentsOnSignedEnvelopes: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowDocumentsOnSignedEnvelopesMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var allowDocumentVisibility: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowDocumentVisibilityMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var allowEHankoStamps: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowEHankoStampsMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var allowENoteEOriginal: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowENoteEOriginalMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var allowEnvelopeCorrect: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowEnvelopeCorrectMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var allowEnvelopeCustodyTransfer: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowEnvelopeCustodyTransferMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var allowEnvelopeCustomFields: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowEnvelopeCustomFieldsMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var allowEnvelopePublishReporting: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowEnvelopePublishReportingMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var allowEnvelopeReporting: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowEnvelopeReportingMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var allowExpression: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowExpressionMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var allowExpressSignerCertificate: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowExpressSignerCertificateMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var allowExtendedSendingResourceFile: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowExtendedSendingResourceFileMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var allowExternalLinkedAccounts: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowExternalLinkedAccountsMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var allowExternalSignaturePad: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowExternalSignaturePadMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var allowIDVLevel1: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowIDVLevel1Metadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var allowIDVLevel2: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowIDVLevel2Metadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var allowIDVLevel3: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowIDVLevel3Metadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var allowIDVPlatform: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowIDVPlatformMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var allowInPerson: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowInPersonMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var allowManagedStamps: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowManagedStampsMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var allowMarkup: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowMarkupMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var allowMemberTimeZone: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowMemberTimeZoneMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var allowMergeFields: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowMergeFieldsMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var allowMultipleBrandProfiles: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowMultipleBrandProfilesMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var allowMultipleSignerAttachments: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowMultipleSignerAttachmentsMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var allowNonUSPhoneAuth: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowNonUSPhoneAuthMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var allowOcrOfEnvelopeDocuments: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowOcrOfEnvelopeDocumentsMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var allowOfflineSigning: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowOfflineSigningMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var allowOpenTrustSignerCertificate: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowOpenTrustSignerCertificateMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var allowOrganizationDocusignMonitor: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowOrganizationDocusignMonitorMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var allowOrganizationDomainUserManagement: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowOrganizationDomainUserManagementMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var allowOrganizations: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowOrganizationsMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var allowOrganizationSsoManagement: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowOrganizationSsoManagementMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var allowOrganizationToUseRemoteNotary: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowOrganizationToUseRemoteNotaryMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var allowPaymentProcessing: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowPaymentProcessingMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var allowPersonalSignerCertificate: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowPersonalSignerCertificateMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var allowPhoneAuthentication: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowPhoneAuthenticationMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var allowPhoneAuthOverride: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowPhoneAuthOverrideMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var allowPrivateSigningGroups: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowPrivateSigningGroupsMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var allowRecipientConnect: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowRecipientConnectMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var allowReminders: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowRemindersMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var allowRemoteNotary: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowRemoteNotaryMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var allowResourceFileBranding: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowResourceFileBrandingMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var allowSafeBioPharmaSignerCertificate: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowSafeBioPharmaSignerCertificateMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var allowScheduledSending: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowScheduledSendingMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var allowSecurityAppliance: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowSecurityApplianceMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var allowSendToCertifiedDelivery: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowSendToCertifiedDeliveryMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var allowSendToIntermediary: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowSendToIntermediaryMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var allowServerTemplates: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowServerTemplatesMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var allowSetEmbeddedRecipientStartURL: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowSetEmbeddedRecipientStartURLMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var allowSharedTabs: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowSharedTabsMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var allowSignatureStamps: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowSignatureStampsMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var allowSignDocumentFromHomePage: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowSignDocumentFromHomePageMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var allowSignerReassign: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowSignerReassignMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var allowSignerReassignOverride: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowSignerReassignOverrideMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var allowSigningExtensions: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowSigningExtensionsMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var allowSigningGroups: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowSigningGroupsMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var allowSigningInsights: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowSigningInsightsMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var allowSigningRadioDeselect: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowSigningRadioDeselectMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var allowSignNow: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowSignNowMetadata: Swift.String?
  @objc @DocuSignAPI.BoolFromString public var allowSMSDelivery: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowSMSDeliveryMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var allowSocialIdLogin: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowSocialIdLoginMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var allowSupplementalDocuments: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowSupplementalDocumentsMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var allowUsersToAccessDirectory: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowUsersToAccessDirectoryMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var allowValueInsights: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowValueInsightsMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc public var anchorPopulationScope: Swift.String?
  @objc public var anchorPopulationScopeMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var anchorTagVersionedPlacementEnabled: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorTagVersionedPlacementMetadataEnabled: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var attachCompletedEnvelope: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var attachCompletedEnvelopeMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc public var authenticationCheck: Swift.String?
  @objc public var authenticationCheckMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc public var autoNavRule: Swift.String?
  @objc public var autoNavRuleMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var autoProvisionSignerAccount: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var autoProvisionSignerAccountMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var bccEmailArchive: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var bccEmailArchiveMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc public var betaSwitchConfiguration: Swift.String?
  @objc public var betaSwitchConfigurationMetadata: DocuSignAPI.DSAPISettingsMetadata?
  public var billingAddress: DocuSignAPI.DSAPIAddressInformation?
  @objc public var billingAddressMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var bulkSend: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var bulkSendMaxCopiesInBatch: Swift.String?
  @objc public var bulkSendMaxUnprocessedEnvelopesCount: Swift.String?
  @objc public var bulkSendMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var canSelfBrandSend: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var canSelfBrandSendMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var canSelfBrandSign: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var canSelfBrandSignMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var canUseSalesforceOAuth: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var canUseSalesforceOAuthMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc public var captureVoiceRecording: Swift.String?
  @objc public var captureVoiceRecordingMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var cfr21SimplifiedSigningEnabled: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var cfr21SimplifiedSigningEnabledMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var cfrUseWideImage: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var cfrUseWideImageMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var checkForMultipleAdminsOnAccount: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var checkForMultipleAdminsOnAccountMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var chromeSignatureEnabled: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var chromeSignatureEnabledMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var commentEmailShowMessageText: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var commentEmailShowMessageTextMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var commentsAllowEnvelopeOverride: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var commentsAllowEnvelopeOverrideMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var conditionalFieldsEnabled: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var conditionalFieldsEnabledMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc public var consumerDisclosureFrequency: Swift.String?
  @objc public var consumerDisclosureFrequencyMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var convertPdfFields: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var convertPdfFieldsMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc public var dataPopulationScope: Swift.String?
  @objc public var dataPopulationScopeMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var disableAutoTemplateMatching: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var disableAutoTemplateMatchingMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var disableMobileApp: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var disableMobileAppMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var disableMobilePushNotifications: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var disableMobilePushNotificationsMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var disableMobileSending: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var disableMobileSendingMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var disableMultipleSessions: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var disableMultipleSessionsMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc public var disablePurgeNotificationsForSenderMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var disableSignerCertView: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var disableSignerCertViewMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var disableSignerHistoryView: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var disableSignerHistoryViewMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var disableStyleSignature: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var disableStyleSignatureMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var disableUploadSignature: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var disableUploadSignatureMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var disableUserSharing: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var disableUserSharingMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc public var displayBetaSwitch: Swift.String?
  @objc public var displayBetaSwitchMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc public var documentConversionRestrictions: Swift.String?
  @objc public var documentConversionRestrictionsMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc public var documentRetention: Swift.String?
  @objc public var documentRetentionMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var documentRetentionPurgeTabs: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var documentVisibility: Swift.String?
  @objc public var documentVisibilityMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc public var dssSIGN28411EnableLeavePagePromptRadminOption: Swift.String?
  @objc public var dssSIGN29182SlideUpBarRadminOption: Swift.String?
  @objc public var emailTemplateVersion: Swift.String?
  @objc public var emailTemplateVersionMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var enableAccessCodeGenerator: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var enableAccessCodeGeneratorMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var enableAdvancedPayments: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var enableAdvancedPaymentsMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var enableAdvancedPowerForms: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var enableAdvancedPowerFormsMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var enableAgreementActionsForCLM: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var enableAgreementActionsForCLMMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var enableAgreementActionsForESign: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var enableAgreementActionsForESignMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var enableAutoNav: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var enableAutoNavMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var enableBccDummyLink: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var enableBccDummyLinkMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var enableCalculatedFields: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var enableCalculatedFieldsMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var enableClickwraps: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var enableClickwrapsMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var enableCommentsHistoryDownloadInSigning: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var enableCommentsHistoryDownloadInSigningMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var enableCustomerSatisfactionMetricTracking: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var enableCustomerSatisfactionMetricTrackingMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var enableDSPro: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var enableDSProMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var enableEnvelopeStampingByAccountAdmin: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var enableEnvelopeStampingByAccountAdminMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var enableEnvelopeStampingByDSAdmin: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var enableEnvelopeStampingByDSAdminMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var enableEsignCommunities: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var enableEsignCommunitiesMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var enableIDFxIntuitKBA: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var enableIDFxIntuitKBAMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var enableIDFxPhoneAuthentication: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var enableIDFxPhoneAuthenticationMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var enableInBrowserEditor: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var enableInBrowserEditorMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var enablePaymentProcessing: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var enablePaymentProcessingMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var enablePDFAConversion: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var enablePDFAConversionMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var enablePowerForm: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc @DocuSignAPI.BoolFromString public var enablePowerFormDirect: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var enablePowerFormDirectMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc public var enablePowerFormMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var enableRecipientDomainValidation: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var enableRecipientDomainValidationMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var enableRecipientMayProvidePhoneNumber: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var enableRecipientMayProvidePhoneNumberMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var enableReportLinks: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var enableReportLinksMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var enableRequireSignOnPaper: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var enableRequireSignOnPaperMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var enableReservedDomain: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var enableReservedDomainMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var enableResponsiveSigning: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var enableResponsiveSigningMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var enableScheduledRelease: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var enableScheduledReleaseMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var enableSearch: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var enableSearchMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var enableSearchUI: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var enableSearchUIMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var enableSendingTagsFontSettings: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var enableSendingTagsFontSettingsMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var enableSendToAgent: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var enableSendToAgentMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var enableSendToIntermediary: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var enableSendToIntermediaryMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var enableSendToManage: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var enableSendToManageMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var enableSequentialSigningAPI: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var enableSequentialSigningAPIMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var enableSequentialSigningUI: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var enableSequentialSigningUIMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var enableSignerAttachments: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var enableSignerAttachmentsMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var enableSigningExtensionComments: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var enableSigningExtensionCommentsMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var enableSigningExtensionConversations: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var enableSigningExtensionConversationsMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var enableSigningOrderSettingsForAccount: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var enableSigningOrderSettingsForAccountMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var enableSignOnPaper: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var enableSignOnPaperMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var enableSignOnPaperOverride: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var enableSignOnPaperOverrideMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var enableSignWithNotary: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var enableSignWithNotaryMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var enableSmartContracts: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var enableSmartContractsMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var enableSMSAuthentication: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var enableSMSAuthenticationMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var enableSMSDeliveryAdditionalNotification: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var enableSMSDeliveryAdditionalNotificationMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var enableSMSDeliveryPrimary: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc @DocuSignAPI.BoolFromString public var enableSocialIdLogin: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var enableSocialIdLoginMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var enableStrikeThrough: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var enableStrikeThroughMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var enableTransactionPoint: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var enableTransactionPointMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var enableVaulting: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var enableVaultingMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var enableWitnessing: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var enableWitnessingMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var enforceTemplateNameUniqueness: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var enforceTemplateNameUniquenessMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc public var envelopeIntegrationAllowed: Swift.String?
  @objc public var envelopeIntegrationAllowedMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var envelopeIntegrationEnabled: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var envelopeIntegrationEnabledMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var envelopeStampingDefaultValue: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var envelopeStampingDefaultValueMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc public var exitPrompt: Swift.String?
  @objc public var exitPromptMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var expressSend: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc @DocuSignAPI.BoolFromString public var expressSendAllowTabs: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var expressSendAllowTabsMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc public var expressSendMetadata: DocuSignAPI.DSAPISettingsMetadata?
  public var externalDocumentSources: DocuSignAPI.DSAPIExternalDocumentSources?
  @objc public var externalSignaturePadType: Swift.String?
  @objc public var externalSignaturePadTypeMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var faxOutEnabled: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var faxOutEnabledMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc public var finishReminder: Swift.String?
  @objc public var finishReminderMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var guidedFormsHtmlAllowed: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var guidedFormsHtmlAllowedMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc public var hasRecipientConnectClaimedDomain: Swift.String?
  @objc @DocuSignAPI.BoolFromString public var hideAccountAddressInCoC: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var hideAccountAddressInCoCMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var hidePricing: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var hidePricingMetadata: DocuSignAPI.DSAPISettingsMetadata?
  public var idCheckConfigurations: [DocuSignAPI.DSAPIIdCheckConfiguration]?
  @objc public var idCheckExpire: Swift.String?
  @objc public var idCheckExpireDays: Swift.String?
  @objc public var idCheckExpireDaysMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc public var idCheckExpireMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc public var idCheckExpireMinutes: Swift.String?
  @objc public var idCheckExpireMinutesMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc public var idCheckRequired: Swift.String?
  @objc public var idCheckRequiredMetadata: DocuSignAPI.DSAPISettingsMetadata?
  public var identityVerification: [DocuSignAPI.DSAPIAccountIdentityVerificationWorkflow]?
  @objc public var identityVerificationMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc public var idfxPhoneAuthenticationOverride: Swift.String?
  @objc public var idfxPhoneAuthenticationOverrideMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc public var ignoreErrorIfAnchorTabNotFound: Swift.String?
  @objc public var ignoreErrorIfAnchorTabNotFoundMetadataEnabled: DocuSignAPI.DSAPISettingsMetadata?
  @objc public var inPersonIDCheckQuestion: Swift.String?
  @objc public var inPersonIDCheckQuestionMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var inPersonSigningEnabled: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var inPersonSigningEnabledMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var inSessionEnabled: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var inSessionEnabledMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var inSessionSuppressEmails: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var inSessionSuppressEmailsMetadata: DocuSignAPI.DSAPISettingsMetadata?
  public var linkedExternalPrimaryAccounts: [DocuSignAPI.DSAPILinkedExternalPrimaryAccount]?
  @objc public var maximumSigningGroups: Swift.String?
  @objc public var maximumSigningGroupsMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc public var maximumUsersPerSigningGroup: Swift.String?
  @objc public var maximumUsersPerSigningGroupMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc public var maxNumberOfCustomStamps: Swift.String?
  @objc public var mobileSessionTimeout: Swift.String?
  @objc public var mobileSessionTimeoutMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc public var numberOfActiveCustomStamps: Swift.String?
  @objc @DocuSignAPI.BoolFromString public var optInMobileSigningV02: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var optInMobileSigningV02Metadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var optOutAutoNavTextAndTabColorUpdates: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var optOutAutoNavTextAndTabColorUpdatesMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var optOutNewPlatformSeal: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var optOutNewPlatformSealPlatformMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var phoneAuthRecipientMayProvidePhoneNumber: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var phoneAuthRecipientMayProvidePhoneNumberMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc public var pkiSignDownloadedPDFDocs: Swift.String?
  @objc public var pkiSignDownloadedPDFDocsMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc public var readOnlyMode: Swift.String?
  @objc public var readOnlyModeMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var recipientsCanSignOffline: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var recipientsCanSignOfflineMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var recipientSigningAutoNavigationControl: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var recipientSigningAutoNavigationControlMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var require21CFRpt11Compliance: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var require21CFRpt11ComplianceMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var requireDeclineReason: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var requireDeclineReasonMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var requireExternalUserManagement: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var requireExternalUserManagementMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc public var requireSignerCertificateType: Swift.String?
  @objc public var requireSignerCertificateTypeMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc public var rsaVeridAccountName: Swift.String?
  @objc public var rsaVeridPassword: Swift.String?
  @objc public var rsaVeridRuleset: Swift.String?
  @objc public var rsaVeridUserId: Swift.String?
  @objc public var selfSignedRecipientEmailDocument: Swift.String?
  @objc public var selfSignedRecipientEmailDocumentMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var selfSignedRecipientEmailDocumentUserOverride: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var selfSignedRecipientEmailDocumentUserOverrideMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var senderCanSignInEachLocation: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var senderCanSignInEachLocationMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var senderMustAuthenticateSigning: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var senderMustAuthenticateSigningMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc public var sendingTagsFontColor: Swift.String?
  @objc public var sendingTagsFontColorMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc public var sendingTagsFontName: Swift.String?
  @objc public var sendingTagsFontNameMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc public var sendingTagsFontSize: Swift.String?
  @objc public var sendingTagsFontSizeMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc public var sendLockoutRecipientNotification: Swift.String?
  @objc public var sendLockoutRecipientNotificationMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var sendToCertifiedDeliveryEnabled: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var sendToCertifiedDeliveryEnabledMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc public var sessionTimeout: Swift.String?
  @objc public var sessionTimeoutMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var setRecipEmailLang: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var setRecipEmailLangMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var setRecipSignLang: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var setRecipSignLangMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var sharedTemplateFolders: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var sharedTemplateFoldersMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var showCompleteDialogInEmbeddedSession: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var showCompleteDialogInEmbeddedSessionMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var showConditionalRoutingOnSend: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var showConditionalRoutingOnSendMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var showInitialConditionalFields: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var showInitialConditionalFieldsMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var showLocalizedWatermarks: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var showLocalizedWatermarksMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var showMaskedFieldsWhenDownloadingDocumentAsSender: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var showMaskedFieldsWhenDownloadingDocumentAsSenderMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var showTutorials: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var showTutorialsMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc public var signatureProviders: [Swift.String]?
  @objc public var signatureProvidersMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc public var signDateFormat: Swift.String?
  @objc public var signDateFormatMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc public var signDateTimeAccountLanguageOverride: Swift.String?
  @objc public var signDateTimeAccountLanguageOverrideMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc public var signDateTimeAccountTimezoneOverride: Swift.String?
  @objc public var signDateTimeAccountTimezoneOverrideMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var signerAttachCertificateToEnvelopePDF: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var signerAttachCertificateToEnvelopePDFMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var signerAttachConcat: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var signerAttachConcatMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var signerCanCreateAccount: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var signerCanCreateAccountMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var signerCanSignOnMobile: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var signerCanSignOnMobileMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var signerInSessionUseEnvelopeCompleteEmail: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var signerInSessionUseEnvelopeCompleteEmailMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc public var signerLoginRequirements: Swift.String?
  @objc public var signerLoginRequirementsMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var signerMustHaveAccount: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var signerMustHaveAccountMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var signerMustLoginToSign: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var signerMustLoginToSignMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var signerShowSecureFieldInitialValues: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var signerShowSecureFieldInitialValuesMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc public var signingSessionTimeout: Swift.String?
  @objc public var signingSessionTimeoutMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc public var signingUiVersion: Swift.String?
  @objc public var signingUiVersionMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc public var signTimeFormat: Swift.String?
  @objc public var signTimeFormatMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var signTimeShowAmPm: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var signTimeShowAmPmMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var simplifiedSendingEnabled: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var simplifiedSendingEnabledMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var singleSignOnEnabled: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var singleSignOnEnabledMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var skipAuthCompletedEnvelopes: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var skipAuthCompletedEnvelopesMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var socialIdRecipAuth: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var socialIdRecipAuthMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var specifyDocumentVisibility: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var specifyDocumentVisibilityMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var startInAdvancedCorrect: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var startInAdvancedCorrectMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var supplementalDocumentsMustAccept: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var supplementalDocumentsMustAcceptMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var supplementalDocumentsMustRead: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var supplementalDocumentsMustReadMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var supplementalDocumentsMustView: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var supplementalDocumentsMustViewMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var suppressCertificateEnforcement: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var suppressCertificateEnforcementMetadata: DocuSignAPI.DSAPISettingsMetadata?
  public var tabAccountSettings: DocuSignAPI.DSAPITabAccountSettings?
  @objc public var timezoneOffsetAPI: Swift.String?
  @objc public var timezoneOffsetAPIMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc public var timezoneOffsetUI: Swift.String?
  @objc public var timezoneOffsetUIMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc public var universalSignatureOptIn: Swift.String?
  @objc @DocuSignAPI.BoolFromString public var useAccountLevelEmail: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var useAccountLevelEmailMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var useConsumerDisclosure: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var useConsumerDisclosureMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var useConsumerDisclosureWithinAccount: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var useConsumerDisclosureWithinAccountMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var useDerivedKeys: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var useDerivedKeysMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var useDocuSignExpressSignerCertificate: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var useDocuSignExpressSignerCertificateMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var useMultiAppGroupsData: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var useMultiAppGroupsDataMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var useNewBlobForPdf: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var useNewBlobForPdfMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var useSAFESignerCertificates: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var useSAFESignerCertificatesMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var usesAPI: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var usesAPIMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var useSignatureProviderPlatform: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var useSignatureProviderPlatformMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var validationsAllowed: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var validationsAllowedMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc public var validationsBrand: Swift.String?
  @objc public var validationsBrandMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc public var validationsCadence: Swift.String?
  @objc public var validationsCadenceMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var validationsEnabled: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var validationsEnabledMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc public var validationsReport: Swift.String?
  @objc public var validationsReportMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var waterMarkEnabled: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var waterMarkEnabledMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var writeReminderToEnvelopeHistory: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var writeReminderToEnvelopeHistoryMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc public var wurflMinAllowableScreenSize: Swift.String?
  @objc public var wurflMinAllowableScreenSizeMetadata: DocuSignAPI.DSAPISettingsMetadata?
  public init(accessCodeFormat: DocuSignAPI.DSAPIAccessCodeFormat? = nil, accountDateTimeFormat: Swift.String? = nil, accountDateTimeFormatMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, accountDefaultLanguage: Swift.String? = nil, accountDefaultLanguageMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, accountName: Swift.String? = nil, accountNameMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, accountNotification: DocuSignAPI.DSAPIAccountNotification? = nil, accountUISettings: DocuSignAPI.DSAPIAccountUISettings? = nil, adoptSigConfig: Swift.Bool = false, adoptSigConfigMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, advancedCorrect: Swift.Bool = false, advancedCorrectMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowAccessCodeFormat: Swift.Bool = false, allowAccessCodeFormatMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowAccountManagementGranular: Swift.Bool = false, allowAccountManagementGranularMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowAccountMemberNameChange: Swift.Bool = false, allowAccountMemberNameChangeMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowAdvancedRecipientRoutingConditional: Swift.Bool = false, allowAdvancedRecipientRoutingConditionalMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowAgentNameEmailEdit: Swift.Bool = false, allowAgentNameEmailEditMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowAgreementActions: Swift.Bool = false, allowAgreementActionsMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowAutoNavSettings: Swift.Bool = false, allowAutoNavSettingsMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowAutoTagging: Swift.Bool = false, allowAutoTaggingMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowBulkSend: Swift.Bool = false, allowBulkSendMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowCDWithdraw: Swift.Bool = false, allowCDWithdrawMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowConnectHttpListenerConfigs: Swift.Bool = false, allowConnectSendFinishLater: Swift.Bool = false, allowConnectSendFinishLaterMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowConnectUnifiedPayloadUI: Swift.Bool = false, allowConsumerDisclosureOverride: Swift.Bool = false, allowConsumerDisclosureOverrideMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowDataDownload: Swift.Bool = false, allowDataDownloadMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowDelayedRouting: Swift.Bool = false, allowDelayedRoutingMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowDelegatedSigning: Swift.Bool = false, allowDelegatedSigningMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowDocumentDisclosures: Swift.Bool = false, allowDocumentDisclosuresMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowDocumentsOnSignedEnvelopes: Swift.Bool = false, allowDocumentsOnSignedEnvelopesMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowDocumentVisibility: Swift.Bool = false, allowDocumentVisibilityMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowEHankoStamps: Swift.Bool = false, allowEHankoStampsMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowENoteEOriginal: Swift.Bool = false, allowENoteEOriginalMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowEnvelopeCorrect: Swift.Bool = false, allowEnvelopeCorrectMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowEnvelopeCustodyTransfer: Swift.Bool = false, allowEnvelopeCustodyTransferMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowEnvelopeCustomFields: Swift.Bool = false, allowEnvelopeCustomFieldsMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowEnvelopePublishReporting: Swift.Bool = false, allowEnvelopePublishReportingMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowEnvelopeReporting: Swift.Bool = false, allowEnvelopeReportingMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowExpression: Swift.Bool = false, allowExpressionMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowExpressSignerCertificate: Swift.Bool = false, allowExpressSignerCertificateMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowExtendedSendingResourceFile: Swift.Bool = false, allowExtendedSendingResourceFileMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowExternalLinkedAccounts: Swift.Bool = false, allowExternalLinkedAccountsMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowExternalSignaturePad: Swift.Bool = false, allowExternalSignaturePadMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowIDVLevel1: Swift.Bool = false, allowIDVLevel1Metadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowIDVLevel2: Swift.Bool = false, allowIDVLevel2Metadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowIDVLevel3: Swift.Bool = false, allowIDVLevel3Metadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowIDVPlatform: Swift.Bool = false, allowIDVPlatformMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowInPerson: Swift.Bool = false, allowInPersonMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowManagedStamps: Swift.Bool = false, allowManagedStampsMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowMarkup: Swift.Bool = false, allowMarkupMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowMemberTimeZone: Swift.Bool = false, allowMemberTimeZoneMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowMergeFields: Swift.Bool = false, allowMergeFieldsMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowMultipleBrandProfiles: Swift.Bool = false, allowMultipleBrandProfilesMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowMultipleSignerAttachments: Swift.Bool = false, allowMultipleSignerAttachmentsMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowNonUSPhoneAuth: Swift.Bool = false, allowNonUSPhoneAuthMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowOcrOfEnvelopeDocuments: Swift.Bool = false, allowOcrOfEnvelopeDocumentsMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowOfflineSigning: Swift.Bool = false, allowOfflineSigningMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowOpenTrustSignerCertificate: Swift.Bool = false, allowOpenTrustSignerCertificateMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowOrganizationDocusignMonitor: Swift.Bool = false, allowOrganizationDocusignMonitorMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowOrganizationDomainUserManagement: Swift.Bool = false, allowOrganizationDomainUserManagementMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowOrganizations: Swift.Bool = false, allowOrganizationsMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowOrganizationSsoManagement: Swift.Bool = false, allowOrganizationSsoManagementMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowOrganizationToUseRemoteNotary: Swift.Bool = false, allowOrganizationToUseRemoteNotaryMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowPaymentProcessing: Swift.Bool = false, allowPaymentProcessingMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowPersonalSignerCertificate: Swift.Bool = false, allowPersonalSignerCertificateMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowPhoneAuthentication: Swift.Bool = false, allowPhoneAuthenticationMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowPhoneAuthOverride: Swift.Bool = false, allowPhoneAuthOverrideMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowPrivateSigningGroups: Swift.Bool = false, allowPrivateSigningGroupsMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowRecipientConnect: Swift.Bool = false, allowRecipientConnectMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowReminders: Swift.Bool = false, allowRemindersMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowRemoteNotary: Swift.Bool = false, allowRemoteNotaryMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowResourceFileBranding: Swift.Bool = false, allowResourceFileBrandingMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowSafeBioPharmaSignerCertificate: Swift.Bool = false, allowSafeBioPharmaSignerCertificateMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowScheduledSending: Swift.Bool = false, allowScheduledSendingMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowSecurityAppliance: Swift.Bool = false, allowSecurityApplianceMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowSendToCertifiedDelivery: Swift.Bool = false, allowSendToCertifiedDeliveryMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowSendToIntermediary: Swift.Bool = false, allowSendToIntermediaryMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowServerTemplates: Swift.Bool = false, allowServerTemplatesMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowSetEmbeddedRecipientStartURL: Swift.Bool = false, allowSetEmbeddedRecipientStartURLMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowSharedTabs: Swift.Bool = false, allowSharedTabsMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowSignatureStamps: Swift.Bool = false, allowSignatureStampsMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowSignDocumentFromHomePage: Swift.Bool = false, allowSignDocumentFromHomePageMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowSignerReassign: Swift.Bool = false, allowSignerReassignMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowSignerReassignOverride: Swift.Bool = false, allowSignerReassignOverrideMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowSigningExtensions: Swift.Bool = false, allowSigningExtensionsMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowSigningGroups: Swift.Bool = false, allowSigningGroupsMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowSigningInsights: Swift.Bool = false, allowSigningInsightsMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowSigningRadioDeselect: Swift.Bool = false, allowSigningRadioDeselectMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowSignNow: Swift.Bool = false, allowSignNowMetadata: Swift.String? = nil, allowSMSDelivery: Swift.Bool = false, allowSMSDeliveryMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowSocialIdLogin: Swift.Bool = false, allowSocialIdLoginMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowSupplementalDocuments: Swift.Bool = false, allowSupplementalDocumentsMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowUsersToAccessDirectory: Swift.Bool = false, allowUsersToAccessDirectoryMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowValueInsights: Swift.Bool = false, allowValueInsightsMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, anchorPopulationScope: Swift.String? = nil, anchorPopulationScopeMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, anchorTagVersionedPlacementEnabled: Swift.Bool = false, anchorTagVersionedPlacementMetadataEnabled: DocuSignAPI.DSAPISettingsMetadata? = nil, attachCompletedEnvelope: Swift.Bool = false, attachCompletedEnvelopeMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, authenticationCheck: Swift.String? = nil, authenticationCheckMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, autoNavRule: Swift.String? = nil, autoNavRuleMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, autoProvisionSignerAccount: Swift.Bool = false, autoProvisionSignerAccountMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, bccEmailArchive: Swift.Bool = false, bccEmailArchiveMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, betaSwitchConfiguration: Swift.String? = nil, betaSwitchConfigurationMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, billingAddress: DocuSignAPI.DSAPIAddressInformation? = nil, billingAddressMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, bulkSend: Swift.Bool = false, bulkSendMaxCopiesInBatch: Swift.String? = nil, bulkSendMaxUnprocessedEnvelopesCount: Swift.String? = nil, bulkSendMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, canSelfBrandSend: Swift.Bool = false, canSelfBrandSendMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, canSelfBrandSign: Swift.Bool = false, canSelfBrandSignMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, canUseSalesforceOAuth: Swift.Bool = false, canUseSalesforceOAuthMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, captureVoiceRecording: Swift.String? = nil, captureVoiceRecordingMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, cfr21SimplifiedSigningEnabled: Swift.Bool = false, cfr21SimplifiedSigningEnabledMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, cfrUseWideImage: Swift.Bool = false, cfrUseWideImageMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, checkForMultipleAdminsOnAccount: Swift.Bool = false, checkForMultipleAdminsOnAccountMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, chromeSignatureEnabled: Swift.Bool = false, chromeSignatureEnabledMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, commentEmailShowMessageText: Swift.Bool = false, commentEmailShowMessageTextMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, commentsAllowEnvelopeOverride: Swift.Bool = false, commentsAllowEnvelopeOverrideMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, conditionalFieldsEnabled: Swift.Bool = false, conditionalFieldsEnabledMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, consumerDisclosureFrequency: Swift.String? = nil, consumerDisclosureFrequencyMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, convertPdfFields: Swift.Bool = false, convertPdfFieldsMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, dataPopulationScope: Swift.String? = nil, dataPopulationScopeMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, disableAutoTemplateMatching: Swift.Bool = false, disableAutoTemplateMatchingMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, disableMobileApp: Swift.Bool = false, disableMobileAppMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, disableMobilePushNotifications: Swift.Bool = false, disableMobilePushNotificationsMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, disableMobileSending: Swift.Bool = false, disableMobileSendingMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, disableMultipleSessions: Swift.Bool = false, disableMultipleSessionsMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, disablePurgeNotificationsForSenderMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, disableSignerCertView: Swift.Bool = false, disableSignerCertViewMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, disableSignerHistoryView: Swift.Bool = false, disableSignerHistoryViewMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, disableStyleSignature: Swift.Bool = false, disableStyleSignatureMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, disableUploadSignature: Swift.Bool = false, disableUploadSignatureMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, disableUserSharing: Swift.Bool = false, disableUserSharingMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, displayBetaSwitch: Swift.String? = nil, displayBetaSwitchMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, documentConversionRestrictions: Swift.String? = nil, documentConversionRestrictionsMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, documentRetention: Swift.String? = nil, documentRetentionMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, documentRetentionPurgeTabs: Swift.Bool = false, documentVisibility: Swift.String? = nil, documentVisibilityMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, dssSIGN28411EnableLeavePagePromptRadminOption: Swift.String? = nil, dssSIGN29182SlideUpBarRadminOption: Swift.String? = nil, emailTemplateVersion: Swift.String? = nil, emailTemplateVersionMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, enableAccessCodeGenerator: Swift.Bool = false, enableAccessCodeGeneratorMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, enableAdvancedPayments: Swift.Bool = false, enableAdvancedPaymentsMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, enableAdvancedPowerForms: Swift.Bool = false, enableAdvancedPowerFormsMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, enableAgreementActionsForCLM: Swift.Bool = false, enableAgreementActionsForCLMMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, enableAgreementActionsForESign: Swift.Bool = false, enableAgreementActionsForESignMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, enableAutoNav: Swift.Bool = false, enableAutoNavMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, enableBccDummyLink: Swift.Bool = false, enableBccDummyLinkMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, enableCalculatedFields: Swift.Bool = false, enableCalculatedFieldsMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, enableClickwraps: Swift.Bool = false, enableClickwrapsMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, enableCommentsHistoryDownloadInSigning: Swift.Bool = false, enableCommentsHistoryDownloadInSigningMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, enableCustomerSatisfactionMetricTracking: Swift.Bool = false, enableCustomerSatisfactionMetricTrackingMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, enableDSPro: Swift.Bool = false, enableDSProMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, enableEnvelopeStampingByAccountAdmin: Swift.Bool = false, enableEnvelopeStampingByAccountAdminMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, enableEnvelopeStampingByDSAdmin: Swift.Bool = false, enableEnvelopeStampingByDSAdminMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, enableEsignCommunities: Swift.Bool = false, enableEsignCommunitiesMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, enableIDFxIntuitKBA: Swift.Bool = false, enableIDFxIntuitKBAMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, enableIDFxPhoneAuthentication: Swift.Bool = false, enableIDFxPhoneAuthenticationMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, enableInBrowserEditor: Swift.Bool = false, enableInBrowserEditorMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, enablePaymentProcessing: Swift.Bool = false, enablePaymentProcessingMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, enablePDFAConversion: Swift.Bool = false, enablePDFAConversionMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, enablePowerForm: Swift.Bool = false, enablePowerFormDirect: Swift.Bool = false, enablePowerFormDirectMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, enablePowerFormMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, enableRecipientDomainValidation: Swift.Bool = false, enableRecipientDomainValidationMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, enableRecipientMayProvidePhoneNumber: Swift.Bool = false, enableRecipientMayProvidePhoneNumberMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, enableReportLinks: Swift.Bool = false, enableReportLinksMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, enableRequireSignOnPaper: Swift.Bool = false, enableRequireSignOnPaperMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, enableReservedDomain: Swift.Bool = false, enableReservedDomainMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, enableResponsiveSigning: Swift.Bool = false, enableResponsiveSigningMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, enableScheduledRelease: Swift.Bool = false, enableScheduledReleaseMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, enableSearch: Swift.Bool = false, enableSearchMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, enableSearchUI: Swift.Bool = false, enableSearchUIMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, enableSendingTagsFontSettings: Swift.Bool = false, enableSendingTagsFontSettingsMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, enableSendToAgent: Swift.Bool = false, enableSendToAgentMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, enableSendToIntermediary: Swift.Bool = false, enableSendToIntermediaryMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, enableSendToManage: Swift.Bool = false, enableSendToManageMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, enableSequentialSigningAPI: Swift.Bool = false, enableSequentialSigningAPIMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, enableSequentialSigningUI: Swift.Bool = false, enableSequentialSigningUIMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, enableSignerAttachments: Swift.Bool = false, enableSignerAttachmentsMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, enableSigningExtensionComments: Swift.Bool = false, enableSigningExtensionCommentsMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, enableSigningExtensionConversations: Swift.Bool = false, enableSigningExtensionConversationsMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, enableSigningOrderSettingsForAccount: Swift.Bool = false, enableSigningOrderSettingsForAccountMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, enableSignOnPaper: Swift.Bool = false, enableSignOnPaperMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, enableSignOnPaperOverride: Swift.Bool = false, enableSignOnPaperOverrideMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, enableSignWithNotary: Swift.Bool = false, enableSignWithNotaryMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, enableSmartContracts: Swift.Bool = false, enableSmartContractsMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, enableSMSAuthentication: Swift.Bool = false, enableSMSAuthenticationMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, enableSMSDeliveryAdditionalNotification: Swift.Bool = false, enableSMSDeliveryAdditionalNotificationMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, enableSMSDeliveryPrimary: Swift.Bool = false, enableSocialIdLogin: Swift.Bool = false, enableSocialIdLoginMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, enableStrikeThrough: Swift.Bool = false, enableStrikeThroughMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, enableTransactionPoint: Swift.Bool = false, enableTransactionPointMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, enableVaulting: Swift.Bool = false, enableVaultingMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, enableWitnessing: Swift.Bool = false, enableWitnessingMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, enforceTemplateNameUniqueness: Swift.Bool = false, enforceTemplateNameUniquenessMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, envelopeIntegrationAllowed: Swift.String? = nil, envelopeIntegrationAllowedMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, envelopeIntegrationEnabled: Swift.Bool = false, envelopeIntegrationEnabledMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, envelopeStampingDefaultValue: Swift.Bool = false, envelopeStampingDefaultValueMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, exitPrompt: Swift.String? = nil, exitPromptMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, expressSend: Swift.Bool = false, expressSendAllowTabs: Swift.Bool = false, expressSendAllowTabsMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, expressSendMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, externalDocumentSources: DocuSignAPI.DSAPIExternalDocumentSources? = nil, externalSignaturePadType: Swift.String? = nil, externalSignaturePadTypeMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, faxOutEnabled: Swift.Bool = false, faxOutEnabledMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, finishReminder: Swift.String? = nil, finishReminderMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, guidedFormsHtmlAllowed: Swift.Bool = false, guidedFormsHtmlAllowedMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, hasRecipientConnectClaimedDomain: Swift.String? = nil, hideAccountAddressInCoC: Swift.Bool = false, hideAccountAddressInCoCMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, hidePricing: Swift.Bool = false, hidePricingMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, idCheckConfigurations: [DocuSignAPI.DSAPIIdCheckConfiguration]? = nil, idCheckExpire: Swift.String? = nil, idCheckExpireDays: Swift.String? = nil, idCheckExpireDaysMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, idCheckExpireMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, idCheckExpireMinutes: Swift.String? = nil, idCheckExpireMinutesMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, idCheckRequired: Swift.String? = nil, idCheckRequiredMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, identityVerification: [DocuSignAPI.DSAPIAccountIdentityVerificationWorkflow]? = nil, identityVerificationMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, idfxPhoneAuthenticationOverride: Swift.String? = nil, idfxPhoneAuthenticationOverrideMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, ignoreErrorIfAnchorTabNotFound: Swift.String? = nil, ignoreErrorIfAnchorTabNotFoundMetadataEnabled: DocuSignAPI.DSAPISettingsMetadata? = nil, inPersonIDCheckQuestion: Swift.String? = nil, inPersonIDCheckQuestionMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, inPersonSigningEnabled: Swift.Bool = false, inPersonSigningEnabledMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, inSessionEnabled: Swift.Bool = false, inSessionEnabledMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, inSessionSuppressEmails: Swift.Bool = false, inSessionSuppressEmailsMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, linkedExternalPrimaryAccounts: [DocuSignAPI.DSAPILinkedExternalPrimaryAccount]? = nil, maximumSigningGroups: Swift.String? = nil, maximumSigningGroupsMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, maximumUsersPerSigningGroup: Swift.String? = nil, maximumUsersPerSigningGroupMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, maxNumberOfCustomStamps: Swift.String? = nil, mobileSessionTimeout: Swift.String? = nil, mobileSessionTimeoutMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, numberOfActiveCustomStamps: Swift.String? = nil, optInMobileSigningV02: Swift.Bool = false, optInMobileSigningV02Metadata: DocuSignAPI.DSAPISettingsMetadata? = nil, optOutAutoNavTextAndTabColorUpdates: Swift.Bool = false, optOutAutoNavTextAndTabColorUpdatesMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, optOutNewPlatformSeal: Swift.Bool = false, optOutNewPlatformSealPlatformMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, phoneAuthRecipientMayProvidePhoneNumber: Swift.Bool = false, phoneAuthRecipientMayProvidePhoneNumberMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, pkiSignDownloadedPDFDocs: Swift.String? = nil, pkiSignDownloadedPDFDocsMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, readOnlyMode: Swift.String? = nil, readOnlyModeMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, recipientsCanSignOffline: Swift.Bool = false, recipientsCanSignOfflineMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, recipientSigningAutoNavigationControl: Swift.Bool = false, recipientSigningAutoNavigationControlMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, require21CFRpt11Compliance: Swift.Bool = false, require21CFRpt11ComplianceMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, requireDeclineReason: Swift.Bool = false, requireDeclineReasonMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, requireExternalUserManagement: Swift.Bool = false, requireExternalUserManagementMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, requireSignerCertificateType: Swift.String? = nil, requireSignerCertificateTypeMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, rsaVeridAccountName: Swift.String? = nil, rsaVeridPassword: Swift.String? = nil, rsaVeridRuleset: Swift.String? = nil, rsaVeridUserId: Swift.String? = nil, selfSignedRecipientEmailDocument: Swift.String? = nil, selfSignedRecipientEmailDocumentMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, selfSignedRecipientEmailDocumentUserOverride: Swift.Bool = false, selfSignedRecipientEmailDocumentUserOverrideMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, senderCanSignInEachLocation: Swift.Bool = false, senderCanSignInEachLocationMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, senderMustAuthenticateSigning: Swift.Bool = false, senderMustAuthenticateSigningMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, sendingTagsFontColor: Swift.String? = nil, sendingTagsFontColorMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, sendingTagsFontName: Swift.String? = nil, sendingTagsFontNameMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, sendingTagsFontSize: Swift.String? = nil, sendingTagsFontSizeMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, sendLockoutRecipientNotification: Swift.String? = nil, sendLockoutRecipientNotificationMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, sendToCertifiedDeliveryEnabled: Swift.Bool = false, sendToCertifiedDeliveryEnabledMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, sessionTimeout: Swift.String? = nil, sessionTimeoutMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, setRecipEmailLang: Swift.Bool = false, setRecipEmailLangMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, setRecipSignLang: Swift.Bool = false, setRecipSignLangMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, sharedTemplateFolders: Swift.Bool = false, sharedTemplateFoldersMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, showCompleteDialogInEmbeddedSession: Swift.Bool = false, showCompleteDialogInEmbeddedSessionMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, showConditionalRoutingOnSend: Swift.Bool = false, showConditionalRoutingOnSendMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, showInitialConditionalFields: Swift.Bool = false, showInitialConditionalFieldsMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, showLocalizedWatermarks: Swift.Bool = false, showLocalizedWatermarksMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, showMaskedFieldsWhenDownloadingDocumentAsSender: Swift.Bool = false, showMaskedFieldsWhenDownloadingDocumentAsSenderMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, showTutorials: Swift.Bool = false, showTutorialsMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, signatureProviders: [Swift.String]? = nil, signatureProvidersMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, signDateFormat: Swift.String? = nil, signDateFormatMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, signDateTimeAccountLanguageOverride: Swift.String? = nil, signDateTimeAccountLanguageOverrideMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, signDateTimeAccountTimezoneOverride: Swift.String? = nil, signDateTimeAccountTimezoneOverrideMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, signerAttachCertificateToEnvelopePDF: Swift.Bool = false, signerAttachCertificateToEnvelopePDFMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, signerAttachConcat: Swift.Bool = false, signerAttachConcatMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, signerCanCreateAccount: Swift.Bool = false, signerCanCreateAccountMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, signerCanSignOnMobile: Swift.Bool = false, signerCanSignOnMobileMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, signerInSessionUseEnvelopeCompleteEmail: Swift.Bool = false, signerInSessionUseEnvelopeCompleteEmailMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, signerLoginRequirements: Swift.String? = nil, signerLoginRequirementsMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, signerMustHaveAccount: Swift.Bool = false, signerMustHaveAccountMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, signerMustLoginToSign: Swift.Bool = false, signerMustLoginToSignMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, signerShowSecureFieldInitialValues: Swift.Bool = false, signerShowSecureFieldInitialValuesMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, signingSessionTimeout: Swift.String? = nil, signingSessionTimeoutMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, signingUiVersion: Swift.String? = nil, signingUiVersionMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, signTimeFormat: Swift.String? = nil, signTimeFormatMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, signTimeShowAmPm: Swift.Bool = false, signTimeShowAmPmMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, simplifiedSendingEnabled: Swift.Bool = false, simplifiedSendingEnabledMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, singleSignOnEnabled: Swift.Bool = false, singleSignOnEnabledMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, skipAuthCompletedEnvelopes: Swift.Bool = false, skipAuthCompletedEnvelopesMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, socialIdRecipAuth: Swift.Bool = false, socialIdRecipAuthMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, specifyDocumentVisibility: Swift.Bool = false, specifyDocumentVisibilityMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, startInAdvancedCorrect: Swift.Bool = false, startInAdvancedCorrectMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, supplementalDocumentsMustAccept: Swift.Bool = false, supplementalDocumentsMustAcceptMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, supplementalDocumentsMustRead: Swift.Bool = false, supplementalDocumentsMustReadMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, supplementalDocumentsMustView: Swift.Bool = false, supplementalDocumentsMustViewMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, suppressCertificateEnforcement: Swift.Bool = false, suppressCertificateEnforcementMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, tabAccountSettings: DocuSignAPI.DSAPITabAccountSettings? = nil, timezoneOffsetAPI: Swift.String? = nil, timezoneOffsetAPIMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, timezoneOffsetUI: Swift.String? = nil, timezoneOffsetUIMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, universalSignatureOptIn: Swift.String? = nil, useAccountLevelEmail: Swift.Bool = false, useAccountLevelEmailMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, useConsumerDisclosure: Swift.Bool = false, useConsumerDisclosureMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, useConsumerDisclosureWithinAccount: Swift.Bool = false, useConsumerDisclosureWithinAccountMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, useDerivedKeys: Swift.Bool = false, useDerivedKeysMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, useDocuSignExpressSignerCertificate: Swift.Bool = false, useDocuSignExpressSignerCertificateMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, useMultiAppGroupsData: Swift.Bool = false, useMultiAppGroupsDataMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, useNewBlobForPdf: Swift.Bool = false, useNewBlobForPdfMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, useSAFESignerCertificates: Swift.Bool = false, useSAFESignerCertificatesMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, usesAPI: Swift.Bool = false, usesAPIMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, useSignatureProviderPlatform: Swift.Bool = false, useSignatureProviderPlatformMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, validationsAllowed: Swift.Bool = false, validationsAllowedMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, validationsBrand: Swift.String? = nil, validationsBrandMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, validationsCadence: Swift.String? = nil, validationsCadenceMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, validationsEnabled: Swift.Bool = false, validationsEnabledMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, validationsReport: Swift.String? = nil, validationsReportMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, waterMarkEnabled: Swift.Bool = false, waterMarkEnabledMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, writeReminderToEnvelopeHistory: Swift.Bool = false, writeReminderToEnvelopeHistoryMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, wurflMinAllowableScreenSize: Swift.String? = nil, wurflMinAllowableScreenSizeMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case accessCodeFormat
    case accountDateTimeFormat
    case accountDateTimeFormatMetadata
    case accountDefaultLanguage
    case accountDefaultLanguageMetadata
    case accountName
    case accountNameMetadata
    case accountNotification
    case accountUISettings
    case adoptSigConfig
    case adoptSigConfigMetadata
    case advancedCorrect
    case advancedCorrectMetadata
    case allowAccessCodeFormat
    case allowAccessCodeFormatMetadata
    case allowAccountManagementGranular
    case allowAccountManagementGranularMetadata
    case allowAccountMemberNameChange
    case allowAccountMemberNameChangeMetadata
    case allowAdvancedRecipientRoutingConditional
    case allowAdvancedRecipientRoutingConditionalMetadata
    case allowAgentNameEmailEdit
    case allowAgentNameEmailEditMetadata
    case allowAgreementActions
    case allowAgreementActionsMetadata
    case allowAutoNavSettings
    case allowAutoNavSettingsMetadata
    case allowAutoTagging
    case allowAutoTaggingMetadata
    case allowBulkSend
    case allowBulkSendMetadata
    case allowCDWithdraw
    case allowCDWithdrawMetadata
    case allowConnectHttpListenerConfigs
    case allowConnectSendFinishLater
    case allowConnectSendFinishLaterMetadata
    case allowConnectUnifiedPayloadUI
    case allowConsumerDisclosureOverride
    case allowConsumerDisclosureOverrideMetadata
    case allowDataDownload
    case allowDataDownloadMetadata
    case allowDelayedRouting
    case allowDelayedRoutingMetadata
    case allowDelegatedSigning
    case allowDelegatedSigningMetadata
    case allowDocumentDisclosures
    case allowDocumentDisclosuresMetadata
    case allowDocumentsOnSignedEnvelopes
    case allowDocumentsOnSignedEnvelopesMetadata
    case allowDocumentVisibility
    case allowDocumentVisibilityMetadata
    case allowEHankoStamps
    case allowEHankoStampsMetadata
    case allowENoteEOriginal
    case allowENoteEOriginalMetadata
    case allowEnvelopeCorrect
    case allowEnvelopeCorrectMetadata
    case allowEnvelopeCustodyTransfer
    case allowEnvelopeCustodyTransferMetadata
    case allowEnvelopeCustomFields
    case allowEnvelopeCustomFieldsMetadata
    case allowEnvelopePublishReporting
    case allowEnvelopePublishReportingMetadata
    case allowEnvelopeReporting
    case allowEnvelopeReportingMetadata
    case allowExpression
    case allowExpressionMetadata
    case allowExpressSignerCertificate
    case allowExpressSignerCertificateMetadata
    case allowExtendedSendingResourceFile
    case allowExtendedSendingResourceFileMetadata
    case allowExternalLinkedAccounts
    case allowExternalLinkedAccountsMetadata
    case allowExternalSignaturePad
    case allowExternalSignaturePadMetadata
    case allowIDVLevel1
    case allowIDVLevel1Metadata
    case allowIDVLevel2
    case allowIDVLevel2Metadata
    case allowIDVLevel3
    case allowIDVLevel3Metadata
    case allowIDVPlatform
    case allowIDVPlatformMetadata
    case allowInPerson
    case allowInPersonMetadata
    case allowManagedStamps
    case allowManagedStampsMetadata
    case allowMarkup
    case allowMarkupMetadata
    case allowMemberTimeZone
    case allowMemberTimeZoneMetadata
    case allowMergeFields
    case allowMergeFieldsMetadata
    case allowMultipleBrandProfiles
    case allowMultipleBrandProfilesMetadata
    case allowMultipleSignerAttachments
    case allowMultipleSignerAttachmentsMetadata
    case allowNonUSPhoneAuth
    case allowNonUSPhoneAuthMetadata
    case allowOcrOfEnvelopeDocuments
    case allowOcrOfEnvelopeDocumentsMetadata
    case allowOfflineSigning
    case allowOfflineSigningMetadata
    case allowOpenTrustSignerCertificate
    case allowOpenTrustSignerCertificateMetadata
    case allowOrganizationDocusignMonitor
    case allowOrganizationDocusignMonitorMetadata
    case allowOrganizationDomainUserManagement
    case allowOrganizationDomainUserManagementMetadata
    case allowOrganizations
    case allowOrganizationsMetadata
    case allowOrganizationSsoManagement
    case allowOrganizationSsoManagementMetadata
    case allowOrganizationToUseRemoteNotary
    case allowOrganizationToUseRemoteNotaryMetadata
    case allowPaymentProcessing
    case allowPaymentProcessingMetadata
    case allowPersonalSignerCertificate
    case allowPersonalSignerCertificateMetadata
    case allowPhoneAuthentication
    case allowPhoneAuthenticationMetadata
    case allowPhoneAuthOverride
    case allowPhoneAuthOverrideMetadata
    case allowPrivateSigningGroups
    case allowPrivateSigningGroupsMetadata
    case allowRecipientConnect
    case allowRecipientConnectMetadata
    case allowReminders
    case allowRemindersMetadata
    case allowRemoteNotary
    case allowRemoteNotaryMetadata
    case allowResourceFileBranding
    case allowResourceFileBrandingMetadata
    case allowSafeBioPharmaSignerCertificate
    case allowSafeBioPharmaSignerCertificateMetadata
    case allowScheduledSending
    case allowScheduledSendingMetadata
    case allowSecurityAppliance
    case allowSecurityApplianceMetadata
    case allowSendToCertifiedDelivery
    case allowSendToCertifiedDeliveryMetadata
    case allowSendToIntermediary
    case allowSendToIntermediaryMetadata
    case allowServerTemplates
    case allowServerTemplatesMetadata
    case allowSetEmbeddedRecipientStartURL
    case allowSetEmbeddedRecipientStartURLMetadata
    case allowSharedTabs
    case allowSharedTabsMetadata
    case allowSignatureStamps
    case allowSignatureStampsMetadata
    case allowSignDocumentFromHomePage
    case allowSignDocumentFromHomePageMetadata
    case allowSignerReassign
    case allowSignerReassignMetadata
    case allowSignerReassignOverride
    case allowSignerReassignOverrideMetadata
    case allowSigningExtensions
    case allowSigningExtensionsMetadata
    case allowSigningGroups
    case allowSigningGroupsMetadata
    case allowSigningInsights
    case allowSigningInsightsMetadata
    case allowSigningRadioDeselect
    case allowSigningRadioDeselectMetadata
    case allowSignNow
    case allowSignNowMetadata
    case allowSMSDelivery
    case allowSMSDeliveryMetadata
    case allowSocialIdLogin
    case allowSocialIdLoginMetadata
    case allowSupplementalDocuments
    case allowSupplementalDocumentsMetadata
    case allowUsersToAccessDirectory
    case allowUsersToAccessDirectoryMetadata
    case allowValueInsights
    case allowValueInsightsMetadata
    case anchorPopulationScope
    case anchorPopulationScopeMetadata
    case anchorTagVersionedPlacementEnabled
    case anchorTagVersionedPlacementMetadataEnabled
    case attachCompletedEnvelope
    case attachCompletedEnvelopeMetadata
    case authenticationCheck
    case authenticationCheckMetadata
    case autoNavRule
    case autoNavRuleMetadata
    case autoProvisionSignerAccount
    case autoProvisionSignerAccountMetadata
    case bccEmailArchive
    case bccEmailArchiveMetadata
    case betaSwitchConfiguration
    case betaSwitchConfigurationMetadata
    case billingAddress
    case billingAddressMetadata
    case bulkSend
    case bulkSendMaxCopiesInBatch
    case bulkSendMaxUnprocessedEnvelopesCount
    case bulkSendMetadata
    case canSelfBrandSend
    case canSelfBrandSendMetadata
    case canSelfBrandSign
    case canSelfBrandSignMetadata
    case canUseSalesforceOAuth
    case canUseSalesforceOAuthMetadata
    case captureVoiceRecording
    case captureVoiceRecordingMetadata
    case cfr21SimplifiedSigningEnabled
    case cfr21SimplifiedSigningEnabledMetadata
    case cfrUseWideImage
    case cfrUseWideImageMetadata
    case checkForMultipleAdminsOnAccount
    case checkForMultipleAdminsOnAccountMetadata
    case chromeSignatureEnabled
    case chromeSignatureEnabledMetadata
    case commentEmailShowMessageText
    case commentEmailShowMessageTextMetadata
    case commentsAllowEnvelopeOverride
    case commentsAllowEnvelopeOverrideMetadata
    case conditionalFieldsEnabled
    case conditionalFieldsEnabledMetadata
    case consumerDisclosureFrequency
    case consumerDisclosureFrequencyMetadata
    case convertPdfFields
    case convertPdfFieldsMetadata
    case dataPopulationScope
    case dataPopulationScopeMetadata
    case disableAutoTemplateMatching
    case disableAutoTemplateMatchingMetadata
    case disableMobileApp
    case disableMobileAppMetadata
    case disableMobilePushNotifications
    case disableMobilePushNotificationsMetadata
    case disableMobileSending
    case disableMobileSendingMetadata
    case disableMultipleSessions
    case disableMultipleSessionsMetadata
    case disablePurgeNotificationsForSenderMetadata
    case disableSignerCertView
    case disableSignerCertViewMetadata
    case disableSignerHistoryView
    case disableSignerHistoryViewMetadata
    case disableStyleSignature
    case disableStyleSignatureMetadata
    case disableUploadSignature
    case disableUploadSignatureMetadata
    case disableUserSharing
    case disableUserSharingMetadata
    case displayBetaSwitch
    case displayBetaSwitchMetadata
    case documentConversionRestrictions
    case documentConversionRestrictionsMetadata
    case documentRetention
    case documentRetentionMetadata
    case documentRetentionPurgeTabs
    case documentVisibility
    case documentVisibilityMetadata
    case dssSIGN28411EnableLeavePagePromptRadminOption
    case dssSIGN29182SlideUpBarRadminOption
    case emailTemplateVersion
    case emailTemplateVersionMetadata
    case enableAccessCodeGenerator
    case enableAccessCodeGeneratorMetadata
    case enableAdvancedPayments
    case enableAdvancedPaymentsMetadata
    case enableAdvancedPowerForms
    case enableAdvancedPowerFormsMetadata
    case enableAgreementActionsForCLM
    case enableAgreementActionsForCLMMetadata
    case enableAgreementActionsForESign
    case enableAgreementActionsForESignMetadata
    case enableAutoNav
    case enableAutoNavMetadata
    case enableBccDummyLink
    case enableBccDummyLinkMetadata
    case enableCalculatedFields
    case enableCalculatedFieldsMetadata
    case enableClickwraps
    case enableClickwrapsMetadata
    case enableCommentsHistoryDownloadInSigning
    case enableCommentsHistoryDownloadInSigningMetadata
    case enableCustomerSatisfactionMetricTracking
    case enableCustomerSatisfactionMetricTrackingMetadata
    case enableDSPro
    case enableDSProMetadata
    case enableEnvelopeStampingByAccountAdmin
    case enableEnvelopeStampingByAccountAdminMetadata
    case enableEnvelopeStampingByDSAdmin
    case enableEnvelopeStampingByDSAdminMetadata
    case enableEsignCommunities
    case enableEsignCommunitiesMetadata
    case enableIDFxIntuitKBA
    case enableIDFxIntuitKBAMetadata
    case enableIDFxPhoneAuthentication
    case enableIDFxPhoneAuthenticationMetadata
    case enableInBrowserEditor
    case enableInBrowserEditorMetadata
    case enablePaymentProcessing
    case enablePaymentProcessingMetadata
    case enablePDFAConversion
    case enablePDFAConversionMetadata
    case enablePowerForm
    case enablePowerFormDirect
    case enablePowerFormDirectMetadata
    case enablePowerFormMetadata
    case enableRecipientDomainValidation
    case enableRecipientDomainValidationMetadata
    case enableRecipientMayProvidePhoneNumber
    case enableRecipientMayProvidePhoneNumberMetadata
    case enableReportLinks
    case enableReportLinksMetadata
    case enableRequireSignOnPaper
    case enableRequireSignOnPaperMetadata
    case enableReservedDomain
    case enableReservedDomainMetadata
    case enableResponsiveSigning
    case enableResponsiveSigningMetadata
    case enableScheduledRelease
    case enableScheduledReleaseMetadata
    case enableSearch
    case enableSearchMetadata
    case enableSearchUI
    case enableSearchUIMetadata
    case enableSendingTagsFontSettings
    case enableSendingTagsFontSettingsMetadata
    case enableSendToAgent
    case enableSendToAgentMetadata
    case enableSendToIntermediary
    case enableSendToIntermediaryMetadata
    case enableSendToManage
    case enableSendToManageMetadata
    case enableSequentialSigningAPI
    case enableSequentialSigningAPIMetadata
    case enableSequentialSigningUI
    case enableSequentialSigningUIMetadata
    case enableSignerAttachments
    case enableSignerAttachmentsMetadata
    case enableSigningExtensionComments
    case enableSigningExtensionCommentsMetadata
    case enableSigningExtensionConversations
    case enableSigningExtensionConversationsMetadata
    case enableSigningOrderSettingsForAccount
    case enableSigningOrderSettingsForAccountMetadata
    case enableSignOnPaper
    case enableSignOnPaperMetadata
    case enableSignOnPaperOverride
    case enableSignOnPaperOverrideMetadata
    case enableSignWithNotary
    case enableSignWithNotaryMetadata
    case enableSmartContracts
    case enableSmartContractsMetadata
    case enableSMSAuthentication
    case enableSMSAuthenticationMetadata
    case enableSMSDeliveryAdditionalNotification
    case enableSMSDeliveryAdditionalNotificationMetadata
    case enableSMSDeliveryPrimary
    case enableSocialIdLogin
    case enableSocialIdLoginMetadata
    case enableStrikeThrough
    case enableStrikeThroughMetadata
    case enableTransactionPoint
    case enableTransactionPointMetadata
    case enableVaulting
    case enableVaultingMetadata
    case enableWitnessing
    case enableWitnessingMetadata
    case enforceTemplateNameUniqueness
    case enforceTemplateNameUniquenessMetadata
    case envelopeIntegrationAllowed
    case envelopeIntegrationAllowedMetadata
    case envelopeIntegrationEnabled
    case envelopeIntegrationEnabledMetadata
    case envelopeStampingDefaultValue
    case envelopeStampingDefaultValueMetadata
    case exitPrompt
    case exitPromptMetadata
    case expressSend
    case expressSendAllowTabs
    case expressSendAllowTabsMetadata
    case expressSendMetadata
    case externalDocumentSources
    case externalSignaturePadType
    case externalSignaturePadTypeMetadata
    case faxOutEnabled
    case faxOutEnabledMetadata
    case finishReminder
    case finishReminderMetadata
    case guidedFormsHtmlAllowed
    case guidedFormsHtmlAllowedMetadata
    case hasRecipientConnectClaimedDomain
    case hideAccountAddressInCoC
    case hideAccountAddressInCoCMetadata
    case hidePricing
    case hidePricingMetadata
    case idCheckConfigurations
    case idCheckExpire
    case idCheckExpireDays
    case idCheckExpireDaysMetadata
    case idCheckExpireMetadata
    case idCheckExpireMinutes
    case idCheckExpireMinutesMetadata
    case idCheckRequired
    case idCheckRequiredMetadata
    case identityVerification
    case identityVerificationMetadata
    case idfxPhoneAuthenticationOverride
    case idfxPhoneAuthenticationOverrideMetadata
    case ignoreErrorIfAnchorTabNotFound
    case ignoreErrorIfAnchorTabNotFoundMetadataEnabled
    case inPersonIDCheckQuestion
    case inPersonIDCheckQuestionMetadata
    case inPersonSigningEnabled
    case inPersonSigningEnabledMetadata
    case inSessionEnabled
    case inSessionEnabledMetadata
    case inSessionSuppressEmails
    case inSessionSuppressEmailsMetadata
    case linkedExternalPrimaryAccounts
    case maximumSigningGroups
    case maximumSigningGroupsMetadata
    case maximumUsersPerSigningGroup
    case maximumUsersPerSigningGroupMetadata
    case maxNumberOfCustomStamps
    case mobileSessionTimeout
    case mobileSessionTimeoutMetadata
    case numberOfActiveCustomStamps
    case optInMobileSigningV02
    case optInMobileSigningV02Metadata
    case optOutAutoNavTextAndTabColorUpdates
    case optOutAutoNavTextAndTabColorUpdatesMetadata
    case optOutNewPlatformSeal
    case optOutNewPlatformSealPlatformMetadata
    case phoneAuthRecipientMayProvidePhoneNumber
    case phoneAuthRecipientMayProvidePhoneNumberMetadata
    case pkiSignDownloadedPDFDocs
    case pkiSignDownloadedPDFDocsMetadata
    case readOnlyMode
    case readOnlyModeMetadata
    case recipientsCanSignOffline
    case recipientsCanSignOfflineMetadata
    case recipientSigningAutoNavigationControl
    case recipientSigningAutoNavigationControlMetadata
    case require21CFRpt11Compliance
    case require21CFRpt11ComplianceMetadata
    case requireDeclineReason
    case requireDeclineReasonMetadata
    case requireExternalUserManagement
    case requireExternalUserManagementMetadata
    case requireSignerCertificateType
    case requireSignerCertificateTypeMetadata
    case rsaVeridAccountName
    case rsaVeridPassword
    case rsaVeridRuleset
    case rsaVeridUserId
    case selfSignedRecipientEmailDocument
    case selfSignedRecipientEmailDocumentMetadata
    case selfSignedRecipientEmailDocumentUserOverride
    case selfSignedRecipientEmailDocumentUserOverrideMetadata
    case senderCanSignInEachLocation
    case senderCanSignInEachLocationMetadata
    case senderMustAuthenticateSigning
    case senderMustAuthenticateSigningMetadata
    case sendingTagsFontColor
    case sendingTagsFontColorMetadata
    case sendingTagsFontName
    case sendingTagsFontNameMetadata
    case sendingTagsFontSize
    case sendingTagsFontSizeMetadata
    case sendLockoutRecipientNotification
    case sendLockoutRecipientNotificationMetadata
    case sendToCertifiedDeliveryEnabled
    case sendToCertifiedDeliveryEnabledMetadata
    case sessionTimeout
    case sessionTimeoutMetadata
    case setRecipEmailLang
    case setRecipEmailLangMetadata
    case setRecipSignLang
    case setRecipSignLangMetadata
    case sharedTemplateFolders
    case sharedTemplateFoldersMetadata
    case showCompleteDialogInEmbeddedSession
    case showCompleteDialogInEmbeddedSessionMetadata
    case showConditionalRoutingOnSend
    case showConditionalRoutingOnSendMetadata
    case showInitialConditionalFields
    case showInitialConditionalFieldsMetadata
    case showLocalizedWatermarks
    case showLocalizedWatermarksMetadata
    case showMaskedFieldsWhenDownloadingDocumentAsSender
    case showMaskedFieldsWhenDownloadingDocumentAsSenderMetadata
    case showTutorials
    case showTutorialsMetadata
    case signatureProviders
    case signatureProvidersMetadata
    case signDateFormat
    case signDateFormatMetadata
    case signDateTimeAccountLanguageOverride
    case signDateTimeAccountLanguageOverrideMetadata
    case signDateTimeAccountTimezoneOverride
    case signDateTimeAccountTimezoneOverrideMetadata
    case signerAttachCertificateToEnvelopePDF
    case signerAttachCertificateToEnvelopePDFMetadata
    case signerAttachConcat
    case signerAttachConcatMetadata
    case signerCanCreateAccount
    case signerCanCreateAccountMetadata
    case signerCanSignOnMobile
    case signerCanSignOnMobileMetadata
    case signerInSessionUseEnvelopeCompleteEmail
    case signerInSessionUseEnvelopeCompleteEmailMetadata
    case signerLoginRequirements
    case signerLoginRequirementsMetadata
    case signerMustHaveAccount
    case signerMustHaveAccountMetadata
    case signerMustLoginToSign
    case signerMustLoginToSignMetadata
    case signerShowSecureFieldInitialValues
    case signerShowSecureFieldInitialValuesMetadata
    case signingSessionTimeout
    case signingSessionTimeoutMetadata
    case signingUiVersion
    case signingUiVersionMetadata
    case signTimeFormat
    case signTimeFormatMetadata
    case signTimeShowAmPm
    case signTimeShowAmPmMetadata
    case simplifiedSendingEnabled
    case simplifiedSendingEnabledMetadata
    case singleSignOnEnabled
    case singleSignOnEnabledMetadata
    case skipAuthCompletedEnvelopes
    case skipAuthCompletedEnvelopesMetadata
    case socialIdRecipAuth
    case socialIdRecipAuthMetadata
    case specifyDocumentVisibility
    case specifyDocumentVisibilityMetadata
    case startInAdvancedCorrect
    case startInAdvancedCorrectMetadata
    case supplementalDocumentsMustAccept
    case supplementalDocumentsMustAcceptMetadata
    case supplementalDocumentsMustRead
    case supplementalDocumentsMustReadMetadata
    case supplementalDocumentsMustView
    case supplementalDocumentsMustViewMetadata
    case suppressCertificateEnforcement
    case suppressCertificateEnforcementMetadata
    case tabAccountSettings
    case timezoneOffsetAPI
    case timezoneOffsetAPIMetadata
    case timezoneOffsetUI
    case timezoneOffsetUIMetadata
    case universalSignatureOptIn
    case useAccountLevelEmail
    case useAccountLevelEmailMetadata
    case useConsumerDisclosure
    case useConsumerDisclosureMetadata
    case useConsumerDisclosureWithinAccount
    case useConsumerDisclosureWithinAccountMetadata
    case useDerivedKeys
    case useDerivedKeysMetadata
    case useDocuSignExpressSignerCertificate
    case useDocuSignExpressSignerCertificateMetadata
    case useMultiAppGroupsData
    case useMultiAppGroupsDataMetadata
    case useNewBlobForPdf
    case useNewBlobForPdfMetadata
    case useSAFESignerCertificates
    case useSAFESignerCertificatesMetadata
    case usesAPI
    case usesAPIMetadata
    case useSignatureProviderPlatform
    case useSignatureProviderPlatformMetadata
    case validationsAllowed
    case validationsAllowedMetadata
    case validationsBrand
    case validationsBrandMetadata
    case validationsCadence
    case validationsCadenceMetadata
    case validationsEnabled
    case validationsEnabledMetadata
    case validationsReport
    case validationsReportMetadata
    case waterMarkEnabled
    case waterMarkEnabledMetadata
    case writeReminderToEnvelopeHistory
    case writeReminderToEnvelopeHistoryMetadata
    case wurflMinAllowableScreenSize
    case wurflMinAllowableScreenSizeMetadata
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @objcMembers public class DSAPIAccountInformation : ObjectiveC.NSObject, Swift.Codable {
  @objc public var accountIdGuid: Swift.String?
  @objc public var accountName: Swift.String?
  @objc public var accountSettings: DocuSignAPI.DSAPIAccountSettingsInformation?
  @objc @DocuSignAPI.BoolFromString public var allowTransactionRooms: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var billingPeriodDaysRemaining: Swift.String?
  @objc public var billingPeriodEndDate: Foundation.Date?
  @objc public var billingPeriodEnvelopesAllowed: Swift.String?
  @objc public var billingPeriodEnvelopesSent: Swift.String?
  @objc public var billingPeriodStartDate: Foundation.Date?
  @objc public var billingProfile: Swift.String?
  @objc @DocuSignAPI.BoolFromString public var canUpgrade: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var connectPermission: Swift.String?
  @objc public var createdDate: Foundation.Date?
  @objc public var currencyCode: Swift.String?
  @objc public var currentPlanId: Swift.String?
  @objc public var displayApplianceStartUrl: Foundation.URL?
  @objc public var displayApplianceUrl: Foundation.URL?
  @objc public var distributorCode: Swift.String?
  @objc public var docuSignLandingUrl: Foundation.URL?
  @objc public var dssValues: [Swift.String : Swift.String]?
  @objc @DocuSignAPI.BoolFromString public var envelopeSendingBlocked: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var envelopeUnitPrice: Swift.String?
  @objc public var externalAccountId: Swift.String?
  @objc public var forgottenPasswordQuestionsCount: Swift.String?
  @objc @DocuSignAPI.BoolFromString public var isDowngrade: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var paymentMethod: Swift.String?
  @objc public var planClassification: Swift.String?
  @objc public var planEndDate: Foundation.Date?
  @objc public var planName: Swift.String?
  @objc public var planStartDate: Foundation.Date?
  public var recipientDomains: [DocuSignAPI.DSAPIRecipientDomain]?
  @objc public var seatsAllowed: Swift.String?
  @objc public var seatsInUse: Swift.String?
  @objc public var status21CFRPart11: Swift.String?
  @objc public var suspensionDate: Foundation.Date?
  @objc public var suspensionStatus: Swift.String?
  @objc @DocuSignAPI.BoolFromString public var useDisplayAppliance: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  public init(accountIdGuid: Swift.String? = nil, accountName: Swift.String? = nil, accountSettings: DocuSignAPI.DSAPIAccountSettingsInformation? = nil, allowTransactionRooms: Swift.Bool = false, billingPeriodDaysRemaining: Swift.String? = nil, billingPeriodEndDate: Foundation.Date? = nil, billingPeriodEnvelopesAllowed: Swift.String? = nil, billingPeriodEnvelopesSent: Swift.String? = nil, billingPeriodStartDate: Foundation.Date? = nil, billingProfile: Swift.String? = nil, canUpgrade: Swift.Bool = false, connectPermission: Swift.String? = nil, createdDate: Foundation.Date? = nil, currencyCode: Swift.String? = nil, currentPlanId: Swift.String? = nil, displayApplianceStartUrl: Foundation.URL? = nil, displayApplianceUrl: Foundation.URL? = nil, distributorCode: Swift.String? = nil, docuSignLandingUrl: Foundation.URL? = nil, dssValues: [Swift.String : Swift.String]? = nil, envelopeSendingBlocked: Swift.Bool = false, envelopeUnitPrice: Swift.String? = nil, externalAccountId: Swift.String? = nil, forgottenPasswordQuestionsCount: Swift.String? = nil, isDowngrade: Swift.Bool = false, paymentMethod: Swift.String? = nil, planClassification: Swift.String? = nil, planEndDate: Foundation.Date? = nil, planName: Swift.String? = nil, planStartDate: Foundation.Date? = nil, recipientDomains: [DocuSignAPI.DSAPIRecipientDomain]? = nil, seatsAllowed: Swift.String? = nil, seatsInUse: Swift.String? = nil, status21CFRPart11: Swift.String? = nil, suspensionDate: Foundation.Date? = nil, suspensionStatus: Swift.String? = nil, useDisplayAppliance: Swift.Bool = false)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIGroupInformation : Swift.Codable {
  public var endPosition: Swift.String?
  public var groups: [DocuSignAPI.DSAPIGroup]?
  public var nextUri: Foundation.URL?
  public var previousUri: Foundation.URL?
  public var resultSetSize: Swift.String?
  public var startPosition: Swift.String?
  public var totalSetSize: Swift.String?
  public init(endPosition: Swift.String? = nil, groups: [DocuSignAPI.DSAPIGroup]? = nil, nextUri: Foundation.URL? = nil, previousUri: Foundation.URL? = nil, resultSetSize: Swift.String? = nil, startPosition: Swift.String? = nil, totalSetSize: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIRecipientRouting : Swift.Codable {
  public var rules: DocuSignAPI.DSAPIRecipientRules?
  public init(rules: DocuSignAPI.DSAPIRecipientRules? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @objcMembers public class DSAPIList : ObjectiveC.NSObject, Swift.Codable {
  @objc @DocuSignAPI.BoolFromString public var anchorAllowWhiteSpaceInCharacters: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorAllowWhiteSpaceInCharactersMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var anchorCaseSensitive: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorCaseSensitiveMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorHorizontalAlignment: Swift.String?
  @objc public var anchorHorizontalAlignmentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var anchorIgnoreIfNotPresent: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorIgnoreIfNotPresentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var anchorMatchWholeWord: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorMatchWholeWordMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorString: Swift.String?
  @objc public var anchorStringMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorTabProcessorVersion: Swift.String?
  @objc public var anchorTabProcessorVersionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorUnits: Swift.String?
  @objc public var anchorUnitsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorXOffset: Swift.String?
  @objc public var anchorXOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorYOffset: Swift.String?
  @objc public var anchorYOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var bold: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var boldMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var conditionalParentLabel: Swift.String?
  @objc public var conditionalParentLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var conditionalParentValue: Swift.String?
  @objc public var conditionalParentValueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var customTabId: Swift.String?
  @objc public var customTabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var documentId: Swift.String?
  @objc public var documentIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  @objc public var font: Swift.String?
  @objc public var fontColor: Swift.String?
  @objc public var fontColorMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var fontMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var fontSize: Swift.String?
  @objc public var fontSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var formOrder: Swift.String?
  @objc public var formOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var formPageLabel: Swift.String?
  @objc public var formPageLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var formPageNumber: Swift.String?
  @objc public var formPageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var height: Swift.String?
  @objc public var heightMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var italic: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var italicMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var listItems: [DocuSignAPI.DSAPIListItem]?
  @objc public var listSelectedValue: Swift.String?
  @objc public var listSelectedValueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var localePolicy: DocuSignAPI.DSAPILocalePolicyTab?
  @objc @DocuSignAPI.BoolFromString public var locked: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var lockedMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var mergeField: DocuSignAPI.DSAPIMergeField?
  @objc public var mergeFieldXml: Swift.String?
  @objc public var originalValue: Swift.String?
  @objc public var originalValueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var pageNumber: Swift.String?
  @objc public var pageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var recipientId: Swift.String?
  @objc public var recipientIdGuid: Swift.String?
  @objc public var recipientIdGuidMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var recipientIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var requireAll: Swift.String?
  @objc public var requireAllMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var required: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var requiredMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var requireInitialOnSharedChange: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var requireInitialOnSharedChangeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var senderRequired: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var senderRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var shared: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var sharedMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var shareToRecipients: Swift.String?
  @objc public var shareToRecipientsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var smartContractInformation: DocuSignAPI.DSAPISmartContractInformation?
  @objc public var source: Swift.String?
  @objc public var status: Swift.String?
  @objc public var statusMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabGroupLabels: [Swift.String]?
  @objc public var tabGroupLabelsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabId: Swift.String?
  @objc public var tabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabLabel: Swift.String?
  @objc public var tabLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabOrder: Swift.String?
  @objc public var tabOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabType: Swift.String?
  @objc public var tabTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var templateLocked: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var templateLockedMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var templateRequired: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var templateRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tooltip: Swift.String?
  @objc public var toolTipMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var underline: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var underlineMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var value: Swift.String?
  @objc public var valueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var width: Swift.String?
  @objc public var widthMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var xPosition: Swift.String?
  @objc public var xPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var yPosition: Swift.String?
  @objc public var yPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public init(anchorAllowWhiteSpaceInCharacters: Swift.Bool = false, anchorAllowWhiteSpaceInCharactersMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorCaseSensitive: Swift.Bool = false, anchorCaseSensitiveMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorHorizontalAlignment: Swift.String? = nil, anchorHorizontalAlignmentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorIgnoreIfNotPresent: Swift.Bool = false, anchorIgnoreIfNotPresentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorMatchWholeWord: Swift.Bool = false, anchorMatchWholeWordMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorString: Swift.String? = nil, anchorStringMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorTabProcessorVersion: Swift.String? = nil, anchorTabProcessorVersionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorUnits: Swift.String? = nil, anchorUnitsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorXOffset: Swift.String? = nil, anchorXOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorYOffset: Swift.String? = nil, anchorYOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, bold: Swift.Bool = false, boldMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, conditionalParentLabel: Swift.String? = nil, conditionalParentLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, conditionalParentValue: Swift.String? = nil, conditionalParentValueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, customTabId: Swift.String? = nil, customTabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, documentId: Swift.String? = nil, documentIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, font: Swift.String? = nil, fontColor: Swift.String? = nil, fontColorMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, fontMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, fontSize: Swift.String? = nil, fontSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formOrder: Swift.String? = nil, formOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formPageLabel: Swift.String? = nil, formPageLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formPageNumber: Swift.String? = nil, formPageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, height: Swift.String? = nil, heightMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, italic: Swift.Bool = false, italicMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, listItems: [DocuSignAPI.DSAPIListItem]? = nil, listSelectedValue: Swift.String? = nil, listSelectedValueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, localePolicy: DocuSignAPI.DSAPILocalePolicyTab? = nil, locked: Swift.Bool = false, lockedMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, mergeField: DocuSignAPI.DSAPIMergeField? = nil, mergeFieldXml: Swift.String? = nil, originalValue: Swift.String? = nil, originalValueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, pageNumber: Swift.String? = nil, pageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, recipientId: Swift.String? = nil, recipientIdGuid: Swift.String? = nil, recipientIdGuidMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, recipientIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, requireAll: Swift.String? = nil, requireAllMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, required: Swift.Bool = false, requiredMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, requireInitialOnSharedChange: Swift.Bool = false, requireInitialOnSharedChangeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, senderRequired: Swift.Bool = false, senderRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, shared: Swift.Bool = false, sharedMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, shareToRecipients: Swift.String? = nil, shareToRecipientsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, smartContractInformation: DocuSignAPI.DSAPISmartContractInformation? = nil, source: Swift.String? = nil, status: Swift.String? = nil, statusMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabGroupLabels: [Swift.String]? = nil, tabGroupLabelsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabId: Swift.String? = nil, tabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabLabel: Swift.String? = nil, tabLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabOrder: Swift.String? = nil, tabOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabType: Swift.String? = nil, tabTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, templateLocked: Swift.Bool = false, templateLockedMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, templateRequired: Swift.Bool = false, templateRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tooltip: Swift.String? = nil, toolTipMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, underline: Swift.Bool = false, underlineMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, value: Swift.String? = nil, valueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, width: Swift.String? = nil, widthMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, xPosition: Swift.String? = nil, xPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, yPosition: Swift.String? = nil, yPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @objcMembers public class DSAPIAttachment : ObjectiveC.NSObject, Swift.Codable {
  @objc public var accessControl: Swift.String?
  @objc public var attachmentId: Swift.String?
  @objc public var attachmentType: Swift.String?
  @objc public var data: Swift.String?
  @objc public var label: Swift.String?
  @objc public var name: Swift.String?
  @objc public var remoteUrl: Foundation.URL?
  @objc override dynamic public init()
  @objc public init(accessControl: Swift.String? = nil, attachmentId: Swift.String? = nil, attachmentType: Swift.String? = nil, data: Swift.String? = nil, label: Swift.String? = nil, name: Swift.String? = nil, remoteUrl: Foundation.URL? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIDocumentFieldsInformation : Swift.Codable {
  public var documentFields: [DocuSignAPI.DSAPINameValue]?
  public init(documentFields: [DocuSignAPI.DSAPINameValue]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIBillingPayment : Swift.Codable {
  public var amount: Swift.String?
  public var invoiceId: Swift.String?
  public var paymentId: Swift.String?
  public init(amount: Swift.String? = nil, invoiceId: Swift.String? = nil, paymentId: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @objcMembers public class DSAPIAgent : ObjectiveC.NSObject, Swift.Codable {
  @objc public var accessCode: Swift.String?
  @objc public var accessCodeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var addAccessCodeToEmail: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var additionalNotifications: [DocuSignAPI.DSAPIRecipientAdditionalNotification]?
  @objc @DocuSignAPI.BoolFromString public var allowSystemOverrideForLockedRecipient: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var autoRespondedReason: Swift.String?
  @objc public var clientUserId: Swift.String?
  @objc public var completedCount: Swift.String?
  @objc public var customFields: [Swift.String]?
  @objc public var declinedDateTime: Foundation.Date?
  @objc public var declinedReason: Swift.String?
  @objc public var deliveredDateTime: Foundation.Date?
  @objc public var deliveryMethod: Swift.String?
  @objc public var deliveryMethodMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var designatorId: Swift.String?
  @objc public var designatorIdGuid: Swift.String?
  @objc public var documentVisibility: [DocuSignAPI.DSAPIDocumentVisibility]?
  @objc public var email: Swift.String?
  @objc public var emailMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var emailNotification: DocuSignAPI.DSAPIRecipientEmailNotification?
  @objc public var emailRecipientPostSigningURL: Swift.String?
  @objc public var embeddedRecipientStartURL: Swift.String?
  @objc public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  @objc public var excludedDocuments: [Swift.String]?
  @objc public var faxNumber: Swift.String?
  @objc public var faxNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var firstName: Swift.String?
  @objc public var firstNameMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var fullName: Swift.String?
  @objc public var fullNameMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var idCheckConfigurationName: Swift.String?
  @objc public var idCheckConfigurationNameMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var idCheckInformationInput: DocuSignAPI.DSAPIIdCheckInformationInput?
  public var identityVerification: DocuSignAPI.DSAPIRecipientIdentityVerification?
  @objc @DocuSignAPI.BoolFromString public var inheritEmailNotificationConfiguration: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var lastName: Swift.String?
  @objc public var lastNameMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var lockedRecipientPhoneAuthEditable: Swift.String?
  @objc public var lockedRecipientSmsEditable: Swift.String?
  @objc public var name: Swift.String?
  @objc public var nameMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var note: Swift.String?
  @objc public var noteMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var phoneAuthentication: DocuSignAPI.DSAPIRecipientPhoneAuthentication?
  public var phoneNumber: DocuSignAPI.DSAPIRecipientPhoneNumber?
  @objc public var recipientAttachments: [DocuSignAPI.DSAPIRecipientAttachment]?
  public var recipientAuthenticationStatus: DocuSignAPI.DSAPIAuthenticationStatus?
  public var recipientFeatureMetadata: [DocuSignAPI.DSAPIFeatureAvailableMetadata]?
  @objc public var recipientId: Swift.String?
  @objc public var recipientIdGuid: Swift.String?
  @objc public var recipientType: Swift.String?
  @objc public var recipientTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var requireIdLookup: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var requireIdLookupMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var roleName: Swift.String?
  @objc public var routingOrder: Swift.String?
  @objc public var routingOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var sentDateTime: Foundation.Date?
  @objc public var signedDateTime: Foundation.Date?
  @objc public var signingGroupId: Swift.String?
  @objc public var signingGroupIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var signingGroupName: Swift.String?
  @objc public var signingGroupUsers: [DocuSignAPI.DSAPIUserInfo]?
  @objc public var smsAuthentication: DocuSignAPI.DSAPIRecipientSMSAuthentication?
  @objc public var socialAuthentications: [DocuSignAPI.DSAPISocialAuthentication]?
  @objc public var status: Swift.String?
  @objc public var statusCode: Swift.String?
  @objc @DocuSignAPI.BoolFromString public var suppressEmails: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc @DocuSignAPI.BoolFromString public var templateLocked: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc @DocuSignAPI.BoolFromString public var templateRequired: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var totalTabCount: Swift.String?
  @objc public var userId: Swift.String?
  @objc override dynamic public init()
  public init(accessCode: Swift.String? = nil, accessCodeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, addAccessCodeToEmail: Swift.Bool = false, additionalNotifications: [DocuSignAPI.DSAPIRecipientAdditionalNotification]? = nil, allowSystemOverrideForLockedRecipient: Swift.Bool = false, autoRespondedReason: Swift.String? = nil, clientUserId: Swift.String? = nil, completedCount: Swift.String? = nil, customFields: [Swift.String]? = nil, declinedDateTime: Foundation.Date? = nil, declinedReason: Swift.String? = nil, deliveredDateTime: Foundation.Date? = nil, deliveryMethod: Swift.String? = nil, deliveryMethodMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, designatorId: Swift.String? = nil, designatorIdGuid: Swift.String? = nil, documentVisibility: [DocuSignAPI.DSAPIDocumentVisibility]? = nil, email: Swift.String? = nil, emailMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, emailNotification: DocuSignAPI.DSAPIRecipientEmailNotification? = nil, emailRecipientPostSigningURL: Swift.String? = nil, embeddedRecipientStartURL: Swift.String? = nil, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, excludedDocuments: [Swift.String]? = nil, faxNumber: Swift.String? = nil, faxNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, firstName: Swift.String? = nil, firstNameMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, fullName: Swift.String? = nil, fullNameMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, idCheckConfigurationName: Swift.String? = nil, idCheckConfigurationNameMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, idCheckInformationInput: DocuSignAPI.DSAPIIdCheckInformationInput? = nil, identityVerification: DocuSignAPI.DSAPIRecipientIdentityVerification? = nil, inheritEmailNotificationConfiguration: Swift.Bool = false, lastName: Swift.String? = nil, lastNameMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, lockedRecipientPhoneAuthEditable: Swift.String? = nil, lockedRecipientSmsEditable: Swift.String? = nil, name: Swift.String? = nil, nameMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, note: Swift.String? = nil, noteMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, phoneAuthentication: DocuSignAPI.DSAPIRecipientPhoneAuthentication? = nil, phoneNumber: DocuSignAPI.DSAPIRecipientPhoneNumber? = nil, recipientAttachments: [DocuSignAPI.DSAPIRecipientAttachment]? = nil, recipientAuthenticationStatus: DocuSignAPI.DSAPIAuthenticationStatus? = nil, recipientFeatureMetadata: [DocuSignAPI.DSAPIFeatureAvailableMetadata]? = nil, recipientId: Swift.String? = nil, recipientIdGuid: Swift.String? = nil, recipientType: Swift.String? = nil, recipientTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, requireIdLookup: Swift.Bool = false, requireIdLookupMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, roleName: Swift.String? = nil, routingOrder: Swift.String? = nil, routingOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, sentDateTime: Foundation.Date? = nil, signedDateTime: Foundation.Date? = nil, signingGroupId: Swift.String? = nil, signingGroupIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, signingGroupName: Swift.String? = nil, signingGroupUsers: [DocuSignAPI.DSAPIUserInfo]? = nil, smsAuthentication: DocuSignAPI.DSAPIRecipientSMSAuthentication? = nil, socialAuthentications: [DocuSignAPI.DSAPISocialAuthentication]? = nil, status: Swift.String? = nil, statusCode: Swift.String? = nil, suppressEmails: Swift.Bool = false, templateLocked: Swift.Bool = false, templateRequired: Swift.Bool = false, totalTabCount: Swift.String? = nil, userId: Swift.String? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIWorkspaceSettings : Swift.Codable {
  @DocuSignAPI.BoolFromString public var commentsAllowed: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public init(commentsAllowed: Swift.Bool = false)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @objcMembers public class DSAPICompany : ObjectiveC.NSObject, Swift.Codable {
  @objc @DocuSignAPI.BoolFromString public var anchorAllowWhiteSpaceInCharacters: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorAllowWhiteSpaceInCharactersMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var anchorCaseSensitive: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorCaseSensitiveMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorHorizontalAlignment: Swift.String?
  @objc public var anchorHorizontalAlignmentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var anchorIgnoreIfNotPresent: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorIgnoreIfNotPresentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var anchorMatchWholeWord: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorMatchWholeWordMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorString: Swift.String?
  @objc public var anchorStringMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorTabProcessorVersion: Swift.String?
  @objc public var anchorTabProcessorVersionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorUnits: Swift.String?
  @objc public var anchorUnitsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorXOffset: Swift.String?
  @objc public var anchorXOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorYOffset: Swift.String?
  @objc public var anchorYOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var bold: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var boldMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var concealValueOnDocument: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var concealValueOnDocumentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var conditionalParentLabel: Swift.String?
  @objc public var conditionalParentLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var conditionalParentValue: Swift.String?
  @objc public var conditionalParentValueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var customTabId: Swift.String?
  @objc public var customTabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var disableAutoSize: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var disableAutoSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var documentId: Swift.String?
  @objc public var documentIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  @objc public var font: Swift.String?
  @objc public var fontColor: Swift.String?
  @objc public var fontColorMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var fontMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var fontSize: Swift.String?
  @objc public var fontSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var formOrder: Swift.String?
  @objc public var formOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var formPageLabel: Swift.String?
  @objc public var formPageLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var formPageNumber: Swift.String?
  @objc public var formPageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var height: Swift.String?
  @objc public var heightMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var italic: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var italicMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var localePolicy: DocuSignAPI.DSAPILocalePolicyTab?
  @objc @DocuSignAPI.BoolFromString public var locked: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var lockedMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var maxLength: Swift.String?
  @objc public var maxLengthMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var mergeField: DocuSignAPI.DSAPIMergeField?
  @objc public var mergeFieldXml: Swift.String?
  @objc public var name: Swift.String?
  @objc public var nameMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var originalValue: Swift.String?
  @objc public var originalValueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var pageNumber: Swift.String?
  @objc public var pageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var recipientId: Swift.String?
  @objc public var recipientIdGuid: Swift.String?
  @objc public var recipientIdGuidMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var recipientIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var required: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var requiredMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var smartContractInformation: DocuSignAPI.DSAPISmartContractInformation?
  @objc public var source: Swift.String?
  @objc public var status: Swift.String?
  @objc public var statusMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabGroupLabels: [Swift.String]?
  @objc public var tabGroupLabelsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabId: Swift.String?
  @objc public var tabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabLabel: Swift.String?
  @objc public var tabLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabOrder: Swift.String?
  @objc public var tabOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabType: Swift.String?
  @objc public var tabTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var templateLocked: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var templateLockedMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var templateRequired: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var templateRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tooltip: Swift.String?
  @objc public var toolTipMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var underline: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var underlineMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var value: Swift.String?
  @objc public var valueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var width: Swift.String?
  @objc public var widthMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var xPosition: Swift.String?
  @objc public var xPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var yPosition: Swift.String?
  @objc public var yPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc override dynamic public init()
  public init(anchorAllowWhiteSpaceInCharacters: Swift.Bool = false, anchorAllowWhiteSpaceInCharactersMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorCaseSensitive: Swift.Bool = false, anchorCaseSensitiveMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorHorizontalAlignment: Swift.String? = nil, anchorHorizontalAlignmentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorIgnoreIfNotPresent: Swift.Bool = false, anchorIgnoreIfNotPresentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorMatchWholeWord: Swift.Bool = false, anchorMatchWholeWordMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorString: Swift.String? = nil, anchorStringMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorTabProcessorVersion: Swift.String? = nil, anchorTabProcessorVersionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorUnits: Swift.String? = nil, anchorUnitsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorXOffset: Swift.String? = nil, anchorXOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorYOffset: Swift.String? = nil, anchorYOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, bold: Swift.Bool = false, boldMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, concealValueOnDocument: Swift.Bool = false, concealValueOnDocumentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, conditionalParentLabel: Swift.String? = nil, conditionalParentLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, conditionalParentValue: Swift.String? = nil, conditionalParentValueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, customTabId: Swift.String? = nil, customTabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, disableAutoSize: Swift.Bool = false, disableAutoSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, documentId: Swift.String? = nil, documentIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, font: Swift.String? = nil, fontColor: Swift.String? = nil, fontColorMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, fontMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, fontSize: Swift.String? = nil, fontSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formOrder: Swift.String? = nil, formOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formPageLabel: Swift.String? = nil, formPageLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formPageNumber: Swift.String? = nil, formPageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, height: Swift.String? = nil, heightMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, italic: Swift.Bool = false, italicMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, localePolicy: DocuSignAPI.DSAPILocalePolicyTab? = nil, locked: Swift.Bool = false, lockedMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, maxLength: Swift.String? = nil, maxLengthMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, mergeField: DocuSignAPI.DSAPIMergeField? = nil, mergeFieldXml: Swift.String? = nil, name: Swift.String? = nil, nameMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, originalValue: Swift.String? = nil, originalValueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, pageNumber: Swift.String? = nil, pageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, recipientId: Swift.String? = nil, recipientIdGuid: Swift.String? = nil, recipientIdGuidMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, recipientIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, required: Swift.Bool = false, requiredMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, smartContractInformation: DocuSignAPI.DSAPISmartContractInformation? = nil, source: Swift.String? = nil, status: Swift.String? = nil, statusMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabGroupLabels: [Swift.String]? = nil, tabGroupLabelsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabId: Swift.String? = nil, tabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabLabel: Swift.String? = nil, tabLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabOrder: Swift.String? = nil, tabOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabType: Swift.String? = nil, tabTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, templateLocked: Swift.Bool = false, templateLockedMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, templateRequired: Swift.Bool = false, templateRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tooltip: Swift.String? = nil, toolTipMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, underline: Swift.Bool = false, underlineMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, value: Swift.String? = nil, valueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, width: Swift.String? = nil, widthMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, xPosition: Swift.String? = nil, xPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, yPosition: Swift.String? = nil, yPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIENoteConfiguration : Swift.Codable {
  public var apiKey: Swift.String?
  public var connectConfigured: Swift.String?
  public var eNoteConfigured: Swift.String?
  public var organization: Swift.String?
  public var password: Swift.String?
  public var userName: Swift.String?
  public init(apiKey: Swift.String? = nil, connectConfigured: Swift.String? = nil, eNoteConfigured: Swift.String? = nil, organization: Swift.String? = nil, password: Swift.String? = nil, userName: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @objcMembers open class EnvelopesAPI : ObjectiveC.NSObject {
  open class func attachmentsDeleteAttachments(accountId: Swift.String, envelopeId: Swift.String, body: DocuSignAPI.DSAPIEnvelopeAttachmentsRequest? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIEnvelopeAttachmentsResult?, _ error: Swift.Error?) -> Swift.Void))
  open class func attachmentsDeleteAttachmentsWithRequestBuilder(accountId: Swift.String, envelopeId: Swift.String, body: DocuSignAPI.DSAPIEnvelopeAttachmentsRequest? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIEnvelopeAttachmentsResult>
  open class func attachmentsGetAttachment(accountId: Swift.String, attachmentId: Swift.String, envelopeId: Swift.String, completion: @escaping ((_ data: Swift.Void?, _ error: Swift.Error?) -> Swift.Void))
  open class func attachmentsGetAttachmentWithRequestBuilder(accountId: Swift.String, attachmentId: Swift.String, envelopeId: Swift.String) -> DocuSignAPI.RequestBuilder<Swift.Void>
  open class func attachmentsGetAttachments(accountId: Swift.String, envelopeId: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPIEnvelopeAttachmentsResult?, _ error: Swift.Error?) -> Swift.Void))
  open class func attachmentsGetAttachmentsWithRequestBuilder(accountId: Swift.String, envelopeId: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIEnvelopeAttachmentsResult>
  open class func attachmentsPutAttachment(accountId: Swift.String, attachmentId: Swift.String, envelopeId: Swift.String, body: DocuSignAPI.DSAPIAttachment? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIEnvelopeAttachmentsResult?, _ error: Swift.Error?) -> Swift.Void))
  open class func attachmentsPutAttachmentWithRequestBuilder(accountId: Swift.String, attachmentId: Swift.String, envelopeId: Swift.String, body: DocuSignAPI.DSAPIAttachment? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIEnvelopeAttachmentsResult>
  open class func attachmentsPutAttachments(accountId: Swift.String, envelopeId: Swift.String, body: DocuSignAPI.DSAPIEnvelopeAttachmentsRequest? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIEnvelopeAttachmentsResult?, _ error: Swift.Error?) -> Swift.Void))
  open class func attachmentsPutAttachmentsWithRequestBuilder(accountId: Swift.String, envelopeId: Swift.String, body: DocuSignAPI.DSAPIEnvelopeAttachmentsRequest? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIEnvelopeAttachmentsResult>
  open class func auditEventsGetAuditEvents(accountId: Swift.String, envelopeId: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPIEnvelopeAuditEventResponse?, _ error: Swift.Error?) -> Swift.Void))
  open class func auditEventsGetAuditEventsWithRequestBuilder(accountId: Swift.String, envelopeId: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIEnvelopeAuditEventResponse>
  open class func chunkedUploadsDeleteChunkedUpload(accountId: Swift.String, chunkedUploadId: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPIChunkedUploadResponse?, _ error: Swift.Error?) -> Swift.Void))
  open class func chunkedUploadsDeleteChunkedUploadWithRequestBuilder(accountId: Swift.String, chunkedUploadId: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIChunkedUploadResponse>
  open class func chunkedUploadsGetChunkedUpload(accountId: Swift.String, chunkedUploadId: Swift.String, include: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIChunkedUploadResponse?, _ error: Swift.Error?) -> Swift.Void))
  open class func chunkedUploadsGetChunkedUploadWithRequestBuilder(accountId: Swift.String, chunkedUploadId: Swift.String, include: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIChunkedUploadResponse>
  open class func chunkedUploadsPostChunkedUploads(accountId: Swift.String, body: DocuSignAPI.DSAPIChunkedUploadRequest? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIChunkedUploadResponse?, _ error: Swift.Error?) -> Swift.Void))
  open class func chunkedUploadsPostChunkedUploadsWithRequestBuilder(accountId: Swift.String, body: DocuSignAPI.DSAPIChunkedUploadRequest? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIChunkedUploadResponse>
  open class func chunkedUploadsPutChunkedUploadPart(accountId: Swift.String, chunkedUploadId: Swift.String, chunkedUploadPartSeq: Swift.String, body: DocuSignAPI.DSAPIChunkedUploadRequest? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIChunkedUploadResponse?, _ error: Swift.Error?) -> Swift.Void))
  open class func chunkedUploadsPutChunkedUploadPartWithRequestBuilder(accountId: Swift.String, chunkedUploadId: Swift.String, chunkedUploadPartSeq: Swift.String, body: DocuSignAPI.DSAPIChunkedUploadRequest? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIChunkedUploadResponse>
  open class func chunkedUploadsPutChunkedUploads(accountId: Swift.String, chunkedUploadId: Swift.String, action: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIChunkedUploadResponse?, _ error: Swift.Error?) -> Swift.Void))
  open class func chunkedUploadsPutChunkedUploadsWithRequestBuilder(accountId: Swift.String, chunkedUploadId: Swift.String, action: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIChunkedUploadResponse>
  @objc open class func commentsGetCommentsTranscript(accountId: Swift.String, envelopeId: Swift.String, encoding: Swift.String? = nil, completion: @escaping ((_ data: Foundation.Data?, _ error: Swift.Error?) -> Swift.Void))
  open class func commentsGetCommentsTranscriptWithRequestBuilder(accountId: Swift.String, envelopeId: Swift.String, encoding: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<Foundation.Data>
  open class func commentsPostEnvelopeComments(accountId: Swift.String, envelopeId: Swift.String, body: DocuSignAPI.DSAPICommentsPublish? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPICommentHistoryResult?, _ error: Swift.Error?) -> Swift.Void))
  open class func commentsPostEnvelopeCommentsWithRequestBuilder(accountId: Swift.String, envelopeId: Swift.String, body: DocuSignAPI.DSAPICommentsPublish? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPICommentHistoryResult>
  @objc open class func consumerDisclosureGetConsumerDisclosureEnvelopeIdRecipientId(accountId: Swift.String, envelopeId: Swift.String, recipientId: Swift.String, langCode: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIConsumerDisclosure?, _ error: Swift.Error?) -> Swift.Void))
  open class func consumerDisclosureGetConsumerDisclosureEnvelopeIdRecipientIdWithRequestBuilder(accountId: Swift.String, envelopeId: Swift.String, recipientId: Swift.String, langCode: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIConsumerDisclosure>
  @objc open class func consumerDisclosureGetConsumerDisclosureEnvelopeIdRecipientIdLangCode(accountId: Swift.String, envelopeId: Swift.String, langCode: Swift.String, recipientId: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPIConsumerDisclosure?, _ error: Swift.Error?) -> Swift.Void))
  open class func consumerDisclosureGetConsumerDisclosureEnvelopeIdRecipientIdLangCodeWithRequestBuilder(accountId: Swift.String, envelopeId: Swift.String, langCode: Swift.String, recipientId: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIConsumerDisclosure>
  @objc open class func customFieldsDeleteCustomFields(accountId: Swift.String, envelopeId: Swift.String, body: DocuSignAPI.DSAPICustomFields? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPICustomFields?, _ error: Swift.Error?) -> Swift.Void))
  open class func customFieldsDeleteCustomFieldsWithRequestBuilder(accountId: Swift.String, envelopeId: Swift.String, body: DocuSignAPI.DSAPICustomFields? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPICustomFields>
  open class func customFieldsGetCustomFields(accountId: Swift.String, envelopeId: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPICustomFieldsEnvelope?, _ error: Swift.Error?) -> Swift.Void))
  open class func customFieldsGetCustomFieldsWithRequestBuilder(accountId: Swift.String, envelopeId: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPICustomFieldsEnvelope>
  @objc open class func customFieldsPostCustomFields(accountId: Swift.String, envelopeId: Swift.String, body: DocuSignAPI.DSAPICustomFields? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPICustomFields?, _ error: Swift.Error?) -> Swift.Void))
  open class func customFieldsPostCustomFieldsWithRequestBuilder(accountId: Swift.String, envelopeId: Swift.String, body: DocuSignAPI.DSAPICustomFields? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPICustomFields>
  @objc open class func customFieldsPutCustomFields(accountId: Swift.String, envelopeId: Swift.String, body: DocuSignAPI.DSAPICustomFields? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPICustomFields?, _ error: Swift.Error?) -> Swift.Void))
  open class func customFieldsPutCustomFieldsWithRequestBuilder(accountId: Swift.String, envelopeId: Swift.String, body: DocuSignAPI.DSAPICustomFields? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPICustomFields>
  open class func documentFieldsDeleteDocumentFields(accountId: Swift.String, documentId: Swift.String, envelopeId: Swift.String, body: DocuSignAPI.DSAPIDocumentFieldsInformation? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIDocumentFieldsInformation?, _ error: Swift.Error?) -> Swift.Void))
  open class func documentFieldsDeleteDocumentFieldsWithRequestBuilder(accountId: Swift.String, documentId: Swift.String, envelopeId: Swift.String, body: DocuSignAPI.DSAPIDocumentFieldsInformation? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIDocumentFieldsInformation>
  open class func documentFieldsGetDocumentFields(accountId: Swift.String, documentId: Swift.String, envelopeId: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPIDocumentFieldsInformation?, _ error: Swift.Error?) -> Swift.Void))
  open class func documentFieldsGetDocumentFieldsWithRequestBuilder(accountId: Swift.String, documentId: Swift.String, envelopeId: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIDocumentFieldsInformation>
  open class func documentFieldsPostDocumentFields(accountId: Swift.String, documentId: Swift.String, envelopeId: Swift.String, body: DocuSignAPI.DSAPIDocumentFieldsInformation? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIDocumentFieldsInformation?, _ error: Swift.Error?) -> Swift.Void))
  open class func documentFieldsPostDocumentFieldsWithRequestBuilder(accountId: Swift.String, documentId: Swift.String, envelopeId: Swift.String, body: DocuSignAPI.DSAPIDocumentFieldsInformation? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIDocumentFieldsInformation>
  open class func documentFieldsPutDocumentFields(accountId: Swift.String, documentId: Swift.String, envelopeId: Swift.String, body: DocuSignAPI.DSAPIDocumentFieldsInformation? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIDocumentFieldsInformation?, _ error: Swift.Error?) -> Swift.Void))
  open class func documentFieldsPutDocumentFieldsWithRequestBuilder(accountId: Swift.String, documentId: Swift.String, envelopeId: Swift.String, body: DocuSignAPI.DSAPIDocumentFieldsInformation? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIDocumentFieldsInformation>
  @objc open class func documentsDeleteDocuments(accountId: Swift.String, envelopeId: Swift.String, body: DocuSignAPI.DSAPIEnvelopeDefinition? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIEnvelopeDocumentsResult?, _ error: Swift.Error?) -> Swift.Void))
  open class func documentsDeleteDocumentsWithRequestBuilder(accountId: Swift.String, envelopeId: Swift.String, body: DocuSignAPI.DSAPIEnvelopeDefinition? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIEnvelopeDocumentsResult>
  @objc open class func documentsGetDocument(accountId: Swift.String, documentId: Swift.String, envelopeId: Swift.String, certificate: Swift.String? = nil, documentsByUserid: Swift.String? = nil, encoding: Swift.String? = nil, encrypt: Swift.String? = nil, language: Swift.String? = nil, recipientId: Swift.String? = nil, sharedUserId: Swift.String? = nil, showChanges: Swift.String? = nil, watermark: Swift.String? = nil, completion: @escaping ((_ data: Foundation.URL?, _ error: Swift.Error?) -> Swift.Void))
  open class func documentsGetDocumentWithRequestBuilder(accountId: Swift.String, documentId: Swift.String, envelopeId: Swift.String, certificate: Swift.String? = nil, documentsByUserid: Swift.String? = nil, encoding: Swift.String? = nil, encrypt: Swift.String? = nil, language: Swift.String? = nil, recipientId: Swift.String? = nil, sharedUserId: Swift.String? = nil, showChanges: Swift.String? = nil, watermark: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<Foundation.URL>
  @objc open class func documentsGetDocuments(accountId: Swift.String, envelopeId: Swift.String, documentsByUserid: Swift.String? = nil, includeDocumentSize: Swift.String? = nil, includeMetadata: Swift.String? = nil, includeTabs: Swift.String? = nil, recipientId: Swift.String? = nil, sharedUserId: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIEnvelopeDocumentsResult?, _ error: Swift.Error?) -> Swift.Void))
  open class func documentsGetDocumentsWithRequestBuilder(accountId: Swift.String, envelopeId: Swift.String, documentsByUserid: Swift.String? = nil, includeDocumentSize: Swift.String? = nil, includeMetadata: Swift.String? = nil, includeTabs: Swift.String? = nil, recipientId: Swift.String? = nil, sharedUserId: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIEnvelopeDocumentsResult>
  @objc open class func documentsPutDocument(accountId: Swift.String, documentId: Swift.String, envelopeId: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPIEnvelopeDocument?, _ error: Swift.Error?) -> Swift.Void))
  open class func documentsPutDocumentWithRequestBuilder(accountId: Swift.String, documentId: Swift.String, envelopeId: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIEnvelopeDocument>
  @objc open class func documentsPutDocuments(accountId: Swift.String, envelopeId: Swift.String, body: DocuSignAPI.DSAPIEnvelopeDefinition? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIEnvelopeDocumentsResult?, _ error: Swift.Error?) -> Swift.Void))
  open class func documentsPutDocumentsWithRequestBuilder(accountId: Swift.String, envelopeId: Swift.String, body: DocuSignAPI.DSAPIEnvelopeDefinition? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIEnvelopeDocumentsResult>
  @objc open class func emailSettingsDeleteEmailSettings(accountId: Swift.String, envelopeId: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPIEmailSettings?, _ error: Swift.Error?) -> Swift.Void))
  open class func emailSettingsDeleteEmailSettingsWithRequestBuilder(accountId: Swift.String, envelopeId: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIEmailSettings>
  @objc open class func emailSettingsGetEmailSettings(accountId: Swift.String, envelopeId: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPIEmailSettings?, _ error: Swift.Error?) -> Swift.Void))
  open class func emailSettingsGetEmailSettingsWithRequestBuilder(accountId: Swift.String, envelopeId: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIEmailSettings>
  @objc open class func emailSettingsPostEmailSettings(accountId: Swift.String, envelopeId: Swift.String, body: DocuSignAPI.DSAPIEmailSettings? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIEmailSettings?, _ error: Swift.Error?) -> Swift.Void))
  open class func emailSettingsPostEmailSettingsWithRequestBuilder(accountId: Swift.String, envelopeId: Swift.String, body: DocuSignAPI.DSAPIEmailSettings? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIEmailSettings>
  @objc open class func emailSettingsPutEmailSettings(accountId: Swift.String, envelopeId: Swift.String, body: DocuSignAPI.DSAPIEmailSettings? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIEmailSettings?, _ error: Swift.Error?) -> Swift.Void))
  open class func emailSettingsPutEmailSettingsWithRequestBuilder(accountId: Swift.String, envelopeId: Swift.String, body: DocuSignAPI.DSAPIEmailSettings? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIEmailSettings>
  open class func envelopeTransferRulesDeleteEnvelopeTransferRules(accountId: Swift.String, envelopeTransferRuleId: Swift.String, completion: @escaping ((_ data: Swift.Void?, _ error: Swift.Error?) -> Swift.Void))
  open class func envelopeTransferRulesDeleteEnvelopeTransferRulesWithRequestBuilder(accountId: Swift.String, envelopeTransferRuleId: Swift.String) -> DocuSignAPI.RequestBuilder<Swift.Void>
  open class func envelopeTransferRulesGetEnvelopeTransferRules(accountId: Swift.String, count: Swift.String? = nil, startPosition: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIEnvelopeTransferRuleInformation?, _ error: Swift.Error?) -> Swift.Void))
  open class func envelopeTransferRulesGetEnvelopeTransferRulesWithRequestBuilder(accountId: Swift.String, count: Swift.String? = nil, startPosition: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIEnvelopeTransferRuleInformation>
  open class func envelopeTransferRulesPostEnvelopeTransferRules(accountId: Swift.String, body: DocuSignAPI.DSAPIEnvelopeTransferRuleRequest? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIEnvelopeTransferRuleInformation?, _ error: Swift.Error?) -> Swift.Void))
  open class func envelopeTransferRulesPostEnvelopeTransferRulesWithRequestBuilder(accountId: Swift.String, body: DocuSignAPI.DSAPIEnvelopeTransferRuleRequest? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIEnvelopeTransferRuleInformation>
  open class func envelopeTransferRulesPutEnvelopeTransferRule(accountId: Swift.String, envelopeTransferRuleId: Swift.String, body: DocuSignAPI.DSAPIEnvelopeTransferRule? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIEnvelopeTransferRule?, _ error: Swift.Error?) -> Swift.Void))
  open class func envelopeTransferRulesPutEnvelopeTransferRuleWithRequestBuilder(accountId: Swift.String, envelopeTransferRuleId: Swift.String, body: DocuSignAPI.DSAPIEnvelopeTransferRule? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIEnvelopeTransferRule>
  open class func envelopeTransferRulesPutEnvelopeTransferRules(accountId: Swift.String, body: DocuSignAPI.DSAPIEnvelopeTransferRuleInformation? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIEnvelopeTransferRuleInformation?, _ error: Swift.Error?) -> Swift.Void))
  open class func envelopeTransferRulesPutEnvelopeTransferRulesWithRequestBuilder(accountId: Swift.String, body: DocuSignAPI.DSAPIEnvelopeTransferRuleInformation? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIEnvelopeTransferRuleInformation>
  open class func envelopeWorkflowDefinitionDeleteEnvelopeWorkflowDefinition(accountId: Swift.String, envelopeId: Swift.String, completion: @escaping ((_ data: Swift.Void?, _ error: Swift.Error?) -> Swift.Void))
  open class func envelopeWorkflowDefinitionDeleteEnvelopeWorkflowDefinitionWithRequestBuilder(accountId: Swift.String, envelopeId: Swift.String) -> DocuSignAPI.RequestBuilder<Swift.Void>
  open class func envelopeWorkflowDefinitionDeleteTemplateWorkflowDefinition(accountId: Swift.String, templateId: Swift.String, completion: @escaping ((_ data: Swift.Void?, _ error: Swift.Error?) -> Swift.Void))
  open class func envelopeWorkflowDefinitionDeleteTemplateWorkflowDefinitionWithRequestBuilder(accountId: Swift.String, templateId: Swift.String) -> DocuSignAPI.RequestBuilder<Swift.Void>
  open class func envelopeWorkflowDefinitionGetEnvelopeWorkflowDefinition(accountId: Swift.String, envelopeId: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPIWorkflow?, _ error: Swift.Error?) -> Swift.Void))
  open class func envelopeWorkflowDefinitionGetEnvelopeWorkflowDefinitionWithRequestBuilder(accountId: Swift.String, envelopeId: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIWorkflow>
  open class func envelopeWorkflowDefinitionGetTemplateWorkflowDefinition(accountId: Swift.String, templateId: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPIWorkflow?, _ error: Swift.Error?) -> Swift.Void))
  open class func envelopeWorkflowDefinitionGetTemplateWorkflowDefinitionWithRequestBuilder(accountId: Swift.String, templateId: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIWorkflow>
  open class func envelopeWorkflowDefinitionPutEnvelopeWorkflowDefinition(accountId: Swift.String, envelopeId: Swift.String, body: DocuSignAPI.DSAPIWorkflow? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIWorkflow?, _ error: Swift.Error?) -> Swift.Void))
  open class func envelopeWorkflowDefinitionPutEnvelopeWorkflowDefinitionWithRequestBuilder(accountId: Swift.String, envelopeId: Swift.String, body: DocuSignAPI.DSAPIWorkflow? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIWorkflow>
  open class func envelopeWorkflowDefinitionPutTemplateWorkflowDefinition(accountId: Swift.String, templateId: Swift.String, body: DocuSignAPI.DSAPIWorkflow? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIWorkflow?, _ error: Swift.Error?) -> Swift.Void))
  open class func envelopeWorkflowDefinitionPutTemplateWorkflowDefinitionWithRequestBuilder(accountId: Swift.String, templateId: Swift.String, body: DocuSignAPI.DSAPIWorkflow? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIWorkflow>
  @objc open class func envelopesGetEnvelope(accountId: Swift.String, envelopeId: Swift.String, advancedUpdate: Swift.String? = nil, include: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIEnvelope?, _ error: Swift.Error?) -> Swift.Void))
  open class func envelopesGetEnvelopeWithRequestBuilder(accountId: Swift.String, envelopeId: Swift.String, advancedUpdate: Swift.String? = nil, include: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIEnvelope>
  open class func envelopesGetEnvelopes(accountId: Swift.String, acStatus: Swift.String? = nil, block: Swift.String? = nil, cdseMode: Swift.String? = nil, continuationToken: Swift.String? = nil, count: Swift.String? = nil, customField: Swift.String? = nil, email: Swift.String? = nil, envelopeIds: Swift.String? = nil, exclude: Swift.String? = nil, folderIds: Swift.String? = nil, folderTypes: Swift.String? = nil, fromDate: Swift.String? = nil, fromToStatus: Swift.String? = nil, include: Swift.String? = nil, includePurgeInformation: Swift.String? = nil, intersectingFolderIds: Swift.String? = nil, lastQueriedDate: Swift.String? = nil, order: Swift.String? = nil, orderBy: Swift.String? = nil, powerformids: Swift.String? = nil, queryBudget: Swift.String? = nil, requesterDateFormat: Swift.String? = nil, searchText: Swift.String? = nil, startPosition: Swift.String? = nil, status: Swift.String? = nil, toDate: Swift.String? = nil, transactionIds: Swift.String? = nil, userFilter: Swift.String? = nil, userId: Swift.String? = nil, userName: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIEnvelopesInformation?, _ error: Swift.Error?) -> Swift.Void))
  open class func envelopesGetEnvelopesWithRequestBuilder(accountId: Swift.String, acStatus: Swift.String? = nil, block: Swift.String? = nil, cdseMode: Swift.String? = nil, continuationToken: Swift.String? = nil, count: Swift.String? = nil, customField: Swift.String? = nil, email: Swift.String? = nil, envelopeIds: Swift.String? = nil, exclude: Swift.String? = nil, folderIds: Swift.String? = nil, folderTypes: Swift.String? = nil, fromDate: Swift.String? = nil, fromToStatus: Swift.String? = nil, include: Swift.String? = nil, includePurgeInformation: Swift.String? = nil, intersectingFolderIds: Swift.String? = nil, lastQueriedDate: Swift.String? = nil, order: Swift.String? = nil, orderBy: Swift.String? = nil, powerformids: Swift.String? = nil, queryBudget: Swift.String? = nil, requesterDateFormat: Swift.String? = nil, searchText: Swift.String? = nil, startPosition: Swift.String? = nil, status: Swift.String? = nil, toDate: Swift.String? = nil, transactionIds: Swift.String? = nil, userFilter: Swift.String? = nil, userId: Swift.String? = nil, userName: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIEnvelopesInformation>
  @objc open class func envelopesPostEnvelopes(accountId: Swift.String, body: DocuSignAPI.DSAPIEnvelopeDefinition? = nil, cdseMode: Swift.String? = nil, changeRoutingOrder: Swift.String? = nil, completedDocumentsOnly: Swift.String? = nil, mergeRolesOnDraft: Swift.String? = nil, tabLabelExactMatches: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIEnvelopeSummary?, _ error: Swift.Error?) -> Swift.Void))
  open class func envelopesPostEnvelopesWithRequestBuilder(accountId: Swift.String, body: DocuSignAPI.DSAPIEnvelopeDefinition? = nil, cdseMode: Swift.String? = nil, changeRoutingOrder: Swift.String? = nil, completedDocumentsOnly: Swift.String? = nil, mergeRolesOnDraft: Swift.String? = nil, tabLabelExactMatches: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIEnvelopeSummary>
  open class func envelopesPutEnvelope(accountId: Swift.String, envelopeId: Swift.String, body: DocuSignAPI.DSAPIEnvelope? = nil, advancedUpdate: Swift.String? = nil, resendEnvelope: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIEnvelopeUpdateSummary?, _ error: Swift.Error?) -> Swift.Void))
  open class func envelopesPutEnvelopeWithRequestBuilder(accountId: Swift.String, envelopeId: Swift.String, body: DocuSignAPI.DSAPIEnvelope? = nil, advancedUpdate: Swift.String? = nil, resendEnvelope: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIEnvelopeUpdateSummary>
  open class func envelopesPutStatus(accountId: Swift.String, body: DocuSignAPI.DSAPIEnvelopeIdsRequest? = nil, acStatus: Swift.String? = nil, block: Swift.String? = nil, count: Swift.String? = nil, email: Swift.String? = nil, envelopeIds: Swift.String? = nil, fromDate: Swift.String? = nil, fromToStatus: Swift.String? = nil, startPosition: Swift.String? = nil, status: Swift.String? = nil, toDate: Swift.String? = nil, transactionIds: Swift.String? = nil, userName: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIEnvelopesInformation?, _ error: Swift.Error?) -> Swift.Void))
  open class func envelopesPutStatusWithRequestBuilder(accountId: Swift.String, body: DocuSignAPI.DSAPIEnvelopeIdsRequest? = nil, acStatus: Swift.String? = nil, block: Swift.String? = nil, count: Swift.String? = nil, email: Swift.String? = nil, envelopeIds: Swift.String? = nil, fromDate: Swift.String? = nil, fromToStatus: Swift.String? = nil, startPosition: Swift.String? = nil, status: Swift.String? = nil, toDate: Swift.String? = nil, transactionIds: Swift.String? = nil, userName: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIEnvelopesInformation>
  open class func formDataGetFormData(accountId: Swift.String, envelopeId: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPIEnvelopeFormData?, _ error: Swift.Error?) -> Swift.Void))
  open class func formDataGetFormDataWithRequestBuilder(accountId: Swift.String, envelopeId: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIEnvelopeFormData>
  @objc open class func lockDeleteEnvelopeLock(accountId: Swift.String, envelopeId: Swift.String, lockToken: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPILockInformation?, _ error: Swift.Error?) -> Swift.Void))
  open class func lockDeleteEnvelopeLockWithRequestBuilder(accountId: Swift.String, envelopeId: Swift.String, lockToken: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPILockInformation>
  @objc open class func lockGetEnvelopeLock(accountId: Swift.String, envelopeId: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPILockInformation?, _ error: Swift.Error?) -> Swift.Void))
  open class func lockGetEnvelopeLockWithRequestBuilder(accountId: Swift.String, envelopeId: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPILockInformation>
  open class func lockPostEnvelopeLock(accountId: Swift.String, envelopeId: Swift.String, body: DocuSignAPI.DSAPILockRequest? = nil, lockToken: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPILockInformation?, _ error: Swift.Error?) -> Swift.Void))
  open class func lockPostEnvelopeLockWithRequestBuilder(accountId: Swift.String, envelopeId: Swift.String, body: DocuSignAPI.DSAPILockRequest? = nil, lockToken: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPILockInformation>
  open class func lockPutEnvelopeLock(accountId: Swift.String, envelopeId: Swift.String, body: DocuSignAPI.DSAPILockRequest? = nil, lockToken: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPILockInformation?, _ error: Swift.Error?) -> Swift.Void))
  open class func lockPutEnvelopeLockWithRequestBuilder(accountId: Swift.String, envelopeId: Swift.String, body: DocuSignAPI.DSAPILockRequest? = nil, lockToken: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPILockInformation>
  @objc open class func notificationGetEnvelopesEnvelopeIdNotification(accountId: Swift.String, envelopeId: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPINotification?, _ error: Swift.Error?) -> Swift.Void))
  open class func notificationGetEnvelopesEnvelopeIdNotificationWithRequestBuilder(accountId: Swift.String, envelopeId: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPINotification>
  open class func notificationPutEnvelopesEnvelopeIdNotification(accountId: Swift.String, envelopeId: Swift.String, body: DocuSignAPI.DSAPIEnvelopeNotificationRequest? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPINotification?, _ error: Swift.Error?) -> Swift.Void))
  open class func notificationPutEnvelopesEnvelopeIdNotificationWithRequestBuilder(accountId: Swift.String, envelopeId: Swift.String, body: DocuSignAPI.DSAPIEnvelopeNotificationRequest? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPINotification>
  open class func pagesDeletePage(accountId: Swift.String, documentId: Swift.String, envelopeId: Swift.String, pageNumber: Swift.String, completion: @escaping ((_ data: Swift.Void?, _ error: Swift.Error?) -> Swift.Void))
  open class func pagesDeletePageWithRequestBuilder(accountId: Swift.String, documentId: Swift.String, envelopeId: Swift.String, pageNumber: Swift.String) -> DocuSignAPI.RequestBuilder<Swift.Void>
  @objc open class func pagesGetPageImage(accountId: Swift.String, documentId: Swift.String, envelopeId: Swift.String, pageNumber: Swift.String, dpi: Swift.String? = nil, maxHeight: Swift.String? = nil, maxWidth: Swift.String? = nil, showChanges: Swift.String? = nil, completion: @escaping ((_ data: Foundation.Data?, _ error: Swift.Error?) -> Swift.Void))
  open class func pagesGetPageImageWithRequestBuilder(accountId: Swift.String, documentId: Swift.String, envelopeId: Swift.String, pageNumber: Swift.String, dpi: Swift.String? = nil, maxHeight: Swift.String? = nil, maxWidth: Swift.String? = nil, showChanges: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<Foundation.Data>
  open class func pagesGetPageImages(accountId: Swift.String, documentId: Swift.String, envelopeId: Swift.String, count: Swift.String? = nil, dpi: Swift.String? = nil, maxHeight: Swift.String? = nil, maxWidth: Swift.String? = nil, nocache: Swift.String? = nil, showChanges: Swift.String? = nil, startPosition: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIPageImages?, _ error: Swift.Error?) -> Swift.Void))
  open class func pagesGetPageImagesWithRequestBuilder(accountId: Swift.String, documentId: Swift.String, envelopeId: Swift.String, count: Swift.String? = nil, dpi: Swift.String? = nil, maxHeight: Swift.String? = nil, maxWidth: Swift.String? = nil, nocache: Swift.String? = nil, showChanges: Swift.String? = nil, startPosition: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIPageImages>
  open class func pagesPutPageImage(accountId: Swift.String, documentId: Swift.String, envelopeId: Swift.String, pageNumber: Swift.String, body: DocuSignAPI.DSAPIPageRequest? = nil, completion: @escaping ((_ data: Swift.Void?, _ error: Swift.Error?) -> Swift.Void))
  open class func pagesPutPageImageWithRequestBuilder(accountId: Swift.String, documentId: Swift.String, envelopeId: Swift.String, pageNumber: Swift.String, body: DocuSignAPI.DSAPIPageRequest? = nil) -> DocuSignAPI.RequestBuilder<Swift.Void>
  @objc open class func recipientsDeleteRecipient(accountId: Swift.String, envelopeId: Swift.String, recipientId: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPIRecipients?, _ error: Swift.Error?) -> Swift.Void))
  open class func recipientsDeleteRecipientWithRequestBuilder(accountId: Swift.String, envelopeId: Swift.String, recipientId: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIRecipients>
  @objc open class func recipientsDeleteRecipientTabs(accountId: Swift.String, envelopeId: Swift.String, recipientId: Swift.String, body: DocuSignAPI.DSAPITabs? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPITabs?, _ error: Swift.Error?) -> Swift.Void))
  open class func recipientsDeleteRecipientTabsWithRequestBuilder(accountId: Swift.String, envelopeId: Swift.String, recipientId: Swift.String, body: DocuSignAPI.DSAPITabs? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPITabs>
  @objc open class func recipientsDeleteRecipients(accountId: Swift.String, envelopeId: Swift.String, body: DocuSignAPI.DSAPIRecipients? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIRecipients?, _ error: Swift.Error?) -> Swift.Void))
  open class func recipientsDeleteRecipientsWithRequestBuilder(accountId: Swift.String, envelopeId: Swift.String, body: DocuSignAPI.DSAPIRecipients? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIRecipients>
  open class func recipientsGetRecipientDocumentVisibility(accountId: Swift.String, envelopeId: Swift.String, recipientId: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPIDocumentVisibilityList?, _ error: Swift.Error?) -> Swift.Void))
  open class func recipientsGetRecipientDocumentVisibilityWithRequestBuilder(accountId: Swift.String, envelopeId: Swift.String, recipientId: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIDocumentVisibilityList>
  @objc open class func recipientsGetRecipientInitialsImage(accountId: Swift.String, envelopeId: Swift.String, recipientId: Swift.String, includeChrome: Swift.String? = nil, completion: @escaping ((_ data: Foundation.Data?, _ error: Swift.Error?) -> Swift.Void))
  open class func recipientsGetRecipientInitialsImageWithRequestBuilder(accountId: Swift.String, envelopeId: Swift.String, recipientId: Swift.String, includeChrome: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<Foundation.Data>
  @objc open class func recipientsGetRecipientSignature(accountId: Swift.String, envelopeId: Swift.String, recipientId: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPIUserSignature?, _ error: Swift.Error?) -> Swift.Void))
  open class func recipientsGetRecipientSignatureWithRequestBuilder(accountId: Swift.String, envelopeId: Swift.String, recipientId: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIUserSignature>
  @objc open class func recipientsGetRecipientSignatureImage(accountId: Swift.String, envelopeId: Swift.String, recipientId: Swift.String, includeChrome: Swift.String? = nil, completion: @escaping ((_ data: Foundation.Data?, _ error: Swift.Error?) -> Swift.Void))
  open class func recipientsGetRecipientSignatureImageWithRequestBuilder(accountId: Swift.String, envelopeId: Swift.String, recipientId: Swift.String, includeChrome: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<Foundation.Data>
  @objc open class func recipientsGetRecipientTabs(accountId: Swift.String, envelopeId: Swift.String, recipientId: Swift.String, includeAnchorTabLocations: Swift.String? = nil, includeMetadata: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPITabs?, _ error: Swift.Error?) -> Swift.Void))
  open class func recipientsGetRecipientTabsWithRequestBuilder(accountId: Swift.String, envelopeId: Swift.String, recipientId: Swift.String, includeAnchorTabLocations: Swift.String? = nil, includeMetadata: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPITabs>
  @objc open class func recipientsGetRecipients(accountId: Swift.String, envelopeId: Swift.String, includeAnchorTabLocations: Swift.String? = nil, includeExtended: Swift.String? = nil, includeMetadata: Swift.String? = nil, includeTabs: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIRecipients?, _ error: Swift.Error?) -> Swift.Void))
  open class func recipientsGetRecipientsWithRequestBuilder(accountId: Swift.String, envelopeId: Swift.String, includeAnchorTabLocations: Swift.String? = nil, includeExtended: Swift.String? = nil, includeMetadata: Swift.String? = nil, includeTabs: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIRecipients>
  open class func recipientsGetTemplateRecipientDocumentVisibility(accountId: Swift.String, recipientId: Swift.String, templateId: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPIDocumentVisibilityList?, _ error: Swift.Error?) -> Swift.Void))
  open class func recipientsGetTemplateRecipientDocumentVisibilityWithRequestBuilder(accountId: Swift.String, recipientId: Swift.String, templateId: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIDocumentVisibilityList>
  open class func recipientsPostRecipientProofFileLink(accountId: Swift.String, envelopeId: Swift.String, recipientId: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPIProofServiceViewLink?, _ error: Swift.Error?) -> Swift.Void))
  open class func recipientsPostRecipientProofFileLinkWithRequestBuilder(accountId: Swift.String, envelopeId: Swift.String, recipientId: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIProofServiceViewLink>
  open class func recipientsPostRecipientProofFileResourceToken(accountId: Swift.String, envelopeId: Swift.String, recipientId: Swift.String, tokenScopes: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPIProofServiceResourceToken?, _ error: Swift.Error?) -> Swift.Void))
  open class func recipientsPostRecipientProofFileResourceTokenWithRequestBuilder(accountId: Swift.String, envelopeId: Swift.String, recipientId: Swift.String, tokenScopes: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIProofServiceResourceToken>
  @objc open class func recipientsPostRecipientTabs(accountId: Swift.String, envelopeId: Swift.String, recipientId: Swift.String, body: DocuSignAPI.DSAPITabs? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPITabs?, _ error: Swift.Error?) -> Swift.Void))
  open class func recipientsPostRecipientTabsWithRequestBuilder(accountId: Swift.String, envelopeId: Swift.String, recipientId: Swift.String, body: DocuSignAPI.DSAPITabs? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPITabs>
  @objc open class func recipientsPostRecipients(accountId: Swift.String, envelopeId: Swift.String, body: DocuSignAPI.DSAPIRecipients? = nil, resendEnvelope: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIRecipients?, _ error: Swift.Error?) -> Swift.Void))
  open class func recipientsPostRecipientsWithRequestBuilder(accountId: Swift.String, envelopeId: Swift.String, body: DocuSignAPI.DSAPIRecipients? = nil, resendEnvelope: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIRecipients>
  open class func recipientsPutRecipientDocumentVisibility(accountId: Swift.String, envelopeId: Swift.String, recipientId: Swift.String, body: DocuSignAPI.DSAPIDocumentVisibilityList? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIDocumentVisibilityList?, _ error: Swift.Error?) -> Swift.Void))
  open class func recipientsPutRecipientDocumentVisibilityWithRequestBuilder(accountId: Swift.String, envelopeId: Swift.String, recipientId: Swift.String, body: DocuSignAPI.DSAPIDocumentVisibilityList? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIDocumentVisibilityList>
  @objc open class func recipientsPutRecipientInitialsImage(accountId: Swift.String, envelopeId: Swift.String, recipientId: Swift.String, image: UIKit.UIImage, completion: @escaping ((_ error: Swift.Error?) -> Swift.Void))
  open class func recipientsPutRecipientInitialsImageWithRequestBuilder(accountId: Swift.String, envelopeId: Swift.String, recipientId: Swift.String, image: UIKit.UIImage) -> DocuSignAPI.RequestBuilder<Swift.Void>
  @objc open class func recipientsPutRecipientSignatureImage(accountId: Swift.String, envelopeId: Swift.String, recipientId: Swift.String, image: UIKit.UIImage, completion: @escaping ((_ error: Swift.Error?) -> Swift.Void))
  open class func recipientsPutRecipientSignatureImageWithRequestBuilder(accountId: Swift.String, envelopeId: Swift.String, recipientId: Swift.String, image: UIKit.UIImage) -> DocuSignAPI.RequestBuilder<Swift.Void>
  @objc open class func recipientsPutRecipientTabs(accountId: Swift.String, envelopeId: Swift.String, recipientId: Swift.String, body: DocuSignAPI.DSAPITabs? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPITabs?, _ error: Swift.Error?) -> Swift.Void))
  open class func recipientsPutRecipientTabsWithRequestBuilder(accountId: Swift.String, envelopeId: Swift.String, recipientId: Swift.String, body: DocuSignAPI.DSAPITabs? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPITabs>
  @objc open class func recipientsPutRecipients(accountId: Swift.String, envelopeId: Swift.String, body: DocuSignAPI.DSAPIRecipients? = nil, combineSameOrderRecipients: Swift.String? = nil, offlineSigning: Swift.String? = nil, resendEnvelope: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIRecipientsUpdateSummary?, _ error: Swift.Error?) -> Swift.Void))
  open class func recipientsPutRecipientsWithRequestBuilder(accountId: Swift.String, envelopeId: Swift.String, body: DocuSignAPI.DSAPIRecipients? = nil, combineSameOrderRecipients: Swift.String? = nil, offlineSigning: Swift.String? = nil, resendEnvelope: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIRecipientsUpdateSummary>
  open class func recipientsPutRecipientsDocumentVisibility(accountId: Swift.String, envelopeId: Swift.String, body: DocuSignAPI.DSAPIDocumentVisibilityList? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIDocumentVisibilityList?, _ error: Swift.Error?) -> Swift.Void))
  open class func recipientsPutRecipientsDocumentVisibilityWithRequestBuilder(accountId: Swift.String, envelopeId: Swift.String, body: DocuSignAPI.DSAPIDocumentVisibilityList? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIDocumentVisibilityList>
  open class func recipientsPutTemplateRecipientDocumentVisibility(accountId: Swift.String, recipientId: Swift.String, templateId: Swift.String, body: DocuSignAPI.DSAPITemplateDocumentVisibilityList? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPITemplateDocumentVisibilityList?, _ error: Swift.Error?) -> Swift.Void))
  open class func recipientsPutTemplateRecipientDocumentVisibilityWithRequestBuilder(accountId: Swift.String, recipientId: Swift.String, templateId: Swift.String, body: DocuSignAPI.DSAPITemplateDocumentVisibilityList? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPITemplateDocumentVisibilityList>
  open class func recipientsPutTemplateRecipientsDocumentVisibility(accountId: Swift.String, templateId: Swift.String, body: DocuSignAPI.DSAPITemplateDocumentVisibilityList? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPITemplateDocumentVisibilityList?, _ error: Swift.Error?) -> Swift.Void))
  open class func recipientsPutTemplateRecipientsDocumentVisibilityWithRequestBuilder(accountId: Swift.String, templateId: Swift.String, body: DocuSignAPI.DSAPITemplateDocumentVisibilityList? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPITemplateDocumentVisibilityList>
  open class func responsiveHtmlGetDocumentResponsiveHtml(accountId: Swift.String, documentId: Swift.String, envelopeId: Swift.String, includeAnchorTabLocations: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIDocumentHtmlDefinitionOriginals?, _ error: Swift.Error?) -> Swift.Void))
  open class func responsiveHtmlGetDocumentResponsiveHtmlWithRequestBuilder(accountId: Swift.String, documentId: Swift.String, envelopeId: Swift.String, includeAnchorTabLocations: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIDocumentHtmlDefinitionOriginals>
  open class func responsiveHtmlGetEnvelopeDocumentHtmlDefinitions(accountId: Swift.String, documentId: Swift.String, envelopeId: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPIDocumentHtmlDefinitionOriginals?, _ error: Swift.Error?) -> Swift.Void))
  open class func responsiveHtmlGetEnvelopeDocumentHtmlDefinitionsWithRequestBuilder(accountId: Swift.String, documentId: Swift.String, envelopeId: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIDocumentHtmlDefinitionOriginals>
  open class func responsiveHtmlGetEnvelopeHtmlDefinitions(accountId: Swift.String, envelopeId: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPIDocumentHtmlDefinitionOriginals?, _ error: Swift.Error?) -> Swift.Void))
  open class func responsiveHtmlGetEnvelopeHtmlDefinitionsWithRequestBuilder(accountId: Swift.String, envelopeId: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIDocumentHtmlDefinitionOriginals>
  open class func responsiveHtmlGetResponsiveHtml(accountId: Swift.String, envelopeId: Swift.String, includeAnchorTabLocations: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIDocumentHtmlDefinitionOriginals?, _ error: Swift.Error?) -> Swift.Void))
  open class func responsiveHtmlGetResponsiveHtmlWithRequestBuilder(accountId: Swift.String, envelopeId: Swift.String, includeAnchorTabLocations: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIDocumentHtmlDefinitionOriginals>
  open class func responsiveHtmlPostDocumentResponsiveHtmlPreview(accountId: Swift.String, documentId: Swift.String, envelopeId: Swift.String, body: DocuSignAPI.DSAPIDocumentHtmlDefinition? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIDocumentHtmlDefinitions?, _ error: Swift.Error?) -> Swift.Void))
  open class func responsiveHtmlPostDocumentResponsiveHtmlPreviewWithRequestBuilder(accountId: Swift.String, documentId: Swift.String, envelopeId: Swift.String, body: DocuSignAPI.DSAPIDocumentHtmlDefinition? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIDocumentHtmlDefinitions>
  open class func responsiveHtmlPostResponsiveHtmlPreview(accountId: Swift.String, envelopeId: Swift.String, body: DocuSignAPI.DSAPIDocumentHtmlDefinition? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIDocumentHtmlDefinitions?, _ error: Swift.Error?) -> Swift.Void))
  open class func responsiveHtmlPostResponsiveHtmlPreviewWithRequestBuilder(accountId: Swift.String, envelopeId: Swift.String, body: DocuSignAPI.DSAPIDocumentHtmlDefinition? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIDocumentHtmlDefinitions>
  open class func tabsBlobGetTabsBlob(accountId: Swift.String, envelopeId: Swift.String, completion: @escaping ((_ data: Swift.Void?, _ error: Swift.Error?) -> Swift.Void))
  open class func tabsBlobGetTabsBlobWithRequestBuilder(accountId: Swift.String, envelopeId: Swift.String) -> DocuSignAPI.RequestBuilder<Swift.Void>
  open class func tabsBlobPutTabsBlob(accountId: Swift.String, envelopeId: Swift.String, completion: @escaping ((_ data: Swift.Void?, _ error: Swift.Error?) -> Swift.Void))
  open class func tabsBlobPutTabsBlobWithRequestBuilder(accountId: Swift.String, envelopeId: Swift.String) -> DocuSignAPI.RequestBuilder<Swift.Void>
  @objc open class func tabsDeleteDocumentTabs(accountId: Swift.String, documentId: Swift.String, envelopeId: Swift.String, body: DocuSignAPI.DSAPITabs? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPITabs?, _ error: Swift.Error?) -> Swift.Void))
  open class func tabsDeleteDocumentTabsWithRequestBuilder(accountId: Swift.String, documentId: Swift.String, envelopeId: Swift.String, body: DocuSignAPI.DSAPITabs? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPITabs>
  @objc open class func tabsGetDocumentTabs(accountId: Swift.String, documentId: Swift.String, envelopeId: Swift.String, includeMetadata: Swift.String? = nil, pageNumbers: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPITabs?, _ error: Swift.Error?) -> Swift.Void))
  open class func tabsGetDocumentTabsWithRequestBuilder(accountId: Swift.String, documentId: Swift.String, envelopeId: Swift.String, includeMetadata: Swift.String? = nil, pageNumbers: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPITabs>
  @objc open class func tabsGetPageTabs(accountId: Swift.String, documentId: Swift.String, envelopeId: Swift.String, pageNumber: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPITabs?, _ error: Swift.Error?) -> Swift.Void))
  open class func tabsGetPageTabsWithRequestBuilder(accountId: Swift.String, documentId: Swift.String, envelopeId: Swift.String, pageNumber: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPITabs>
  @objc open class func tabsPostDocumentTabs(accountId: Swift.String, documentId: Swift.String, envelopeId: Swift.String, body: DocuSignAPI.DSAPITabs? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPITabs?, _ error: Swift.Error?) -> Swift.Void))
  open class func tabsPostDocumentTabsWithRequestBuilder(accountId: Swift.String, documentId: Swift.String, envelopeId: Swift.String, body: DocuSignAPI.DSAPITabs? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPITabs>
  @objc open class func tabsPutDocumentTabs(accountId: Swift.String, documentId: Swift.String, envelopeId: Swift.String, body: DocuSignAPI.DSAPITabs? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPITabs?, _ error: Swift.Error?) -> Swift.Void))
  open class func tabsPutDocumentTabsWithRequestBuilder(accountId: Swift.String, documentId: Swift.String, envelopeId: Swift.String, body: DocuSignAPI.DSAPITabs? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPITabs>
  open class func templatesDeleteDocumentTemplates(accountId: Swift.String, documentId: Swift.String, envelopeId: Swift.String, templateId: Swift.String, completion: @escaping ((_ data: Swift.Void?, _ error: Swift.Error?) -> Swift.Void))
  open class func templatesDeleteDocumentTemplatesWithRequestBuilder(accountId: Swift.String, documentId: Swift.String, envelopeId: Swift.String, templateId: Swift.String) -> DocuSignAPI.RequestBuilder<Swift.Void>
  open class func templatesGetDocumentTemplates(accountId: Swift.String, documentId: Swift.String, envelopeId: Swift.String, include: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPITemplateInformation?, _ error: Swift.Error?) -> Swift.Void))
  open class func templatesGetDocumentTemplatesWithRequestBuilder(accountId: Swift.String, documentId: Swift.String, envelopeId: Swift.String, include: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPITemplateInformation>
  open class func templatesGetEnvelopeTemplates(accountId: Swift.String, envelopeId: Swift.String, include: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPITemplateInformation?, _ error: Swift.Error?) -> Swift.Void))
  open class func templatesGetEnvelopeTemplatesWithRequestBuilder(accountId: Swift.String, envelopeId: Swift.String, include: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPITemplateInformation>
  open class func templatesPostDocumentTemplates(accountId: Swift.String, documentId: Swift.String, envelopeId: Swift.String, body: DocuSignAPI.DSAPIDocumentTemplateList? = nil, preserveTemplateRecipient: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIDocumentTemplateList?, _ error: Swift.Error?) -> Swift.Void))
  open class func templatesPostDocumentTemplatesWithRequestBuilder(accountId: Swift.String, documentId: Swift.String, envelopeId: Swift.String, body: DocuSignAPI.DSAPIDocumentTemplateList? = nil, preserveTemplateRecipient: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIDocumentTemplateList>
  open class func templatesPostEnvelopeTemplates(accountId: Swift.String, envelopeId: Swift.String, body: DocuSignAPI.DSAPIDocumentTemplateList? = nil, preserveTemplateRecipient: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIDocumentTemplateList?, _ error: Swift.Error?) -> Swift.Void))
  open class func templatesPostEnvelopeTemplatesWithRequestBuilder(accountId: Swift.String, envelopeId: Swift.String, body: DocuSignAPI.DSAPIDocumentTemplateList? = nil, preserveTemplateRecipient: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIDocumentTemplateList>
  open class func viewsDeleteEnvelopeCorrectView(accountId: Swift.String, envelopeId: Swift.String, body: DocuSignAPI.DSAPICorrectViewRequest? = nil, completion: @escaping ((_ data: Swift.Void?, _ error: Swift.Error?) -> Swift.Void))
  open class func viewsDeleteEnvelopeCorrectViewWithRequestBuilder(accountId: Swift.String, envelopeId: Swift.String, body: DocuSignAPI.DSAPICorrectViewRequest? = nil) -> DocuSignAPI.RequestBuilder<Swift.Void>
  open class func viewsPostAccountConsoleView(accountId: Swift.String, body: DocuSignAPI.DSAPIConsoleViewRequest? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIViewUrl?, _ error: Swift.Error?) -> Swift.Void))
  open class func viewsPostAccountConsoleViewWithRequestBuilder(accountId: Swift.String, body: DocuSignAPI.DSAPIConsoleViewRequest? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIViewUrl>
  open class func viewsPostEnvelopeCorrectView(accountId: Swift.String, envelopeId: Swift.String, body: DocuSignAPI.DSAPICorrectViewRequest? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIViewUrl?, _ error: Swift.Error?) -> Swift.Void))
  open class func viewsPostEnvelopeCorrectViewWithRequestBuilder(accountId: Swift.String, envelopeId: Swift.String, body: DocuSignAPI.DSAPICorrectViewRequest? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIViewUrl>
  open class func viewsPostEnvelopeEditView(accountId: Swift.String, envelopeId: Swift.String, body: DocuSignAPI.DSAPIReturnUrlRequest? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIViewUrl?, _ error: Swift.Error?) -> Swift.Void))
  open class func viewsPostEnvelopeEditViewWithRequestBuilder(accountId: Swift.String, envelopeId: Swift.String, body: DocuSignAPI.DSAPIReturnUrlRequest? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIViewUrl>
  open class func viewsPostEnvelopeRecipientPreview(accountId: Swift.String, envelopeId: Swift.String, body: DocuSignAPI.DSAPIRecipientPreviewRequest? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIViewUrl?, _ error: Swift.Error?) -> Swift.Void))
  open class func viewsPostEnvelopeRecipientPreviewWithRequestBuilder(accountId: Swift.String, envelopeId: Swift.String, body: DocuSignAPI.DSAPIRecipientPreviewRequest? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIViewUrl>
  @objc open class func viewsPostEnvelopeRecipientSharedView(accountId: Swift.String, envelopeId: Swift.String, body: DocuSignAPI.DSAPIRecipientViewRequest? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIViewUrl?, _ error: Swift.Error?) -> Swift.Void))
  open class func viewsPostEnvelopeRecipientSharedViewWithRequestBuilder(accountId: Swift.String, envelopeId: Swift.String, body: DocuSignAPI.DSAPIRecipientViewRequest? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIViewUrl>
  @objc open class func viewsPostEnvelopeRecipientView(accountId: Swift.String, envelopeId: Swift.String, body: DocuSignAPI.DSAPIRecipientViewRequest? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIViewUrl?, _ error: Swift.Error?) -> Swift.Void))
  open class func viewsPostEnvelopeRecipientViewWithRequestBuilder(accountId: Swift.String, envelopeId: Swift.String, body: DocuSignAPI.DSAPIRecipientViewRequest? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIViewUrl>
  open class func viewsPostEnvelopeSenderView(accountId: Swift.String, envelopeId: Swift.String, body: DocuSignAPI.DSAPIReturnUrlRequest? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIViewUrl?, _ error: Swift.Error?) -> Swift.Void))
  open class func viewsPostEnvelopeSenderViewWithRequestBuilder(accountId: Swift.String, envelopeId: Swift.String, body: DocuSignAPI.DSAPIReturnUrlRequest? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIViewUrl>
  @objc open class func viewsPostRecipientManualReviewView(accountId: Swift.String, envelopeId: Swift.String, recipientId: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPIViewUrl?, _ error: Swift.Error?) -> Swift.Void))
  open class func viewsPostRecipientManualReviewViewWithRequestBuilder(accountId: Swift.String, envelopeId: Swift.String, recipientId: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIViewUrl>
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class DSAPIRecipientAttachment : ObjectiveC.NSObject, Swift.Codable {
  @objc public var attachmentId: Swift.String?
  @objc public var attachmentType: Swift.String?
  @objc public var data: Swift.String?
  @objc public var label: Swift.String?
  @objc public var name: Swift.String?
  @objc public var remoteUrl: Foundation.URL?
  @objc override dynamic public init()
  @objc public init(attachmentId: Swift.String? = nil, attachmentType: Swift.String? = nil, data: Swift.String? = nil, label: Swift.String? = nil, name: Swift.String? = nil, remoteUrl: Foundation.URL? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIAccountAddress : Swift.Codable {
  public var address1: Swift.String?
  public var address2: Swift.String?
  public var city: Swift.String?
  public var country: Swift.String?
  public var email: Swift.String?
  public var fax: Swift.String?
  public var firstName: Swift.String?
  public var lastName: Swift.String?
  public var phone: Swift.String?
  public var postalCode: Swift.String?
  public var state: Swift.String?
  public var supportedCountries: [DocuSignAPI.DSAPICountry]?
  public init(address1: Swift.String? = nil, address2: Swift.String? = nil, city: Swift.String? = nil, country: Swift.String? = nil, email: Swift.String? = nil, fax: Swift.String? = nil, firstName: Swift.String? = nil, lastName: Swift.String? = nil, phone: Swift.String? = nil, postalCode: Swift.String? = nil, state: Swift.String? = nil, supportedCountries: [DocuSignAPI.DSAPICountry]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIBulkRecipientsResponse : Swift.Codable {
  public var bulkRecipients: [DocuSignAPI.DSAPIBulkRecipient]?
  public var endPosition: Swift.String?
  public var nextUri: Foundation.URL?
  public var previousUri: Foundation.URL?
  public var resultSetSize: Swift.String?
  public var startPosition: Swift.String?
  public var totalSetSize: Swift.String?
  public init(bulkRecipients: [DocuSignAPI.DSAPIBulkRecipient]? = nil, endPosition: Swift.String? = nil, nextUri: Foundation.URL? = nil, previousUri: Foundation.URL? = nil, resultSetSize: Swift.String? = nil, startPosition: Swift.String? = nil, totalSetSize: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIDocumentTemplateList : Swift.Codable {
  public var documentTemplates: [DocuSignAPI.DSAPIDocumentTemplate]?
  public init(documentTemplates: [DocuSignAPI.DSAPIDocumentTemplate]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIBrandLogos : Swift.Codable {
  public var email: Swift.String?
  public var primary: Swift.String?
  public var secondary: Swift.String?
  public init(email: Swift.String? = nil, primary: Swift.String? = nil, secondary: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIPrefillFormData : Swift.Codable {
  public var formData: [DocuSignAPI.DSAPIFormDataItem]?
  public var senderEmail: Swift.String?
  public var senderName: Swift.String?
  public var senderUserId: Swift.String?
  public init(formData: [DocuSignAPI.DSAPIFormDataItem]? = nil, senderEmail: Swift.String? = nil, senderName: Swift.String? = nil, senderUserId: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers open class BulkEnvelopesAPI {
  open class func bulkSendV2BatchGetBulkSendBatchStatus(accountId: Swift.String, bulkSendBatchId: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPIBulkSendBatchStatus?, _ error: Swift.Error?) -> Swift.Void))
  open class func bulkSendV2BatchGetBulkSendBatchStatusWithRequestBuilder(accountId: Swift.String, bulkSendBatchId: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIBulkSendBatchStatus>
  open class func bulkSendV2BatchGetBulkSendBatches(accountId: Swift.String, batchIds: Swift.String? = nil, count: Swift.String? = nil, searchText: Swift.String? = nil, startPosition: Swift.String? = nil, status: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIBulkSendBatchSummaries?, _ error: Swift.Error?) -> Swift.Void))
  open class func bulkSendV2BatchGetBulkSendBatchesWithRequestBuilder(accountId: Swift.String, batchIds: Swift.String? = nil, count: Swift.String? = nil, searchText: Swift.String? = nil, startPosition: Swift.String? = nil, status: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIBulkSendBatchSummaries>
  open class func bulkSendV2BatchPutBulkSendBatchAction(accountId: Swift.String, bulkAction: Swift.String, bulkSendBatchId: Swift.String, body: DocuSignAPI.DSAPIBulkSendBatchActionRequest? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIBulkSendBatchStatus?, _ error: Swift.Error?) -> Swift.Void))
  open class func bulkSendV2BatchPutBulkSendBatchActionWithRequestBuilder(accountId: Swift.String, bulkAction: Swift.String, bulkSendBatchId: Swift.String, body: DocuSignAPI.DSAPIBulkSendBatchActionRequest? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIBulkSendBatchStatus>
  open class func bulkSendV2BatchPutBulkSendBatchStatus(accountId: Swift.String, bulkSendBatchId: Swift.String, body: DocuSignAPI.DSAPIBulkSendBatchRequest? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIBulkSendBatchStatus?, _ error: Swift.Error?) -> Swift.Void))
  open class func bulkSendV2BatchPutBulkSendBatchStatusWithRequestBuilder(accountId: Swift.String, bulkSendBatchId: Swift.String, body: DocuSignAPI.DSAPIBulkSendBatchRequest? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIBulkSendBatchStatus>
  open class func bulkSendV2CRUDDeleteBulkSendList(accountId: Swift.String, bulkSendListId: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPIBulkSendingListSummaries?, _ error: Swift.Error?) -> Swift.Void))
  open class func bulkSendV2CRUDDeleteBulkSendListWithRequestBuilder(accountId: Swift.String, bulkSendListId: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIBulkSendingListSummaries>
  open class func bulkSendV2CRUDGetBulkSendList(accountId: Swift.String, bulkSendListId: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPIBulkSendingList?, _ error: Swift.Error?) -> Swift.Void))
  open class func bulkSendV2CRUDGetBulkSendListWithRequestBuilder(accountId: Swift.String, bulkSendListId: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIBulkSendingList>
  open class func bulkSendV2CRUDGetBulkSendLists(accountId: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPIBulkSendingListSummaries?, _ error: Swift.Error?) -> Swift.Void))
  open class func bulkSendV2CRUDGetBulkSendListsWithRequestBuilder(accountId: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIBulkSendingListSummaries>
  open class func bulkSendV2CRUDPostBulkSendList(accountId: Swift.String, body: DocuSignAPI.DSAPIBulkSendingList? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIBulkSendingList?, _ error: Swift.Error?) -> Swift.Void))
  open class func bulkSendV2CRUDPostBulkSendListWithRequestBuilder(accountId: Swift.String, body: DocuSignAPI.DSAPIBulkSendingList? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIBulkSendingList>
  open class func bulkSendV2CRUDPutBulkSendList(accountId: Swift.String, bulkSendListId: Swift.String, body: DocuSignAPI.DSAPIBulkSendingList? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIBulkSendingList?, _ error: Swift.Error?) -> Swift.Void))
  open class func bulkSendV2CRUDPutBulkSendListWithRequestBuilder(accountId: Swift.String, bulkSendListId: Swift.String, body: DocuSignAPI.DSAPIBulkSendingList? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIBulkSendingList>
  open class func bulkSendV2EnvelopesGetBulkSendBatchEnvelopes(accountId: Swift.String, bulkSendBatchId: Swift.String, count: Swift.String? = nil, include: Swift.String? = nil, order: Swift.String? = nil, orderBy: Swift.String? = nil, searchText: Swift.String? = nil, startPosition: Swift.String? = nil, status: Swift.String? = nil, userId: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIEnvelopesInformation?, _ error: Swift.Error?) -> Swift.Void))
  open class func bulkSendV2EnvelopesGetBulkSendBatchEnvelopesWithRequestBuilder(accountId: Swift.String, bulkSendBatchId: Swift.String, count: Swift.String? = nil, include: Swift.String? = nil, order: Swift.String? = nil, orderBy: Swift.String? = nil, searchText: Swift.String? = nil, startPosition: Swift.String? = nil, status: Swift.String? = nil, userId: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIEnvelopesInformation>
  open class func bulkSendV2SendPostBulkSendRequest(accountId: Swift.String, bulkSendListId: Swift.String, body: DocuSignAPI.DSAPIBulkSendRequest? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIBulkSendResponse?, _ error: Swift.Error?) -> Swift.Void))
  open class func bulkSendV2SendPostBulkSendRequestWithRequestBuilder(accountId: Swift.String, bulkSendListId: Swift.String, body: DocuSignAPI.DSAPIBulkSendRequest? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIBulkSendResponse>
  open class func bulkSendV2TestPostBulkSendTestRequest(accountId: Swift.String, bulkSendListId: Swift.String, body: DocuSignAPI.DSAPIBulkSendRequest? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIBulkSendTestResponse?, _ error: Swift.Error?) -> Swift.Void))
  open class func bulkSendV2TestPostBulkSendTestRequestWithRequestBuilder(accountId: Swift.String, bulkSendListId: Swift.String, body: DocuSignAPI.DSAPIBulkSendRequest? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIBulkSendTestResponse>
  @objc deinit
}
public struct DSAPIIdCheckInformationInput : Swift.Codable {
  public var addressInformationInput: DocuSignAPI.DSAPIAddressInformationInput?
  public var dobInformationInput: DocuSignAPI.DSAPIDobInformationInput?
  public var ssn4InformationInput: DocuSignAPI.DSAPISsn4InformationInput?
  public var ssn9InformationInput: DocuSignAPI.DSAPISsn9InformationInput?
  public init(addressInformationInput: DocuSignAPI.DSAPIAddressInformationInput? = nil, dobInformationInput: DocuSignAPI.DSAPIDobInformationInput? = nil, ssn4InformationInput: DocuSignAPI.DSAPISsn4InformationInput? = nil, ssn9InformationInput: DocuSignAPI.DSAPISsn9InformationInput? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIMoney : Swift.Codable {
  public var amountInBaseUnit: Swift.String?
  public var currency: Swift.String?
  public var displayAmount: Swift.String?
  public init(amountInBaseUnit: Swift.String? = nil, currency: Swift.String? = nil, displayAmount: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIConditionalRecipientRule : Swift.Codable {
  public var conditions: [DocuSignAPI.DSAPIConditionalRecipientRuleCondition]?
  public var order: Swift.String?
  public var recipientGroup: DocuSignAPI.DSAPIRecipientGroup?
  public var recipientId: Swift.String?
  public init(conditions: [DocuSignAPI.DSAPIConditionalRecipientRuleCondition]? = nil, order: Swift.String? = nil, recipientGroup: DocuSignAPI.DSAPIRecipientGroup? = nil, recipientId: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @objcMembers public class DSAPIBccEmailAddress : ObjectiveC.NSObject, Swift.Codable {
  @objc public var bccEmailAddressId: Swift.String?
  @objc public var email: Swift.String?
  @objc override dynamic public init()
  @objc public init(bccEmailAddressId: Swift.String? = nil, email: Swift.String? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIConnectSalesforceObject : Swift.Codable {
  @DocuSignAPI.BoolFromString public var active: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var _description: Swift.String?
  public var _id: Swift.String?
  public var insert: Swift.String?
  @DocuSignAPI.BoolFromString public var onCompleteOnly: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var selectFields: [DocuSignAPI.DSAPIConnectSalesforceField]?
  public var sfObject: Swift.String?
  public var sfObjectName: Swift.String?
  public var updateFields: [DocuSignAPI.DSAPIConnectSalesforceField]?
  public init(active: Swift.Bool = false, _description: Swift.String? = nil, _id: Swift.String? = nil, insert: Swift.String? = nil, onCompleteOnly: Swift.Bool = false, selectFields: [DocuSignAPI.DSAPIConnectSalesforceField]? = nil, sfObject: Swift.String? = nil, sfObjectName: Swift.String? = nil, updateFields: [DocuSignAPI.DSAPIConnectSalesforceField]? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case active
    case _description
    case _id
    case insert
    case onCompleteOnly
    case selectFields
    case sfObject
    case sfObjectName
    case updateFields
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPILocalePolicy : Swift.Codable {
  public var addressFormat: Swift.String?
  public var addressFormatMetadata: DocuSignAPI.DSAPISettingsMetadata?
  public var allowRegion: Swift.String?
  public var calendarType: Swift.String?
  public var calendarTypeMetadata: DocuSignAPI.DSAPISettingsMetadata?
  public var cultureName: Swift.String?
  public var cultureNameMetadata: DocuSignAPI.DSAPISettingsMetadata?
  public var currencyCode: Swift.String?
  public var currencyCodeMetadata: DocuSignAPI.DSAPISettingsMetadata?
  public var currencyNegativeFormat: Swift.String?
  public var currencyNegativeFormatMetadata: DocuSignAPI.DSAPISettingsMetadata?
  public var currencyPositiveFormat: Swift.String?
  public var currencyPositiveFormatMetadata: DocuSignAPI.DSAPISettingsMetadata?
  public var customDateFormat: Swift.String?
  public var customSignDateFormat: Swift.String?
  public var customSignTimeFormat: Swift.String?
  public var customTimeFormat: Swift.String?
  public var dateFormat: Swift.String?
  public var dateFormatMetadata: DocuSignAPI.DSAPISettingsMetadata?
  public var effectiveAddressFormat: Swift.String?
  public var effectiveCalendarType: Swift.String?
  public var effectiveCurrencyCode: Swift.String?
  public var effectiveCurrencyNegativeFormat: Swift.String?
  public var effectiveCurrencyPositiveFormat: Swift.String?
  public var effectiveCustomDateFormat: Swift.String?
  public var effectiveCustomTimeFormat: Swift.String?
  public var effectiveDateFormat: Swift.String?
  public var effectiveInitialFormat: Swift.String?
  public var effectiveNameFormat: Swift.String?
  public var effectiveTimeFormat: Swift.String?
  public var effectiveTimeZone: Swift.String?
  public var initialFormat: Swift.String?
  public var initialFormatMetadata: DocuSignAPI.DSAPISettingsMetadata?
  public var nameFormat: Swift.String?
  public var nameFormatMetadata: DocuSignAPI.DSAPISettingsMetadata?
  public var signDateFormat: Swift.String?
  public var signDateFormatMetadata: DocuSignAPI.DSAPISettingsMetadata?
  public var signTimeFormat: Swift.String?
  public var signTimeFormatMetadata: DocuSignAPI.DSAPISettingsMetadata?
  public var timeFormat: Swift.String?
  public var timeFormatMetadata: DocuSignAPI.DSAPISettingsMetadata?
  public var timeZone: Swift.String?
  public var timeZoneMetadata: DocuSignAPI.DSAPISettingsMetadata?
  public init(addressFormat: Swift.String? = nil, addressFormatMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowRegion: Swift.String? = nil, calendarType: Swift.String? = nil, calendarTypeMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, cultureName: Swift.String? = nil, cultureNameMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, currencyCode: Swift.String? = nil, currencyCodeMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, currencyNegativeFormat: Swift.String? = nil, currencyNegativeFormatMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, currencyPositiveFormat: Swift.String? = nil, currencyPositiveFormatMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, customDateFormat: Swift.String? = nil, customSignDateFormat: Swift.String? = nil, customSignTimeFormat: Swift.String? = nil, customTimeFormat: Swift.String? = nil, dateFormat: Swift.String? = nil, dateFormatMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, effectiveAddressFormat: Swift.String? = nil, effectiveCalendarType: Swift.String? = nil, effectiveCurrencyCode: Swift.String? = nil, effectiveCurrencyNegativeFormat: Swift.String? = nil, effectiveCurrencyPositiveFormat: Swift.String? = nil, effectiveCustomDateFormat: Swift.String? = nil, effectiveCustomTimeFormat: Swift.String? = nil, effectiveDateFormat: Swift.String? = nil, effectiveInitialFormat: Swift.String? = nil, effectiveNameFormat: Swift.String? = nil, effectiveTimeFormat: Swift.String? = nil, effectiveTimeZone: Swift.String? = nil, initialFormat: Swift.String? = nil, initialFormatMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, nameFormat: Swift.String? = nil, nameFormatMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, signDateFormat: Swift.String? = nil, signDateFormatMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, signTimeFormat: Swift.String? = nil, signTimeFormatMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, timeFormat: Swift.String? = nil, timeFormatMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, timeZone: Swift.String? = nil, timeZoneMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIPermissionProfileInformation : Swift.Codable {
  public var permissionProfiles: [DocuSignAPI.DSAPIPermissionProfile]?
  public init(permissionProfiles: [DocuSignAPI.DSAPIPermissionProfile]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIExternalFile : Swift.Codable {
  public var date: Foundation.Date?
  public var hasCompositeTemplate: Swift.String?
  public var _id: Swift.String?
  public var img: Swift.String?
  public var name: Swift.String?
  public var ownerName: Swift.String?
  public var size: Swift.String?
  @DocuSignAPI.BoolFromString public var supported: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var type: Swift.String?
  public var uri: Foundation.URL?
  public init(date: Foundation.Date? = nil, hasCompositeTemplate: Swift.String? = nil, _id: Swift.String? = nil, img: Swift.String? = nil, name: Swift.String? = nil, ownerName: Swift.String? = nil, size: Swift.String? = nil, supported: Swift.Bool = false, type: Swift.String? = nil, uri: Foundation.URL? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case date
    case hasCompositeTemplate
    case _id
    case img
    case name
    case ownerName
    case size
    case supported
    case type
    case uri
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIBulkRecipientTabLabel : Swift.Codable {
  public var name: Swift.String?
  public var value: Swift.String?
  public init(name: Swift.String? = nil, value: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @objcMembers public class DSAPIExpirations : ObjectiveC.NSObject, Swift.Codable {
  @objc public var expireAfter: Swift.String?
  @objc @DocuSignAPI.BoolFromString public var expireEnabled: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var expireWarn: Swift.String?
  @objc override dynamic public init()
  @objc public init(expireAfter: Swift.String? = nil, expireEnabled: Swift.Bool = false, expireWarn: Swift.String? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIProofServiceViewLink : Swift.Codable {
  public var viewLink: Swift.String?
  public init(viewLink: Swift.String? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case viewLink
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIReservedDomainExistence : Swift.Codable {
  public var emailDomain: Swift.String?
  public var isReserved: Swift.String?
  public init(emailDomain: Swift.String? = nil, isReserved: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIContactGetResponse : Swift.Codable {
  public var contacts: [DocuSignAPI.DSAPIContact]?
  public var endPosition: Swift.String?
  public var nextUri: Foundation.URL?
  public var previousUri: Foundation.URL?
  public var resultSetSize: Swift.String?
  public var startPosition: Swift.String?
  public var totalSetSize: Swift.String?
  public init(contacts: [DocuSignAPI.DSAPIContact]? = nil, endPosition: Swift.String? = nil, nextUri: Foundation.URL? = nil, previousUri: Foundation.URL? = nil, resultSetSize: Swift.String? = nil, startPosition: Swift.String? = nil, totalSetSize: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension DocuSignAPI.UsersAPI {
  @objc dynamic open class func userSignaturesPostUserSignatureImages(accountId: Swift.String, userId: Swift.String, body: DocuSignAPI.DSAPIUserSignaturesInformation? = nil, multiParts: Swift.Dictionary<Swift.String, [Any]>?, completion: @escaping ((_ data: DocuSignAPI.DSAPIUserSignaturesInformation?, _ error: Swift.Error?) -> Swift.Void))
  open class func userSignaturesPostUserSignatureImagesWithRequestBuilder(accountId: Swift.String, userId: Swift.String, body: DocuSignAPI.DSAPIUserSignaturesInformation? = nil, multiParts: Swift.Dictionary<Swift.String, [Any]>?) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIUserSignaturesInformation>
  @objc dynamic open class func userSignaturesPutUserSignatureImageData(accountId: Swift.String, imageType: Swift.String, image: UIKit.UIImage, signatureId: Swift.String, userId: Swift.String, transparentPng: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIUserSignature?, _ error: Swift.Error?) -> Swift.Void))
  open class func userSignaturesPutUserSignatureImageDataWithRequestBuilder(accountId: Swift.String, imageType: Swift.String, image: UIKit.UIImage, signatureId: Swift.String, userId: Swift.String, transparentPng: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIUserSignature>
}
@objc @objcMembers public class DSAPIDocumentVisibility : ObjectiveC.NSObject, Swift.Codable {
  @objc public var documentId: Swift.String?
  @objc public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  @objc public var recipientId: Swift.String?
  @objc public var rights: Swift.String?
  @objc @DocuSignAPI.BoolFromString public var visible: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public init(documentId: Swift.String? = nil, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, recipientId: Swift.String? = nil, rights: Swift.String? = nil, visible: Swift.Bool = false)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @objcMembers public class DSAPIViewUrl : ObjectiveC.NSObject, Swift.Codable {
  @objc public var url: Foundation.URL?
  @objc public init(url: Foundation.URL? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIBulkRecipientSignatureProvider : Swift.Codable {
  public var name: Swift.String?
  public var value: Swift.String?
  public init(name: Swift.String? = nil, value: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIEnvelopeAttachment : Swift.Codable {
  public var accessControl: Swift.String?
  public var attachmentId: Swift.String?
  public var attachmentType: Swift.String?
  public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  public var label: Swift.String?
  public var name: Swift.String?
  public init(accessControl: Swift.String? = nil, attachmentId: Swift.String? = nil, attachmentType: Swift.String? = nil, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, label: Swift.String? = nil, name: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIBillingPaymentResponse : Swift.Codable {
  public var billingPayments: [DocuSignAPI.DSAPIBillingPayment]?
  public init(billingPayments: [DocuSignAPI.DSAPIBillingPayment]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @objcMembers public class DSAPIFullName : ObjectiveC.NSObject, Swift.Codable {
  @objc @DocuSignAPI.BoolFromString public var anchorAllowWhiteSpaceInCharacters: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorAllowWhiteSpaceInCharactersMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var anchorCaseSensitive: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorCaseSensitiveMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorHorizontalAlignment: Swift.String?
  @objc public var anchorHorizontalAlignmentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var anchorIgnoreIfNotPresent: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorIgnoreIfNotPresentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var anchorMatchWholeWord: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorMatchWholeWordMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorString: Swift.String?
  @objc public var anchorStringMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorTabProcessorVersion: Swift.String?
  @objc public var anchorTabProcessorVersionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorUnits: Swift.String?
  @objc public var anchorUnitsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorXOffset: Swift.String?
  @objc public var anchorXOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorYOffset: Swift.String?
  @objc public var anchorYOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var bold: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var boldMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var conditionalParentLabel: Swift.String?
  @objc public var conditionalParentLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var conditionalParentValue: Swift.String?
  @objc public var conditionalParentValueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var customTabId: Swift.String?
  @objc public var customTabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var documentId: Swift.String?
  @objc public var documentIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  @objc public var font: Swift.String?
  @objc public var fontColor: Swift.String?
  @objc public var fontColorMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var fontMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var fontSize: Swift.String?
  @objc public var fontSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var formOrder: Swift.String?
  @objc public var formOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var formPageLabel: Swift.String?
  @objc public var formPageLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var formPageNumber: Swift.String?
  @objc public var formPageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var height: Swift.String?
  @objc public var heightMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var italic: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var italicMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var localePolicy: DocuSignAPI.DSAPILocalePolicyTab?
  @objc public var mergeField: DocuSignAPI.DSAPIMergeField?
  @objc public var mergeFieldXml: Swift.String?
  @objc public var name: Swift.String?
  @objc public var nameMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var pageNumber: Swift.String?
  @objc public var pageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var recipientId: Swift.String?
  @objc public var recipientIdGuid: Swift.String?
  @objc public var recipientIdGuidMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var recipientIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var smartContractInformation: DocuSignAPI.DSAPISmartContractInformation?
  @objc public var source: Swift.String?
  @objc public var status: Swift.String?
  @objc public var statusMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabGroupLabels: [Swift.String]?
  @objc public var tabGroupLabelsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabId: Swift.String?
  @objc public var tabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabLabel: Swift.String?
  @objc public var tabLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabOrder: Swift.String?
  @objc public var tabOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabType: Swift.String?
  @objc public var tabTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var templateLocked: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var templateLockedMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var templateRequired: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var templateRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tooltip: Swift.String?
  @objc public var toolTipMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var underline: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var underlineMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var value: Swift.String?
  @objc public var valueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var width: Swift.String?
  @objc public var widthMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var xPosition: Swift.String?
  @objc public var xPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var yPosition: Swift.String?
  @objc public var yPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc override dynamic public init()
  public init(anchorAllowWhiteSpaceInCharacters: Swift.Bool = false, anchorAllowWhiteSpaceInCharactersMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorCaseSensitive: Swift.Bool = false, anchorCaseSensitiveMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorHorizontalAlignment: Swift.String? = nil, anchorHorizontalAlignmentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorIgnoreIfNotPresent: Swift.Bool = false, anchorIgnoreIfNotPresentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorMatchWholeWord: Swift.Bool = false, anchorMatchWholeWordMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorString: Swift.String? = nil, anchorStringMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorTabProcessorVersion: Swift.String? = nil, anchorTabProcessorVersionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorUnits: Swift.String? = nil, anchorUnitsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorXOffset: Swift.String? = nil, anchorXOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorYOffset: Swift.String? = nil, anchorYOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, bold: Swift.Bool = false, boldMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, conditionalParentLabel: Swift.String? = nil, conditionalParentLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, conditionalParentValue: Swift.String? = nil, conditionalParentValueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, customTabId: Swift.String? = nil, customTabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, documentId: Swift.String? = nil, documentIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, font: Swift.String? = nil, fontColor: Swift.String? = nil, fontColorMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, fontMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, fontSize: Swift.String? = nil, fontSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formOrder: Swift.String? = nil, formOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formPageLabel: Swift.String? = nil, formPageLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formPageNumber: Swift.String? = nil, formPageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, height: Swift.String? = nil, heightMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, italic: Swift.Bool = false, italicMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, localePolicy: DocuSignAPI.DSAPILocalePolicyTab? = nil, mergeField: DocuSignAPI.DSAPIMergeField? = nil, mergeFieldXml: Swift.String? = nil, name: Swift.String? = nil, nameMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, pageNumber: Swift.String? = nil, pageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, recipientId: Swift.String? = nil, recipientIdGuid: Swift.String? = nil, recipientIdGuidMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, recipientIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, smartContractInformation: DocuSignAPI.DSAPISmartContractInformation? = nil, source: Swift.String? = nil, status: Swift.String? = nil, statusMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabGroupLabels: [Swift.String]? = nil, tabGroupLabelsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabId: Swift.String? = nil, tabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabLabel: Swift.String? = nil, tabLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabOrder: Swift.String? = nil, tabOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabType: Swift.String? = nil, tabTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, templateLocked: Swift.Bool = false, templateLockedMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, templateRequired: Swift.Bool = false, templateRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tooltip: Swift.String? = nil, toolTipMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, underline: Swift.Bool = false, underlineMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, value: Swift.String? = nil, valueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, width: Swift.String? = nil, widthMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, xPosition: Swift.String? = nil, xPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, yPosition: Swift.String? = nil, yPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIContactModRequest : Swift.Codable {
  public var contactList: [DocuSignAPI.DSAPIContact]?
  public init(contactList: [DocuSignAPI.DSAPIContact]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @objcMembers public class DSAPIMergeField : ObjectiveC.NSObject, Swift.Codable {
  @objc @DocuSignAPI.BoolFromString public var allowSenderToEdit: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowSenderToEditMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var configurationType: Swift.String?
  @objc public var configurationTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var path: Swift.String?
  @objc public var pathExtended: [DocuSignAPI.DSAPIPathExtendedElement]?
  @objc public var pathExtendedMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var pathMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var row: Swift.String?
  @objc public var rowMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var writeBack: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var writeBackMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc override dynamic public init()
  @objc public init(allowSenderToEdit: Swift.Bool = false, allowSenderToEditMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, configurationType: Swift.String? = nil, configurationTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, path: Swift.String? = nil, pathExtended: [DocuSignAPI.DSAPIPathExtendedElement]? = nil, pathExtendedMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, pathMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, row: Swift.String? = nil, rowMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, writeBack: Swift.Bool = false, writeBackMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIBulkSendingCopyCustomField : Swift.Codable {
  public var name: Swift.String?
  public var value: Swift.String?
  public init(name: Swift.String? = nil, value: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIBillingInvoicesSummary : Swift.Codable {
  public var billingInvoices: [DocuSignAPI.DSAPIBillingInvoice]?
  public var pastDueBalance: Swift.String?
  public var paymentAllowed: Swift.String?
  public init(billingInvoices: [DocuSignAPI.DSAPIBillingInvoice]? = nil, pastDueBalance: Swift.String? = nil, paymentAllowed: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @objcMembers public class DSAPIUserSettingsInformation : ObjectiveC.NSObject, Swift.Codable {
  @objc public var accountManagementGranular: DocuSignAPI.DSAPIUserAccountManagementGranularInformation?
  @objc public var adminOnly: Swift.String?
  @objc public var adminOnlyMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var allowAutoTagging: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc @DocuSignAPI.BoolFromString public var allowEnvelopeTransferTo: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowEnvelopeTransferToMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var allowEsealRecipients: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowEsealRecipientsMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var allowPowerFormsAdminToAccessAllPowerFormEnvelope: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowPowerFormsAdminToAccessAllPowerFormEnvelopeMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var allowRecipientLanguageSelection: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowRecipientLanguageSelectionMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var allowSendOnBehalfOf: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowSendOnBehalfOfMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var allowSupplementalDocuments: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var allowSupplementalDocumentsMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc public var anchorTagVersionedPlacementEnabled: Swift.String?
  @objc @DocuSignAPI.BoolFromString public var apiAccountWideAccess: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var apiAccountWideAccessMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var apiCanExportAC: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var apiCanExportACMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var bulkSend: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var bulkSendMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc public var canChargeAccount: Swift.String?
  @objc public var canChargeAccountMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc public var canEditSharedAddressbook: Swift.String?
  @objc public var canEditSharedAddressbookMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var canLockEnvelopes: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var canLockEnvelopesMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var canManageAccount: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var canManageAccountMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc public var canManageDistributor: Swift.String?
  @objc public var canManageDistributorMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var canManageTemplates: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var canManageTemplatesMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var canSendAPIRequests: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var canSendAPIRequestsMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var canSendEnvelope: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var canSendEnvelopeMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc public var canSendEnvelopesViaSMS: Swift.String?
  @objc public var canSendEnvelopesViaSMSMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var canSignEnvelope: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var canSignEnvelopeMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var canUseScratchpad: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var canUseScratchpadMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc public var canUseSmartContracts: Swift.String?
  @objc public var canUseSmartContractsMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var disableDocumentUpload: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var disableDocumentUploadMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var disableOtherActions: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var disableOtherActionsMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc public var enableDSPro: Swift.String?
  @objc public var enableDSProMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var enableSequentialSigningAPI: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var enableSequentialSigningAPIMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var enableSequentialSigningUI: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var enableSequentialSigningUIMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var enableSignerAttachments: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var enableSignerAttachmentsMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var enableSignOnPaperOverride: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var enableSignOnPaperOverrideMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc public var enableTransactionPoint: Swift.String?
  @objc public var enableTransactionPointMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var enableVaulting: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var enableVaultingMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc public var expressSendOnly: Swift.String?
  @objc public var locale: Swift.String?
  @objc public var localeMetadata: DocuSignAPI.DSAPISettingsMetadata?
  public var localePolicy: DocuSignAPI.DSAPILocalePolicy?
  @objc @DocuSignAPI.BoolFromString public var manageClickwrapsMode: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var manageClickwrapsModeMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc public var modifiedBy: Swift.String?
  @objc public var modifiedByMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc public var modifiedDate: Foundation.Date?
  @objc public var modifiedDateMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc public var modifiedPage: Swift.String?
  @objc public var modifiedPageMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc public var newSendUI: Swift.String?
  @objc public var newSendUIMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc public var powerFormMode: Swift.String?
  @objc public var powerFormModeMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var recipientViewedNotification: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var recipientViewedNotificationMetadata: DocuSignAPI.DSAPISettingsMetadata?
  public var sealIdentifiers: [DocuSignAPI.DSAPISealIdentifier]?
  @objc public var selfSignedRecipientEmailDocument: Swift.String?
  @objc public var selfSignedRecipientEmailDocumentMetadata: DocuSignAPI.DSAPISettingsMetadata?
  public var senderEmailNotifications: DocuSignAPI.DSAPISenderEmailNotifications?
  public var signerEmailNotifications: DocuSignAPI.DSAPISignerEmailNotifications?
  @objc @DocuSignAPI.BoolFromString public var supplementalDocumentIncludeInDownload: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc @DocuSignAPI.BoolFromString public var supplementalDocumentsMustAccept: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var supplementalDocumentsMustAcceptMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var supplementalDocumentsMustRead: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var supplementalDocumentsMustReadMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var supplementalDocumentsMustView: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var supplementalDocumentsMustViewMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var templateActiveCreation: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var templateActiveCreationMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var templateApplyNotify: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var templateApplyNotifyMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var templateAutoMatching: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var templateAutoMatchingMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc public var templateMatchingSensitivity: Swift.String?
  @objc public var templateMatchingSensitivityMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc @DocuSignAPI.BoolFromString public var templatePageLevelMatching: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var templatePageLevelMatchingMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc public var timezoneDST: Swift.String?
  @objc public var timezoneDSTMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc public var timezoneMask: Swift.String?
  @objc public var timezoneMaskMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc public var timezoneOffset: Swift.String?
  @objc public var timezoneOffsetMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc public var timezoneSendingPref: Swift.String?
  @objc public var timezoneSendingPrefMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc public var timezoneSigningPref: Swift.String?
  @objc public var timezoneSigningPrefMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc public var transactionPointSiteNameURL: Swift.String?
  @objc public var transactionPointSiteNameURLMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc public var transactionPointUserName: Swift.String?
  @objc public var transactionPointUserNameMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @objc public var vaultingMode: Swift.String?
  @objc public var vaultingModeMetadata: DocuSignAPI.DSAPISettingsMetadata?
  public init(accountManagementGranular: DocuSignAPI.DSAPIUserAccountManagementGranularInformation? = nil, adminOnly: Swift.String? = nil, adminOnlyMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowAutoTagging: Swift.Bool = false, allowEnvelopeTransferTo: Swift.Bool = false, allowEnvelopeTransferToMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowEsealRecipients: Swift.Bool = false, allowEsealRecipientsMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowPowerFormsAdminToAccessAllPowerFormEnvelope: Swift.Bool = false, allowPowerFormsAdminToAccessAllPowerFormEnvelopeMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowRecipientLanguageSelection: Swift.Bool = false, allowRecipientLanguageSelectionMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowSendOnBehalfOf: Swift.Bool = false, allowSendOnBehalfOfMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, allowSupplementalDocuments: Swift.Bool = false, allowSupplementalDocumentsMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, anchorTagVersionedPlacementEnabled: Swift.String? = nil, apiAccountWideAccess: Swift.Bool = false, apiAccountWideAccessMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, apiCanExportAC: Swift.Bool = false, apiCanExportACMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, bulkSend: Swift.Bool = false, bulkSendMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, canChargeAccount: Swift.String? = nil, canChargeAccountMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, canEditSharedAddressbook: Swift.String? = nil, canEditSharedAddressbookMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, canLockEnvelopes: Swift.Bool = false, canLockEnvelopesMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, canManageAccount: Swift.Bool = false, canManageAccountMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, canManageDistributor: Swift.String? = nil, canManageDistributorMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, canManageTemplates: Swift.Bool = false, canManageTemplatesMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, canSendAPIRequests: Swift.Bool = false, canSendAPIRequestsMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, canSendEnvelope: Swift.Bool = false, canSendEnvelopeMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, canSendEnvelopesViaSMS: Swift.String? = nil, canSendEnvelopesViaSMSMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, canSignEnvelope: Swift.Bool = false, canSignEnvelopeMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, canUseScratchpad: Swift.Bool = false, canUseScratchpadMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, canUseSmartContracts: Swift.String? = nil, canUseSmartContractsMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, disableDocumentUpload: Swift.Bool = false, disableDocumentUploadMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, disableOtherActions: Swift.Bool = false, disableOtherActionsMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, enableDSPro: Swift.String? = nil, enableDSProMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, enableSequentialSigningAPI: Swift.Bool = false, enableSequentialSigningAPIMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, enableSequentialSigningUI: Swift.Bool = false, enableSequentialSigningUIMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, enableSignerAttachments: Swift.Bool = false, enableSignerAttachmentsMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, enableSignOnPaperOverride: Swift.Bool = false, enableSignOnPaperOverrideMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, enableTransactionPoint: Swift.String? = nil, enableTransactionPointMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, enableVaulting: Swift.Bool = false, enableVaultingMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, expressSendOnly: Swift.String? = nil, locale: Swift.String? = nil, localeMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, localePolicy: DocuSignAPI.DSAPILocalePolicy? = nil, manageClickwrapsMode: Swift.Bool = false, manageClickwrapsModeMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, modifiedBy: Swift.String? = nil, modifiedByMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, modifiedDate: Foundation.Date? = nil, modifiedDateMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, modifiedPage: Swift.String? = nil, modifiedPageMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, newSendUI: Swift.String? = nil, newSendUIMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, powerFormMode: Swift.String? = nil, powerFormModeMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, recipientViewedNotification: Swift.Bool = false, recipientViewedNotificationMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, sealIdentifiers: [DocuSignAPI.DSAPISealIdentifier]? = nil, selfSignedRecipientEmailDocument: Swift.String? = nil, selfSignedRecipientEmailDocumentMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, senderEmailNotifications: DocuSignAPI.DSAPISenderEmailNotifications? = nil, signerEmailNotifications: DocuSignAPI.DSAPISignerEmailNotifications? = nil, supplementalDocumentIncludeInDownload: Swift.Bool = false, supplementalDocumentsMustAccept: Swift.Bool = false, supplementalDocumentsMustAcceptMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, supplementalDocumentsMustRead: Swift.Bool = false, supplementalDocumentsMustReadMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, supplementalDocumentsMustView: Swift.Bool = false, supplementalDocumentsMustViewMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, templateActiveCreation: Swift.Bool = false, templateActiveCreationMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, templateApplyNotify: Swift.Bool = false, templateApplyNotifyMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, templateAutoMatching: Swift.Bool = false, templateAutoMatchingMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, templateMatchingSensitivity: Swift.String? = nil, templateMatchingSensitivityMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, templatePageLevelMatching: Swift.Bool = false, templatePageLevelMatchingMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, timezoneDST: Swift.String? = nil, timezoneDSTMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, timezoneMask: Swift.String? = nil, timezoneMaskMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, timezoneOffset: Swift.String? = nil, timezoneOffsetMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, timezoneSendingPref: Swift.String? = nil, timezoneSendingPrefMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, timezoneSigningPref: Swift.String? = nil, timezoneSigningPrefMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, transactionPointSiteNameURL: Swift.String? = nil, transactionPointSiteNameURLMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, transactionPointUserName: Swift.String? = nil, transactionPointUserNameMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, vaultingMode: Swift.String? = nil, vaultingModeMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @objcMembers public class DSAPITabGroup : ObjectiveC.NSObject, Swift.Codable {
  @objc @DocuSignAPI.BoolFromString public var anchorAllowWhiteSpaceInCharacters: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorAllowWhiteSpaceInCharactersMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var anchorCaseSensitive: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorCaseSensitiveMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorHorizontalAlignment: Swift.String?
  @objc public var anchorHorizontalAlignmentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var anchorIgnoreIfNotPresent: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorIgnoreIfNotPresentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var anchorMatchWholeWord: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorMatchWholeWordMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorString: Swift.String?
  @objc public var anchorStringMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorTabProcessorVersion: Swift.String?
  @objc public var anchorTabProcessorVersionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorUnits: Swift.String?
  @objc public var anchorUnitsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorXOffset: Swift.String?
  @objc public var anchorXOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorYOffset: Swift.String?
  @objc public var anchorYOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var conditionalParentLabel: Swift.String?
  @objc public var conditionalParentLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var conditionalParentValue: Swift.String?
  @objc public var conditionalParentValueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var customTabId: Swift.String?
  @objc public var customTabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var documentId: Swift.String?
  @objc public var documentIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  @objc public var formOrder: Swift.String?
  @objc public var formOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var formPageLabel: Swift.String?
  @objc public var formPageLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var formPageNumber: Swift.String?
  @objc public var formPageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var groupLabel: Swift.String?
  @objc public var groupLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var groupRule: Swift.String?
  @objc public var groupRuleMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var height: Swift.String?
  @objc public var heightMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var maximumAllowed: Swift.String?
  @objc public var maximumAllowedMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var mergeField: DocuSignAPI.DSAPIMergeField?
  @objc public var mergeFieldXml: Swift.String?
  @objc public var minimumRequired: Swift.String?
  @objc public var minimumRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var pageNumber: Swift.String?
  @objc public var pageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var recipientId: Swift.String?
  @objc public var recipientIdGuid: Swift.String?
  @objc public var recipientIdGuidMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var recipientIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var smartContractInformation: DocuSignAPI.DSAPISmartContractInformation?
  @objc public var source: Swift.String?
  @objc public var status: Swift.String?
  @objc public var statusMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabGroupLabels: [Swift.String]?
  @objc public var tabGroupLabelsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabId: Swift.String?
  @objc public var tabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabOrder: Swift.String?
  @objc public var tabOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabScope: Swift.String?
  @objc public var tabScopeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabType: Swift.String?
  @objc public var tabTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var templateLocked: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var templateLockedMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var templateRequired: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var templateRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tooltip: Swift.String?
  @objc public var toolTipMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var validationMessage: Swift.String?
  @objc public var validationMessageMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var width: Swift.String?
  @objc public var widthMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var xPosition: Swift.String?
  @objc public var xPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var yPosition: Swift.String?
  @objc public var yPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public init(anchorAllowWhiteSpaceInCharacters: Swift.Bool = false, anchorAllowWhiteSpaceInCharactersMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorCaseSensitive: Swift.Bool = false, anchorCaseSensitiveMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorHorizontalAlignment: Swift.String? = nil, anchorHorizontalAlignmentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorIgnoreIfNotPresent: Swift.Bool = false, anchorIgnoreIfNotPresentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorMatchWholeWord: Swift.Bool = false, anchorMatchWholeWordMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorString: Swift.String? = nil, anchorStringMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorTabProcessorVersion: Swift.String? = nil, anchorTabProcessorVersionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorUnits: Swift.String? = nil, anchorUnitsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorXOffset: Swift.String? = nil, anchorXOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorYOffset: Swift.String? = nil, anchorYOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, conditionalParentLabel: Swift.String? = nil, conditionalParentLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, conditionalParentValue: Swift.String? = nil, conditionalParentValueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, customTabId: Swift.String? = nil, customTabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, documentId: Swift.String? = nil, documentIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, formOrder: Swift.String? = nil, formOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formPageLabel: Swift.String? = nil, formPageLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formPageNumber: Swift.String? = nil, formPageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, groupLabel: Swift.String? = nil, groupLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, groupRule: Swift.String? = nil, groupRuleMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, height: Swift.String? = nil, heightMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, maximumAllowed: Swift.String? = nil, maximumAllowedMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, mergeField: DocuSignAPI.DSAPIMergeField? = nil, mergeFieldXml: Swift.String? = nil, minimumRequired: Swift.String? = nil, minimumRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, pageNumber: Swift.String? = nil, pageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, recipientId: Swift.String? = nil, recipientIdGuid: Swift.String? = nil, recipientIdGuidMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, recipientIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, smartContractInformation: DocuSignAPI.DSAPISmartContractInformation? = nil, source: Swift.String? = nil, status: Swift.String? = nil, statusMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabGroupLabels: [Swift.String]? = nil, tabGroupLabelsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabId: Swift.String? = nil, tabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabOrder: Swift.String? = nil, tabOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabScope: Swift.String? = nil, tabScopeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabType: Swift.String? = nil, tabTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, templateLocked: Swift.Bool = false, templateLockedMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, templateRequired: Swift.Bool = false, templateRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tooltip: Swift.String? = nil, toolTipMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, validationMessage: Swift.String? = nil, validationMessageMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, width: Swift.String? = nil, widthMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, xPosition: Swift.String? = nil, xPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, yPosition: Swift.String? = nil, yPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIEnvelopeDelayRuleApiModel : Swift.Codable {
  public var delay: Swift.String?
  public var resumeDate: Foundation.Date?
  public init(delay: Swift.String? = nil, resumeDate: Foundation.Date? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIWorkspace : Swift.Codable {
  public var billableAccountId: Swift.String?
  public var callerInformation: DocuSignAPI.DSAPIWorkspaceUser?
  public var created: Swift.String?
  public var createdByInformation: DocuSignAPI.DSAPIWorkspaceUser?
  public var lastModified: Swift.String?
  public var lastModifiedByInformation: DocuSignAPI.DSAPIWorkspaceUser?
  public var settings: DocuSignAPI.DSAPIWorkspaceSettings?
  public var status: Swift.String?
  public var workspaceBaseUrl: Foundation.URL?
  public var workspaceDescription: Swift.String?
  public var workspaceId: Swift.String?
  public var workspaceName: Swift.String?
  public var workspaceUri: Foundation.URL?
  public init(billableAccountId: Swift.String? = nil, callerInformation: DocuSignAPI.DSAPIWorkspaceUser? = nil, created: Swift.String? = nil, createdByInformation: DocuSignAPI.DSAPIWorkspaceUser? = nil, lastModified: Swift.String? = nil, lastModifiedByInformation: DocuSignAPI.DSAPIWorkspaceUser? = nil, settings: DocuSignAPI.DSAPIWorkspaceSettings? = nil, status: Swift.String? = nil, workspaceBaseUrl: Foundation.URL? = nil, workspaceDescription: Swift.String? = nil, workspaceId: Swift.String? = nil, workspaceName: Swift.String? = nil, workspaceUri: Foundation.URL? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIBillingPlanUpdateResponse : Swift.Codable {
  public var accountPaymentMethod: Swift.String?
  public var billingPlanPreview: DocuSignAPI.DSAPIBillingPlanPreview?
  public var currencyCode: Swift.String?
  public var includedSeats: Swift.String?
  public var paymentCycle: Swift.String?
  public var paymentMethod: Swift.String?
  public var planId: Swift.String?
  public var planName: Swift.String?
  public init(accountPaymentMethod: Swift.String? = nil, billingPlanPreview: DocuSignAPI.DSAPIBillingPlanPreview? = nil, currencyCode: Swift.String? = nil, includedSeats: Swift.String? = nil, paymentCycle: Swift.String? = nil, paymentMethod: Swift.String? = nil, planId: Swift.String? = nil, planName: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIAccountIdentityVerificationStep : Swift.Codable {
  public var name: Swift.String?
  public var type: Swift.String?
  public init(name: Swift.String? = nil, type: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIPowerForm : Swift.Codable {
  public var createdBy: Swift.String?
  public var createdDateTime: Foundation.Date?
  public var emailBody: Swift.String?
  public var emailSubject: Swift.String?
  public var envelopes: [DocuSignAPI.DSAPIEnvelope]?
  public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  public var instructions: Swift.String?
  @DocuSignAPI.BoolFromString public var isActive: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var lastUsed: Swift.String?
  public var limitUseInterval: Swift.String?
  @DocuSignAPI.BoolFromString public var limitUseIntervalEnabled: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var limitUseIntervalUnits: Swift.String?
  @DocuSignAPI.BoolFromString public var maxUseEnabled: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var name: Swift.String?
  public var powerFormId: Swift.String?
  public var powerFormUrl: Foundation.URL?
  public var recipients: [DocuSignAPI.DSAPIPowerFormRecipient]?
  public var senderName: Swift.String?
  public var senderUserId: Swift.String?
  public var signingMode: Swift.String?
  public var templateId: Swift.String?
  public var templateName: Swift.String?
  public var timesUsed: Swift.String?
  public var uri: Foundation.URL?
  public var usesRemaining: Swift.String?
  public init(createdBy: Swift.String? = nil, createdDateTime: Foundation.Date? = nil, emailBody: Swift.String? = nil, emailSubject: Swift.String? = nil, envelopes: [DocuSignAPI.DSAPIEnvelope]? = nil, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, instructions: Swift.String? = nil, isActive: Swift.Bool = false, lastUsed: Swift.String? = nil, limitUseInterval: Swift.String? = nil, limitUseIntervalEnabled: Swift.Bool = false, limitUseIntervalUnits: Swift.String? = nil, maxUseEnabled: Swift.Bool = false, name: Swift.String? = nil, powerFormId: Swift.String? = nil, powerFormUrl: Foundation.URL? = nil, recipients: [DocuSignAPI.DSAPIPowerFormRecipient]? = nil, senderName: Swift.String? = nil, senderUserId: Swift.String? = nil, signingMode: Swift.String? = nil, templateId: Swift.String? = nil, templateName: Swift.String? = nil, timesUsed: Swift.String? = nil, uri: Foundation.URL? = nil, usesRemaining: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIBillingPrice : Swift.Codable {
  public var beginQuantity: Swift.String?
  public var endQuantity: Swift.String?
  public var unitPrice: Swift.String?
  public init(beginQuantity: Swift.String? = nil, endQuantity: Swift.String? = nil, unitPrice: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIAuthenticationStatus : Swift.Codable {
  public var accessCodeResult: DocuSignAPI.DSAPIEventResult?
  public var ageVerifyResult: DocuSignAPI.DSAPIEventResult?
  public var anySocialIDResult: DocuSignAPI.DSAPIEventResult?
  public var facebookResult: DocuSignAPI.DSAPIEventResult?
  public var googleResult: DocuSignAPI.DSAPIEventResult?
  public var identityVerificationResult: DocuSignAPI.DSAPIEventResult?
  public var idLookupResult: DocuSignAPI.DSAPIEventResult?
  public var idQuestionsResult: DocuSignAPI.DSAPIEventResult?
  public var linkedinResult: DocuSignAPI.DSAPIEventResult?
  public var liveIDResult: DocuSignAPI.DSAPIEventResult?
  public var ofacResult: DocuSignAPI.DSAPIEventResult?
  public var openIDResult: DocuSignAPI.DSAPIEventResult?
  public var phoneAuthResult: DocuSignAPI.DSAPIEventResult?
  public var salesforceResult: DocuSignAPI.DSAPIEventResult?
  public var signatureProviderResult: DocuSignAPI.DSAPIEventResult?
  public var smsAuthResult: DocuSignAPI.DSAPIEventResult?
  public var sTANPinResult: DocuSignAPI.DSAPIEventResult?
  public var twitterResult: DocuSignAPI.DSAPIEventResult?
  public var yahooResult: DocuSignAPI.DSAPIEventResult?
  public init(accessCodeResult: DocuSignAPI.DSAPIEventResult? = nil, ageVerifyResult: DocuSignAPI.DSAPIEventResult? = nil, anySocialIDResult: DocuSignAPI.DSAPIEventResult? = nil, facebookResult: DocuSignAPI.DSAPIEventResult? = nil, googleResult: DocuSignAPI.DSAPIEventResult? = nil, identityVerificationResult: DocuSignAPI.DSAPIEventResult? = nil, idLookupResult: DocuSignAPI.DSAPIEventResult? = nil, idQuestionsResult: DocuSignAPI.DSAPIEventResult? = nil, linkedinResult: DocuSignAPI.DSAPIEventResult? = nil, liveIDResult: DocuSignAPI.DSAPIEventResult? = nil, ofacResult: DocuSignAPI.DSAPIEventResult? = nil, openIDResult: DocuSignAPI.DSAPIEventResult? = nil, phoneAuthResult: DocuSignAPI.DSAPIEventResult? = nil, salesforceResult: DocuSignAPI.DSAPIEventResult? = nil, signatureProviderResult: DocuSignAPI.DSAPIEventResult? = nil, smsAuthResult: DocuSignAPI.DSAPIEventResult? = nil, sTANPinResult: DocuSignAPI.DSAPIEventResult? = nil, twitterResult: DocuSignAPI.DSAPIEventResult? = nil, yahooResult: DocuSignAPI.DSAPIEventResult? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPITemplateDocumentsResult : Swift.Codable {
  public var templateDocuments: [DocuSignAPI.DSAPIEnvelopeDocument]?
  public var templateId: Swift.String?
  public init(templateDocuments: [DocuSignAPI.DSAPIEnvelopeDocument]? = nil, templateId: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIPowerFormsResponse : Swift.Codable {
  public var endPosition: Swift.Int?
  public var nextUri: Foundation.URL?
  public var powerForms: [DocuSignAPI.DSAPIPowerForm]?
  public var previousUri: Foundation.URL?
  public var resultSetSize: Swift.Int?
  public var startPosition: Swift.Int?
  public var totalSetSize: Swift.Int?
  public init(endPosition: Swift.Int? = nil, nextUri: Foundation.URL? = nil, powerForms: [DocuSignAPI.DSAPIPowerForm]? = nil, previousUri: Foundation.URL? = nil, resultSetSize: Swift.Int? = nil, startPosition: Swift.Int? = nil, totalSetSize: Swift.Int? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class ServiceConfig : Swift.CustomStringConvertible {
  public var cachePolicy: Foundation.URLRequest.CachePolicy
  public var timeout: Swift.Double
  convenience public init?(base urlString: Swift.String, needsAuthorization: Swift.Bool = true, headers: [Swift.String : Swift.String] = [:], name: Swift.String? = nil, user: DocuSignAPI.DSAPIUserInfo? = nil)
  public init?(url: Foundation.URL, needsAuthorization: Swift.Bool = true, headers: [Swift.String : Swift.String] = [:], name: Swift.String? = nil, user: DocuSignAPI.DSAPIUserInfo? = nil)
  public var description: Swift.String {
    get
  }
  @objc deinit
}
public struct DSAPIEnvelopeEvent : Swift.Codable {
  public var envelopeEventStatusCode: Swift.String?
  @DocuSignAPI.BoolFromString public var includeDocuments: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public init(envelopeEventStatusCode: Swift.String? = nil, includeDocuments: Swift.Bool = false)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIBillingPlanInformation : Swift.Codable {
  public var appStoreReceipt: DocuSignAPI.DSAPIAppStoreReceipt?
  public var billingAddress: DocuSignAPI.DSAPIAccountAddress?
  public var creditCardInformation: DocuSignAPI.DSAPICreditCardInformation?
  public var directDebitProcessorInformation: DocuSignAPI.DSAPIDirectDebitProcessorInformation?
  public var downgradeReason: Swift.String?
  @DocuSignAPI.BoolFromString public var enableSupport: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var includedSeats: Swift.String?
  public var incrementalSeats: Swift.String?
  public var paymentMethod: Swift.String?
  public var paymentProcessorInformation: DocuSignAPI.DSAPIPaymentProcessorInformation?
  public var planInformation: DocuSignAPI.DSAPIPlanInformation?
  public var referralInformation: DocuSignAPI.DSAPIReferralInformation?
  public var renewalStatus: Swift.String?
  public var saleDiscountAmount: Swift.String?
  public var saleDiscountFixedAmount: Swift.String?
  public var saleDiscountPercent: Swift.String?
  public var saleDiscountPeriods: Swift.String?
  public var saleDiscountSeatPriceOverride: Swift.String?
  public var taxExemptId: Swift.String?
  public init(appStoreReceipt: DocuSignAPI.DSAPIAppStoreReceipt? = nil, billingAddress: DocuSignAPI.DSAPIAccountAddress? = nil, creditCardInformation: DocuSignAPI.DSAPICreditCardInformation? = nil, directDebitProcessorInformation: DocuSignAPI.DSAPIDirectDebitProcessorInformation? = nil, downgradeReason: Swift.String? = nil, enableSupport: Swift.Bool = false, includedSeats: Swift.String? = nil, incrementalSeats: Swift.String? = nil, paymentMethod: Swift.String? = nil, paymentProcessorInformation: DocuSignAPI.DSAPIPaymentProcessorInformation? = nil, planInformation: DocuSignAPI.DSAPIPlanInformation? = nil, referralInformation: DocuSignAPI.DSAPIReferralInformation? = nil, renewalStatus: Swift.String? = nil, saleDiscountAmount: Swift.String? = nil, saleDiscountFixedAmount: Swift.String? = nil, saleDiscountPercent: Swift.String? = nil, saleDiscountPeriods: Swift.String? = nil, saleDiscountSeatPriceOverride: Swift.String? = nil, taxExemptId: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIBulkProcessResponse : Swift.Codable {
  public var batchId: Swift.String?
  public var batchName: Swift.String?
  public var batchSize: Swift.String?
  public var errorDetails: [Swift.String]?
  public var errors: [Swift.String]?
  public var queueLimit: Swift.String?
  public var totalQueued: Swift.String?
  public init(batchId: Swift.String? = nil, batchName: Swift.String? = nil, batchSize: Swift.String? = nil, errorDetails: [Swift.String]? = nil, errors: [Swift.String]? = nil, queueLimit: Swift.String? = nil, totalQueued: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @objcMembers public class DSAPISettingsMetadata : ObjectiveC.NSObject, Swift.Codable {
  @objc @DocuSignAPI.BoolFromString public var is21CFRPart11: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var options: [Swift.String]?
  @objc public var rights: Swift.String?
  @objc public var uiHint: Swift.String?
  @objc public var uiOrder: Swift.String?
  @objc public var uiType: Swift.String?
  @objc public init(is21CFRPart11: Swift.Bool = false, options: [Swift.String]? = nil, rights: Swift.String? = nil, uiHint: Swift.String? = nil, uiOrder: Swift.String? = nil, uiType: Swift.String? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIConditionalRecipientRuleCondition : Swift.Codable {
  public var filters: [DocuSignAPI.DSAPIConditionalRecipientRuleFilter]?
  public var order: Swift.String?
  public var recipientLabel: Swift.String?
  public init(filters: [DocuSignAPI.DSAPIConditionalRecipientRuleFilter]? = nil, order: Swift.String? = nil, recipientLabel: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPITemplateMatch : Swift.Codable {
  public var documentEndPage: Swift.String?
  public var documentStartPage: Swift.String?
  public var matchPercentage: Swift.String?
  public init(documentEndPage: Swift.String? = nil, documentStartPage: Swift.String? = nil, matchPercentage: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIPowerFormRecipient : Swift.Codable {
  public var accessCode: Swift.String?
  @DocuSignAPI.BoolFromString public var accessCodeLocked: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  @DocuSignAPI.BoolFromString public var accessCodeRequired: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var email: Swift.String?
  @DocuSignAPI.BoolFromString public var emailLocked: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var idCheckConfigurationName: Swift.String?
  public var idCheckRequired: Swift.String?
  public var name: Swift.String?
  public var recipientType: Swift.String?
  public var roleName: Swift.String?
  public var routingOrder: Swift.String?
  @DocuSignAPI.BoolFromString public var templateRequiresIdLookup: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  @DocuSignAPI.BoolFromString public var userNameLocked: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public init(accessCode: Swift.String? = nil, accessCodeLocked: Swift.Bool = false, accessCodeRequired: Swift.Bool = false, email: Swift.String? = nil, emailLocked: Swift.Bool = false, idCheckConfigurationName: Swift.String? = nil, idCheckRequired: Swift.String? = nil, name: Swift.String? = nil, recipientType: Swift.String? = nil, roleName: Swift.String? = nil, routingOrder: Swift.String? = nil, templateRequiresIdLookup: Swift.Bool = false, userNameLocked: Swift.Bool = false)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPITabMetadata : Swift.Codable {
  public var anchor: Swift.String?
  @DocuSignAPI.BoolFromString public var anchorCaseSensitive: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var anchorHorizontalAlignment: Swift.String?
  @DocuSignAPI.BoolFromString public var anchorIgnoreIfNotPresent: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  @DocuSignAPI.BoolFromString public var anchorMatchWholeWord: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var anchorUnits: Swift.String?
  public var anchorXOffset: Swift.String?
  public var anchorYOffset: Swift.String?
  @DocuSignAPI.BoolFromString public var bold: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var collaborative: Swift.String?
  @DocuSignAPI.BoolFromString public var concealValueOnDocument: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var createdByDisplayName: Swift.String?
  public var createdByUserId: Swift.String?
  public var customTabId: Swift.String?
  @DocuSignAPI.BoolFromString public var disableAutoSize: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  @DocuSignAPI.BoolFromString public var editable: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var font: Swift.String?
  public var fontColor: Swift.String?
  public var fontSize: Swift.String?
  public var height: Swift.String?
  @DocuSignAPI.BoolFromString public var includedInEmail: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var initialValue: Swift.String?
  @DocuSignAPI.BoolFromString public var italic: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var items: [Swift.String]?
  public var lastModified: Swift.String?
  public var lastModifiedByDisplayName: Swift.String?
  public var lastModifiedByUserId: Swift.String?
  public var localePolicy: DocuSignAPI.DSAPILocalePolicyTab?
  @DocuSignAPI.BoolFromString public var locked: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var maximumLength: Swift.String?
  public var maxNumericalValue: Swift.String?
  public var mergeField: DocuSignAPI.DSAPIMergeField?
  public var minNumericalValue: Swift.String?
  public var name: Swift.String?
  public var numericalValue: Swift.String?
  public var paymentItemCode: Swift.String?
  public var paymentItemDescription: Swift.String?
  public var paymentItemName: Swift.String?
  public var requireAll: Swift.String?
  @DocuSignAPI.BoolFromString public var required: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  @DocuSignAPI.BoolFromString public var requireInitialOnSharedChange: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var scaleValue: Swift.String?
  @DocuSignAPI.BoolFromString public var selected: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  @DocuSignAPI.BoolFromString public var shared: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var stampType: Swift.String?
  public var stampTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var tabLabel: Swift.String?
  public var type: Swift.String?
  @DocuSignAPI.BoolFromString public var underline: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var validationMessage: Swift.String?
  public var validationPattern: Swift.String?
  public var width: Swift.String?
  public init(anchor: Swift.String? = nil, anchorCaseSensitive: Swift.Bool = false, anchorHorizontalAlignment: Swift.String? = nil, anchorIgnoreIfNotPresent: Swift.Bool = false, anchorMatchWholeWord: Swift.Bool = false, anchorUnits: Swift.String? = nil, anchorXOffset: Swift.String? = nil, anchorYOffset: Swift.String? = nil, bold: Swift.Bool = false, collaborative: Swift.String? = nil, concealValueOnDocument: Swift.Bool = false, createdByDisplayName: Swift.String? = nil, createdByUserId: Swift.String? = nil, customTabId: Swift.String? = nil, disableAutoSize: Swift.Bool = false, editable: Swift.Bool = false, font: Swift.String? = nil, fontColor: Swift.String? = nil, fontSize: Swift.String? = nil, height: Swift.String? = nil, includedInEmail: Swift.Bool = false, initialValue: Swift.String? = nil, italic: Swift.Bool = false, items: [Swift.String]? = nil, lastModified: Swift.String? = nil, lastModifiedByDisplayName: Swift.String? = nil, lastModifiedByUserId: Swift.String? = nil, localePolicy: DocuSignAPI.DSAPILocalePolicyTab? = nil, locked: Swift.Bool = false, maximumLength: Swift.String? = nil, maxNumericalValue: Swift.String? = nil, mergeField: DocuSignAPI.DSAPIMergeField? = nil, minNumericalValue: Swift.String? = nil, name: Swift.String? = nil, numericalValue: Swift.String? = nil, paymentItemCode: Swift.String? = nil, paymentItemDescription: Swift.String? = nil, paymentItemName: Swift.String? = nil, requireAll: Swift.String? = nil, _required: Swift.String? = nil, requireInitialOnSharedChange: Swift.Bool = false, scaleValue: Swift.String? = nil, selected: Swift.Bool = false, shared: Swift.Bool = false, stampType: Swift.String? = nil, stampTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabLabel: Swift.String? = nil, type: Swift.String? = nil, underline: Swift.Bool = false, validationMessage: Swift.String? = nil, validationPattern: Swift.String? = nil, width: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIUsersResponse : Swift.Codable {
  public var endPosition: Swift.String?
  public var nextUri: Foundation.URL?
  public var previousUri: Foundation.URL?
  public var resultSetSize: Swift.String?
  public var startPosition: Swift.String?
  public var totalSetSize: Swift.String?
  public var users: [DocuSignAPI.DSAPIUserInfo]?
  public init(endPosition: Swift.String? = nil, nextUri: Foundation.URL? = nil, previousUri: Foundation.URL? = nil, resultSetSize: Swift.String? = nil, startPosition: Swift.String? = nil, totalSetSize: Swift.String? = nil, users: [DocuSignAPI.DSAPIUserInfo]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPILoginAccount : Swift.Codable {
  public var accountId: Swift.String?
  public var accountIdGuid: Swift.String?
  public var baseUrl: Foundation.URL?
  public var email: Swift.String?
  public var isDefault: Swift.String?
  public var loginAccountSettings: [DocuSignAPI.DSAPINameValue]?
  public var loginUserSettings: [DocuSignAPI.DSAPINameValue]?
  public var name: Swift.String?
  public var siteDescription: Swift.String?
  public var userId: Swift.String?
  public var userName: Swift.String?
  public init(accountId: Swift.String? = nil, accountIdGuid: Swift.String? = nil, baseUrl: Foundation.URL? = nil, email: Swift.String? = nil, isDefault: Swift.String? = nil, loginAccountSettings: [DocuSignAPI.DSAPINameValue]? = nil, loginUserSettings: [DocuSignAPI.DSAPINameValue]? = nil, name: Swift.String? = nil, siteDescription: Swift.String? = nil, userId: Swift.String? = nil, userName: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPINotaryJournalCredibleWitness : Swift.Codable {
  public var address: Swift.String?
  public var name: Swift.String?
  public var signatureImage: Swift.String?
  public init(address: Swift.String? = nil, name: Swift.String? = nil, signatureImage: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIServerTemplate : Swift.Codable {
  public var sequence: Swift.String?
  public var templateId: Swift.String?
  public init(sequence: Swift.String? = nil, templateId: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIBulkSendingListSummaries : Swift.Codable {
  public var bulkListSummaries: [DocuSignAPI.DSAPIBulkSendingListSummary]?
  public init(bulkListSummaries: [DocuSignAPI.DSAPIBulkSendingListSummary]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIAccountSharedAccess : Swift.Codable {
  public var accountId: Swift.String?
  public var endPosition: Swift.String?
  public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  public var nextUri: Foundation.URL?
  public var previousUri: Foundation.URL?
  public var resultSetSize: Swift.String?
  public var sharedAccess: [DocuSignAPI.DSAPIMemberSharedItems]?
  public var startPosition: Swift.String?
  public var totalSetSize: Swift.String?
  public init(accountId: Swift.String? = nil, endPosition: Swift.String? = nil, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, nextUri: Foundation.URL? = nil, previousUri: Foundation.URL? = nil, resultSetSize: Swift.String? = nil, sharedAccess: [DocuSignAPI.DSAPIMemberSharedItems]? = nil, startPosition: Swift.String? = nil, totalSetSize: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIGraphicsContext : Swift.Codable {
  public var fillColor: Swift.String?
  public var lineColor: Swift.String?
  public var lineWeight: Swift.String?
  public init(fillColor: Swift.String? = nil, lineColor: Swift.String? = nil, lineWeight: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @objcMembers public class DSAPILockInformation : ObjectiveC.NSObject, Swift.Codable {
  @objc public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  @objc public var lockDurationInSeconds: Swift.String?
  @objc public var lockedByApp: Swift.String?
  @objc public var lockedByUser: DocuSignAPI.DSAPIUserInfo?
  @objc public var lockedUntilDateTime: Foundation.Date?
  @objc public var lockToken: Swift.String?
  @objc public var lockType: Swift.String?
  @objc @DocuSignAPI.BoolFromString public var useScratchPad: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public init(errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, lockDurationInSeconds: Swift.String? = nil, lockedByApp: Swift.String? = nil, lockedByUser: DocuSignAPI.DSAPIUserInfo? = nil, lockedUntilDateTime: Foundation.Date? = nil, lockToken: Swift.String? = nil, lockType: Swift.String? = nil, useScratchPad: Swift.Bool = false)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIDirectDebitProcessorInformation : Swift.Codable {
  public var bankBranchCode: Swift.String?
  public var bankCheckDigit: Swift.String?
  public var bankCode: Swift.String?
  public var bankName: Swift.String?
  public var bankTransferAccountName: Swift.String?
  public var bankTransferAccountNumber: Swift.String?
  public var bankTransferType: Swift.String?
  public var country: Swift.String?
  public var email: Swift.String?
  public var firstName: Swift.String?
  public var iBAN: Swift.String?
  public var lastName: Swift.String?
  public init(bankBranchCode: Swift.String? = nil, bankCheckDigit: Swift.String? = nil, bankCode: Swift.String? = nil, bankName: Swift.String? = nil, bankTransferAccountName: Swift.String? = nil, bankTransferAccountNumber: Swift.String? = nil, bankTransferType: Swift.String? = nil, country: Swift.String? = nil, email: Swift.String? = nil, firstName: Swift.String? = nil, iBAN: Swift.String? = nil, lastName: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPINewAccountSummary : Swift.Codable {
  public var accountId: Swift.String?
  public var accountIdGuid: Swift.String?
  public var accountName: Swift.String?
  public var apiPassword: Swift.String?
  public var baseUrl: Foundation.URL?
  public var billingPlanPreview: DocuSignAPI.DSAPIBillingPlanPreview?
  public var userId: Swift.String?
  public init(accountId: Swift.String? = nil, accountIdGuid: Swift.String? = nil, accountName: Swift.String? = nil, apiPassword: Swift.String? = nil, baseUrl: Foundation.URL? = nil, billingPlanPreview: DocuSignAPI.DSAPIBillingPlanPreview? = nil, userId: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @objcMembers public class DSAPIRecipientUpdateResponse : ObjectiveC.NSObject, Swift.Codable {
  @objc public var combined: Swift.String?
  @objc public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  @objc public var recipientId: Swift.String?
  @objc public var recipientIdGuid: Swift.String?
  @objc public var tabs: DocuSignAPI.DSAPITabs?
  @objc public init(combined: Swift.String? = nil, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, recipientId: Swift.String? = nil, recipientIdGuid: Swift.String? = nil, tabs: DocuSignAPI.DSAPITabs? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @objcMembers public class DSAPIEnvelopeTemplate : ObjectiveC.NSObject, Swift.Codable {
  @objc public var accessControlListBase64: Swift.String?
  @objc @DocuSignAPI.BoolFromString public var allowComments: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc @DocuSignAPI.BoolFromString public var allowMarkup: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc @DocuSignAPI.BoolFromString public var allowReassign: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc @DocuSignAPI.BoolFromString public var allowViewHistory: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anySigner: Swift.String?
  @objc @DocuSignAPI.BoolFromString public var asynchronous: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var attachmentsUri: Foundation.URL?
  @objc @DocuSignAPI.BoolFromString public var authoritativeCopy: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var authoritativeCopyDefault: Swift.String?
  @objc @DocuSignAPI.BoolFromString public var autoMatch: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc @DocuSignAPI.BoolFromString public var autoMatchSpecifiedByUser: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc @DocuSignAPI.BoolFromString public var autoNavigation: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var brandId: Swift.String?
  @objc @DocuSignAPI.BoolFromString public var brandLock: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var certificateUri: Foundation.URL?
  @objc public var completedDateTime: Foundation.Date?
  @objc public var copyRecipientData: Swift.String?
  @objc public var created: Swift.String?
  @objc public var createdDateTime: Foundation.Date?
  @objc public var customFields: DocuSignAPI.DSAPICustomFields?
  @objc public var customFieldsUri: Foundation.URL?
  @objc public var declinedDateTime: Foundation.Date?
  @objc public var deletedDateTime: Foundation.Date?
  @objc public var deliveredDateTime: Foundation.Date?
  @objc public var templatedescription: Swift.String?
  @objc @DocuSignAPI.BoolFromString public var disableResponsiveDocument: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var documentBase64: Swift.String?
  @objc public var documents: [DocuSignAPI.DSAPIDocument]?
  @objc public var documentsCombinedUri: Foundation.URL?
  @objc public var documentsUri: Foundation.URL?
  @objc public var emailBlurb: Swift.String?
  @objc public var emailSettings: DocuSignAPI.DSAPIEmailSettings?
  @objc public var emailSubject: Swift.String?
  @objc @DocuSignAPI.BoolFromString public var enableWetSign: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc @DocuSignAPI.BoolFromString public var enforceSignerVisibility: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var envelopeAttachments: [DocuSignAPI.DSAPIAttachment]?
  public var envelopeCustomMetadata: DocuSignAPI.DSAPIEnvelopeCustomMetadata?
  @objc public var envelopeDocuments: [DocuSignAPI.DSAPIEnvelopeDocument]?
  @objc public var envelopeId: Swift.String?
  @objc @DocuSignAPI.BoolFromString public var envelopeIdStamping: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var envelopeLocation: Swift.String?
  public var envelopeMetadata: DocuSignAPI.DSAPIEnvelopeMetadata?
  @objc public var envelopeUri: Foundation.URL?
  @objc public var expireAfter: Swift.String?
  @objc public var expireDateTime: Foundation.Date?
  @objc @DocuSignAPI.BoolFromString public var expireEnabled: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var externalEnvelopeId: Swift.String?
  @objc public var favoritedByMe: Swift.String?
  @objc public var folderId: Swift.String?
  @objc public var folderIds: [Swift.String]?
  @objc public var folderName: Swift.String?
  @objc public var folders: [DocuSignAPI.DSAPIFolder]?
  @objc @DocuSignAPI.BoolFromString public var hasComments: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc @DocuSignAPI.BoolFromString public var hasFormDataChanged: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc @DocuSignAPI.BoolFromString public var hasWavFile: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var holder: Swift.String?
  @objc public var initialSentDateTime: Foundation.Date?
  @objc @DocuSignAPI.BoolFromString public var is21CFRPart11: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc @DocuSignAPI.BoolFromString public var isDynamicEnvelope: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc @DocuSignAPI.BoolFromString public var isSignatureProviderEnvelope: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var lastModified: Foundation.Date?
  @objc public var lastModifiedBy: DocuSignAPI.DSAPIUserInfo?
  @objc public var lastModifiedDateTime: Foundation.Date?
  @objc public var lastUsed: Swift.String?
  @objc public var location: Swift.String?
  @objc public var lockInformation: DocuSignAPI.DSAPILockInformation?
  @objc @DocuSignAPI.BoolFromString public var messageLock: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var name: Swift.String?
  @objc public var newPassword: Swift.String?
  @objc public var notification: DocuSignAPI.DSAPINotification?
  @objc public var notificationUri: Foundation.URL?
  @objc public var owner: DocuSignAPI.DSAPIUserInfo?
  @objc public var pageCount: Swift.String?
  @objc public var password: Swift.String?
  @objc public var passwordProtected: Swift.String?
  public var powerForm: DocuSignAPI.DSAPIPowerForm?
  public var powerForms: [DocuSignAPI.DSAPIPowerForm]?
  @objc public var purgeCompletedDate: Foundation.Date?
  @objc public var purgeRequestDate: Foundation.Date?
  @objc public var purgeState: Swift.String?
  @objc public var recipients: DocuSignAPI.DSAPIRecipients?
  @objc @DocuSignAPI.BoolFromString public var recipientsLock: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var recipientsUri: Foundation.URL?
  @objc public var sender: DocuSignAPI.DSAPIUserInfo?
  @objc public var sentDateTime: Foundation.Date?
  @objc @DocuSignAPI.BoolFromString public var shared: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc @DocuSignAPI.BoolFromString public var signerCanSignOnMobile: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var signingLocation: Swift.String?
  @objc public var status: Swift.String?
  @objc public var statusChangedDateTime: Foundation.Date?
  @objc public var statusDateTime: Foundation.Date?
  @objc public var templateId: Swift.String?
  @objc public var templatesUri: Foundation.URL?
  @objc public var transactionId: Swift.String?
  @objc public var uri: Foundation.URL?
  @objc public var useDisclosure: Swift.String?
  @objc public var voidedDateTime: Foundation.Date?
  @objc public var voidedReason: Swift.String?
  public var workflow: DocuSignAPI.DSAPIWorkflow?
  public init(accessControlListBase64: Swift.String? = nil, allowComments: Swift.Bool = false, allowMarkup: Swift.Bool = false, allowReassign: Swift.Bool = false, allowViewHistory: Swift.Bool = false, anySigner: Swift.String? = nil, asynchronous: Swift.Bool = false, attachmentsUri: Foundation.URL? = nil, authoritativeCopy: Swift.Bool = false, authoritativeCopyDefault: Swift.String? = nil, autoMatch: Swift.Bool = false, autoMatchSpecifiedByUser: Swift.Bool = false, autoNavigation: Swift.Bool = false, brandId: Swift.String? = nil, brandLock: Swift.Bool = false, certificateUri: Foundation.URL? = nil, completedDateTime: Foundation.Date? = nil, copyRecipientData: Swift.String? = nil, created: Swift.String? = nil, createdDateTime: Foundation.Date? = nil, customFields: DocuSignAPI.DSAPICustomFields? = nil, customFieldsUri: Foundation.URL? = nil, declinedDateTime: Foundation.Date? = nil, deletedDateTime: Foundation.Date? = nil, deliveredDateTime: Foundation.Date? = nil, templatedescription: Swift.String? = nil, disableResponsiveDocument: Swift.Bool = false, documentBase64: Swift.String? = nil, documents: [DocuSignAPI.DSAPIDocument]? = nil, documentsCombinedUri: Foundation.URL? = nil, documentsUri: Foundation.URL? = nil, emailBlurb: Swift.String? = nil, emailSettings: DocuSignAPI.DSAPIEmailSettings? = nil, emailSubject: Swift.String? = nil, enableWetSign: Swift.Bool = false, enforceSignerVisibility: Swift.Bool = false, envelopeAttachments: [DocuSignAPI.DSAPIAttachment]? = nil, envelopeCustomMetadata: DocuSignAPI.DSAPIEnvelopeCustomMetadata? = nil, envelopeDocuments: [DocuSignAPI.DSAPIEnvelopeDocument]? = nil, envelopeId: Swift.String? = nil, envelopeIdStamping: Swift.Bool = false, envelopeLocation: Swift.String? = nil, envelopeMetadata: DocuSignAPI.DSAPIEnvelopeMetadata? = nil, envelopeUri: Foundation.URL? = nil, expireAfter: Swift.String? = nil, expireDateTime: Foundation.Date? = nil, expireEnabled: Swift.Bool = false, externalEnvelopeId: Swift.String? = nil, favoritedByMe: Swift.String? = nil, folderId: Swift.String? = nil, folderIds: [Swift.String]? = nil, folderName: Swift.String? = nil, folders: [DocuSignAPI.DSAPIFolder]? = nil, hasComments: Swift.Bool = false, hasFormDataChanged: Swift.Bool = false, hasWavFile: Swift.Bool = false, holder: Swift.String? = nil, initialSentDateTime: Foundation.Date? = nil, is21CFRPart11: Swift.Bool = false, isDynamicEnvelope: Swift.Bool = false, isSignatureProviderEnvelope: Swift.Bool = false, lastModified: Foundation.Date? = nil, lastModifiedBy: DocuSignAPI.DSAPIUserInfo? = nil, lastModifiedDateTime: Foundation.Date? = nil, lastUsed: Swift.String? = nil, location: Swift.String? = nil, lockInformation: DocuSignAPI.DSAPILockInformation? = nil, messageLock: Swift.Bool = false, name: Swift.String? = nil, newPassword: Swift.String? = nil, notification: DocuSignAPI.DSAPINotification? = nil, notificationUri: Foundation.URL? = nil, owner: DocuSignAPI.DSAPIUserInfo? = nil, pageCount: Swift.String? = nil, password: Swift.String? = nil, passwordProtected: Swift.String? = nil, powerForm: DocuSignAPI.DSAPIPowerForm? = nil, powerForms: [DocuSignAPI.DSAPIPowerForm]? = nil, purgeCompletedDate: Foundation.Date? = nil, purgeRequestDate: Foundation.Date? = nil, purgeState: Swift.String? = nil, recipients: DocuSignAPI.DSAPIRecipients? = nil, recipientsLock: Swift.Bool = false, recipientsUri: Foundation.URL? = nil, sender: DocuSignAPI.DSAPIUserInfo? = nil, sentDateTime: Foundation.Date? = nil, shared: Swift.Bool = false, signerCanSignOnMobile: Swift.Bool = false, signingLocation: Swift.String? = nil, status: Swift.String? = nil, statusChangedDateTime: Foundation.Date? = nil, statusDateTime: Foundation.Date? = nil, templateId: Swift.String? = nil, templatesUri: Foundation.URL? = nil, transactionId: Swift.String? = nil, uri: Foundation.URL? = nil, useDisclosure: Swift.String? = nil, voidedDateTime: Foundation.Date? = nil, voidedReason: Swift.String? = nil, workflow: DocuSignAPI.DSAPIWorkflow? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIGroup : Swift.Codable {
  public var dsGroupId: Swift.String?
  public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  public var groupId: Swift.String?
  public var groupName: Swift.String?
  public var groupType: Swift.String?
  public var permissionProfileId: Swift.String?
  public var users: [DocuSignAPI.DSAPIUserInfo]?
  public var usersCount: Swift.String?
  public init(dsGroupId: Swift.String? = nil, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, groupId: Swift.String? = nil, groupName: Swift.String? = nil, groupType: Swift.String? = nil, permissionProfileId: Swift.String? = nil, users: [DocuSignAPI.DSAPIUserInfo]? = nil, usersCount: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIConnectFailureFilter : Swift.Codable {
  public var envelopeIds: [Swift.String]?
  public var synchronous: Swift.String?
  public init(envelopeIds: [Swift.String]? = nil, synchronous: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIBulkProcessResult : Swift.Codable {
  public var errors: [DocuSignAPI.DSAPIBulkSendBatchError]?
  public var listId: Swift.String?
  public var success: Swift.String?
  public init(errors: [DocuSignAPI.DSAPIBulkSendBatchError]? = nil, listId: Swift.String? = nil, success: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIFilter : Swift.Codable {
  @DocuSignAPI.BoolFromString public var actionRequired: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var expires: Swift.String?
  public var folderIds: Swift.String?
  public var fromDateTime: Foundation.Date?
  @DocuSignAPI.BoolFromString public var isTemplate: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var order: Swift.String?
  public var orderBy: Swift.String?
  public var searchTarget: Swift.String?
  public var searchText: Swift.String?
  public var status: Swift.String?
  public var toDateTime: Foundation.Date?
  public init(actionRequired: Swift.Bool = false, expires: Swift.String? = nil, folderIds: Swift.String? = nil, fromDateTime: Foundation.Date? = nil, isTemplate: Swift.Bool = false, order: Swift.String? = nil, orderBy: Swift.String? = nil, searchTarget: Swift.String? = nil, searchText: Swift.String? = nil, status: Swift.String? = nil, toDateTime: Foundation.Date? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIBulkSendingListSummary : Swift.Codable {
  public var bulkSendListId: Swift.String?
  public var createdByUser: Swift.String?
  public var createdDate: Foundation.Date?
  public var name: Swift.String?
  public init(bulkSendListId: Swift.String? = nil, createdByUser: Swift.String? = nil, createdDate: Foundation.Date? = nil, name: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIBulkSendTestResponse : Swift.Codable {
  public var canBeSent: Swift.Bool
  public var validationErrorDetails: [Swift.String]?
  public var validationErrors: [Swift.String]?
  public init(canBeSent: Swift.Bool = false, validationErrorDetails: [Swift.String]? = nil, validationErrors: [Swift.String]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIAccountPasswordQuestionsRequired : Swift.Codable {
  public var maximumQuestions: Swift.String?
  public var minimumQuestions: Swift.String?
  public init(maximumQuestions: Swift.String? = nil, minimumQuestions: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @objcMembers public class DSAPIZip : ObjectiveC.NSObject, Swift.Codable {
  @objc @DocuSignAPI.BoolFromString public var anchorAllowWhiteSpaceInCharacters: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorAllowWhiteSpaceInCharactersMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var anchorCaseSensitive: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorCaseSensitiveMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorHorizontalAlignment: Swift.String?
  @objc public var anchorHorizontalAlignmentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var anchorIgnoreIfNotPresent: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorIgnoreIfNotPresentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var anchorMatchWholeWord: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorMatchWholeWordMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorString: Swift.String?
  @objc public var anchorStringMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorTabProcessorVersion: Swift.String?
  @objc public var anchorTabProcessorVersionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorUnits: Swift.String?
  @objc public var anchorUnitsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorXOffset: Swift.String?
  @objc public var anchorXOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorYOffset: Swift.String?
  @objc public var anchorYOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var bold: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var boldMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var concealValueOnDocument: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var concealValueOnDocumentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var conditionalParentLabel: Swift.String?
  @objc public var conditionalParentLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var conditionalParentValue: Swift.String?
  @objc public var conditionalParentValueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var customTabId: Swift.String?
  @objc public var customTabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var disableAutoSize: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var disableAutoSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var documentId: Swift.String?
  @objc public var documentIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  @objc public var font: Swift.String?
  @objc public var fontColor: Swift.String?
  @objc public var fontColorMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var fontMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var fontSize: Swift.String?
  @objc public var fontSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var formOrder: Swift.String?
  @objc public var formOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var formPageLabel: Swift.String?
  @objc public var formPageLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var formPageNumber: Swift.String?
  @objc public var formPageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var height: Swift.String?
  @objc public var heightMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var italic: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var italicMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var localePolicy: DocuSignAPI.DSAPILocalePolicyTab?
  @objc @DocuSignAPI.BoolFromString public var locked: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var lockedMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var maxLength: Swift.String?
  @objc public var maxLengthMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var mergeField: DocuSignAPI.DSAPIMergeField?
  @objc public var mergeFieldXml: Swift.String?
  @objc public var name: Swift.String?
  @objc public var nameMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var originalValue: Swift.String?
  @objc public var originalValueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var pageNumber: Swift.String?
  @objc public var pageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var recipientId: Swift.String?
  @objc public var recipientIdGuid: Swift.String?
  @objc public var recipientIdGuidMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var recipientIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var requireAll: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var requireAllMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var required: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var requiredMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var requireInitialOnSharedChange: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var requireInitialOnSharedChangeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var senderRequired: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var senderRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var shared: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var sharedMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var shareToRecipients: Swift.String?
  @objc public var shareToRecipientsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var smartContractInformation: DocuSignAPI.DSAPISmartContractInformation?
  @objc public var source: Swift.String?
  @objc public var status: Swift.String?
  @objc public var statusMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabGroupLabels: [Swift.String]?
  @objc public var tabGroupLabelsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabId: Swift.String?
  @objc public var tabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabLabel: Swift.String?
  @objc public var tabLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabOrder: Swift.String?
  @objc public var tabOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabType: Swift.String?
  @objc public var tabTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var templateLocked: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var templateLockedMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var templateRequired: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var templateRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tooltip: Swift.String?
  @objc public var toolTipMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var underline: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var underlineMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var useDash4: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var useDash4Metadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var validationMessage: Swift.String?
  @objc public var validationMessageMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var validationPattern: Swift.String?
  @objc public var validationPatternMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var value: Swift.String?
  @objc public var valueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var width: Swift.String?
  @objc public var widthMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var xPosition: Swift.String?
  @objc public var xPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var yPosition: Swift.String?
  @objc public var yPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public init(anchorAllowWhiteSpaceInCharacters: Swift.Bool = false, anchorAllowWhiteSpaceInCharactersMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorCaseSensitive: Swift.Bool = false, anchorCaseSensitiveMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorHorizontalAlignment: Swift.String? = nil, anchorHorizontalAlignmentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorIgnoreIfNotPresent: Swift.Bool = false, anchorIgnoreIfNotPresentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorMatchWholeWord: Swift.Bool = false, anchorMatchWholeWordMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorString: Swift.String? = nil, anchorStringMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorTabProcessorVersion: Swift.String? = nil, anchorTabProcessorVersionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorUnits: Swift.String? = nil, anchorUnitsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorXOffset: Swift.String? = nil, anchorXOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorYOffset: Swift.String? = nil, anchorYOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, bold: Swift.Bool = false, boldMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, concealValueOnDocument: Swift.Bool = false, concealValueOnDocumentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, conditionalParentLabel: Swift.String? = nil, conditionalParentLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, conditionalParentValue: Swift.String? = nil, conditionalParentValueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, customTabId: Swift.String? = nil, customTabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, disableAutoSize: Swift.Bool = false, disableAutoSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, documentId: Swift.String? = nil, documentIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, font: Swift.String? = nil, fontColor: Swift.String? = nil, fontColorMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, fontMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, fontSize: Swift.String? = nil, fontSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formOrder: Swift.String? = nil, formOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formPageLabel: Swift.String? = nil, formPageLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formPageNumber: Swift.String? = nil, formPageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, height: Swift.String? = nil, heightMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, italic: Swift.Bool = false, italicMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, localePolicy: DocuSignAPI.DSAPILocalePolicyTab? = nil, locked: Swift.Bool = false, lockedMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, maxLength: Swift.String? = nil, maxLengthMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, mergeField: DocuSignAPI.DSAPIMergeField? = nil, mergeFieldXml: Swift.String? = nil, name: Swift.String? = nil, nameMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, originalValue: Swift.String? = nil, originalValueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, pageNumber: Swift.String? = nil, pageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, recipientId: Swift.String? = nil, recipientIdGuid: Swift.String? = nil, recipientIdGuidMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, recipientIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, requireAll: Swift.Bool = false, requireAllMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, required: Swift.Bool = false, requiredMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, requireInitialOnSharedChange: Swift.Bool = false, requireInitialOnSharedChangeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, senderRequired: Swift.Bool = false, senderRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, shared: Swift.Bool = false, sharedMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, shareToRecipients: Swift.String? = nil, shareToRecipientsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, smartContractInformation: DocuSignAPI.DSAPISmartContractInformation? = nil, source: Swift.String? = nil, status: Swift.String? = nil, statusMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabGroupLabels: [Swift.String]? = nil, tabGroupLabelsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabId: Swift.String? = nil, tabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabLabel: Swift.String? = nil, tabLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabOrder: Swift.String? = nil, tabOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabType: Swift.String? = nil, tabTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, templateLocked: Swift.Bool = false, templateLockedMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, templateRequired: Swift.Bool = false, templateRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tooltip: Swift.String? = nil, toolTipMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, underline: Swift.Bool = false, underlineMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, useDash4: Swift.Bool = false, useDash4Metadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, validationMessage: Swift.String? = nil, validationMessageMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, validationPattern: Swift.String? = nil, validationPatternMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, value: Swift.String? = nil, valueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, width: Swift.String? = nil, widthMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, xPosition: Swift.String? = nil, xPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, yPosition: Swift.String? = nil, yPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIIntegratedUserInfoList : Swift.Codable {
  public var allUsersSelected: Swift.String?
  public var endPosition: Swift.String?
  public var nextUri: Foundation.URL?
  public var previousUri: Foundation.URL?
  public var resultSetSize: Swift.String?
  public var startPosition: Swift.String?
  public var totalSetSize: Swift.String?
  public var users: [DocuSignAPI.DSAPIUserInfo]?
  public init(allUsersSelected: Swift.String? = nil, endPosition: Swift.String? = nil, nextUri: Foundation.URL? = nil, previousUri: Foundation.URL? = nil, resultSetSize: Swift.String? = nil, startPosition: Swift.String? = nil, totalSetSize: Swift.String? = nil, users: [DocuSignAPI.DSAPIUserInfo]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPILoginInformation : Swift.Codable {
  public var apiPassword: Swift.String?
  public var loginAccounts: [DocuSignAPI.DSAPILoginAccount]?
  public init(apiPassword: Swift.String? = nil, loginAccounts: [DocuSignAPI.DSAPILoginAccount]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIFeatureAvailableMetadata : Swift.Codable {
  public var availabilty: Swift.String?
  public var featureName: Swift.String?
  public init(availabilty: Swift.String? = nil, featureName: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIWorkspaceUser : Swift.Codable {
  public var accountId: Swift.String?
  public var accountName: Swift.String?
  public var activeSince: Swift.String?
  public var created: Swift.String?
  public var createdById: Swift.String?
  public var email: Swift.String?
  public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  public var invitationEmailBlurb: Swift.String?
  public var invitationEmailSubject: Swift.String?
  public var lastModified: Swift.String?
  public var lastModifiedById: Swift.String?
  public var status: Swift.String?
  public var type: Swift.String?
  public var userId: Swift.String?
  public var userName: Swift.String?
  public var workspaceId: Swift.String?
  public var workspaceUserBaseUrl: Foundation.URL?
  public var workspaceUserId: Swift.String?
  public var workspaceUserUri: Foundation.URL?
  public init(accountId: Swift.String? = nil, accountName: Swift.String? = nil, activeSince: Swift.String? = nil, created: Swift.String? = nil, createdById: Swift.String? = nil, email: Swift.String? = nil, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, invitationEmailBlurb: Swift.String? = nil, invitationEmailSubject: Swift.String? = nil, lastModified: Swift.String? = nil, lastModifiedById: Swift.String? = nil, status: Swift.String? = nil, type: Swift.String? = nil, userId: Swift.String? = nil, userName: Swift.String? = nil, workspaceId: Swift.String? = nil, workspaceUserBaseUrl: Foundation.URL? = nil, workspaceUserId: Swift.String? = nil, workspaceUserUri: Foundation.URL? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension Swift.Dictionary where Key == Swift.String, Value == Swift.Optional<Any> {
  public func urlEncodedString(base: Swift.String? = nil) throws -> Swift.String
}
extension Swift.String {
  public func fill(withValues dict: [Swift.String : Any?]?) -> Swift.String
  public func stringByAdding(urlEncodedFields fields: DocuSignAPI.ParametersDict?) throws -> Swift.String
}
public struct DSAPIAppStoreReceipt : Swift.Codable {
  public var downgradeProductId: Swift.String?
  @DocuSignAPI.BoolFromString public var isDowngradeCancellation: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var productId: Swift.String?
  public var receiptData: Swift.String?
  public init(downgradeProductId: Swift.String? = nil, isDowngradeCancellation: Swift.Bool = false, productId: Swift.String? = nil, receiptData: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIPaymentGatewayAccount : Swift.Codable {
  public var allowCustomMetadata: Swift.Bool
  public var config: DocuSignAPI.DSAPIPaymentGatewayAccountSetting?
  public var displayName: Swift.String?
  @DocuSignAPI.BoolFromString public var isEnabled: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var isLegacy: Swift.String?
  public var lastModified: Swift.String?
  public var paymentGateway: Swift.String?
  public var paymentGatewayAccountId: Swift.String?
  public var paymentGatewayDisplayName: Swift.String?
  public var payPalLegacySettings: DocuSignAPI.DSAPIPayPalLegacySettings?
  public var supportedCurrencies: [Swift.String]?
  public var supportedPaymentMethods: [Swift.String]?
  public var supportedPaymentMethodsWithOptions: [DocuSignAPI.DSAPIPaymentMethodWithOptions]?
  public var zeroDecimalCurrencies: [Swift.String]?
  public init(allowCustomMetadata: Swift.Bool = false, config: DocuSignAPI.DSAPIPaymentGatewayAccountSetting? = nil, displayName: Swift.String? = nil, isEnabled: Swift.Bool = false, isLegacy: Swift.String? = nil, lastModified: Swift.String? = nil, paymentGateway: Swift.String? = nil, paymentGatewayAccountId: Swift.String? = nil, paymentGatewayDisplayName: Swift.String? = nil, payPalLegacySettings: DocuSignAPI.DSAPIPayPalLegacySettings? = nil, supportedCurrencies: [Swift.String]? = nil, supportedPaymentMethods: [Swift.String]? = nil, supportedPaymentMethodsWithOptions: [DocuSignAPI.DSAPIPaymentMethodWithOptions]? = nil, zeroDecimalCurrencies: [Swift.String]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension DocuSignAPI.EnvelopesAPI {
  @objc dynamic open class func recipientsPutRecipientsOffline(accountId: Swift.String, envelopeId: Swift.String, body: DocuSignAPI.DSAPIRecipients? = nil, multiParts: Swift.Dictionary<Swift.String, [Any]>?, combineSameOrderRecipients: Swift.String? = nil, offlineSigning: Swift.String? = nil, resendEnvelope: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIRecipientsUpdateSummary?, _ error: Swift.Error?) -> Swift.Void))
  open class func recipientsPutRecipientsOfflineWithRequestBuilder(accountId: Swift.String, envelopeId: Swift.String, body: DocuSignAPI.DSAPIRecipients? = nil, multiParts: Swift.Dictionary<Swift.String, [Any]>?, combineSameOrderRecipients: Swift.String? = nil, offlineSigning: Swift.String? = nil, resendEnvelope: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIRecipientsUpdateSummary>
  @objc dynamic open class func envelopesPostEnvelopesOffline(accountId: Swift.String, body: DocuSignAPI.DSAPIEnvelopeDefinition? = nil, multiParts: Swift.Dictionary<Swift.String, [Any]>?, cdseMode: Swift.String? = nil, changeRoutingOrder: Swift.String? = nil, completedDocumentsOnly: Swift.String? = nil, mergeRolesOnDraft: Swift.String? = nil, tabLabelExactMatches: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIEnvelopeSummary?, _ error: Swift.Error?) -> Swift.Void))
  open class func envelopesPostEnvelopesOfflineWithRequestBuilder(accountId: Swift.String, body: DocuSignAPI.DSAPIEnvelopeDefinition? = nil, multiParts: Swift.Dictionary<Swift.String, [Any]>?, cdseMode: Swift.String? = nil, changeRoutingOrder: Swift.String? = nil, completedDocumentsOnly: Swift.String? = nil, mergeRolesOnDraft: Swift.String? = nil, tabLabelExactMatches: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIEnvelopeSummary>
}
@objc @_inheritsConvenienceInitializers @objcMembers public class DSAPIRadio : ObjectiveC.NSObject, Swift.Codable {
  @objc @DocuSignAPI.BoolFromString public var anchorAllowWhiteSpaceInCharacters: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorAllowWhiteSpaceInCharactersMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var anchorCaseSensitive: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorCaseSensitiveMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorHorizontalAlignment: Swift.String?
  @objc public var anchorHorizontalAlignmentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var anchorIgnoreIfNotPresent: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorIgnoreIfNotPresentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var anchorMatchWholeWord: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorMatchWholeWordMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorString: Swift.String?
  @objc public var anchorStringMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorTabProcessorVersion: Swift.String?
  @objc public var anchorTabProcessorVersionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorUnits: Swift.String?
  @objc public var anchorUnitsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorXOffset: Swift.String?
  @objc public var anchorXOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorYOffset: Swift.String?
  @objc public var anchorYOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var bold: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var boldMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  @objc public var font: Swift.String?
  @objc public var fontColor: Swift.String?
  @objc public var fontColorMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var fontMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var fontSize: Swift.String?
  @objc public var fontSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var italic: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var italicMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var locked: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var lockedMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var pageNumber: Swift.String?
  @objc public var pageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var required: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var requiredMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var selected: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var selectedMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var status: Swift.String?
  @objc public var statusMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabId: Swift.String?
  @objc public var tabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabOrder: Swift.String?
  @objc public var tabOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var underline: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var underlineMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var value: Swift.String?
  @objc public var valueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var xPosition: Swift.String?
  @objc public var xPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var yPosition: Swift.String?
  @objc public var yPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc override dynamic public init()
  @objc public init(anchorAllowWhiteSpaceInCharacters: Swift.Bool = false, anchorAllowWhiteSpaceInCharactersMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorCaseSensitive: Swift.Bool = false, anchorCaseSensitiveMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorHorizontalAlignment: Swift.String? = nil, anchorHorizontalAlignmentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorIgnoreIfNotPresent: Swift.Bool = false, anchorIgnoreIfNotPresentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorMatchWholeWord: Swift.Bool = false, anchorMatchWholeWordMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorString: Swift.String? = nil, anchorStringMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorTabProcessorVersion: Swift.String? = nil, anchorTabProcessorVersionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorUnits: Swift.String? = nil, anchorUnitsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorXOffset: Swift.String? = nil, anchorXOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorYOffset: Swift.String? = nil, anchorYOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, bold: Swift.Bool = false, boldMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, font: Swift.String? = nil, fontColor: Swift.String? = nil, fontColorMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, fontMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, fontSize: Swift.String? = nil, fontSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, italic: Swift.Bool = false, italicMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, locked: Swift.Bool = false, lockedMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, pageNumber: Swift.String? = nil, pageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, required: Swift.Bool = false, requiredMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, selected: Swift.Bool = false, selectedMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, status: Swift.String? = nil, statusMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabId: Swift.String? = nil, tabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabOrder: Swift.String? = nil, tabOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, underline: Swift.Bool = false, underlineMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, value: Swift.String? = nil, valueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, xPosition: Swift.String? = nil, xPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, yPosition: Swift.String? = nil, yPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIBccEmailArchiveHistory : Swift.Codable {
  public var accountId: Swift.String?
  public var action: Swift.String?
  public var email: Swift.String?
  public var modified: Swift.String?
  public var modifiedBy: DocuSignAPI.DSAPIUserInfo?
  public var status: Swift.String?
  public init(accountId: Swift.String? = nil, action: Swift.String? = nil, email: Swift.String? = nil, modified: Swift.String? = nil, modifiedBy: DocuSignAPI.DSAPIUserInfo? = nil, status: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIBccEmailArchive : Swift.Codable {
  public var accountId: Swift.String?
  public var bccEmailArchiveId: Swift.String?
  public var created: Swift.String?
  public var createdBy: DocuSignAPI.DSAPIUserInfo?
  public var email: Swift.String?
  public var emailNotificationId: Swift.String?
  public var modified: Swift.String?
  public var modifiedBy: DocuSignAPI.DSAPIUserInfo?
  public var status: Swift.String?
  public var uri: Foundation.URL?
  public init(accountId: Swift.String? = nil, bccEmailArchiveId: Swift.String? = nil, created: Swift.String? = nil, createdBy: DocuSignAPI.DSAPIUserInfo? = nil, email: Swift.String? = nil, emailNotificationId: Swift.String? = nil, modified: Swift.String? = nil, modifiedBy: DocuSignAPI.DSAPIUserInfo? = nil, status: Swift.String? = nil, uri: Foundation.URL? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @objcMembers public class DSAPIUserSignature : ObjectiveC.NSObject, Swift.Codable {
  @objc public var adoptedDateTime: Foundation.Date?
  @objc public var createdDateTime: Foundation.Date?
  @objc public var customField: Swift.String?
  @objc public var dateStampProperties: DocuSignAPI.DSAPIDateStampProperties?
  @objc @DocuSignAPI.BoolFromString public var disallowUserResizeStamp: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  @objc public var externalID: Swift.String?
  @objc public var imageBase64: Swift.String?
  @objc public var imageType: Swift.String?
  @objc public var initials150ImageId: Swift.String?
  @objc public var initialsImageUri: Foundation.URL?
  @objc public var isDefault: Swift.String?
  @objc public var lastModifiedDateTime: Foundation.Date?
  @objc public var nrdsId: Swift.String?
  @objc public var nrdsLastName: Swift.String?
  @objc public var nrdsStatus: Swift.String?
  @objc public var phoneticName: Swift.String?
  @objc public var signature150ImageId: Swift.String?
  @objc public var signatureFont: Swift.String?
  @objc public var signatureId: Swift.String?
  @objc public var signatureImageUri: Foundation.URL?
  @objc public var signatureInitials: Swift.String?
  @objc public var signatureName: Swift.String?
  @objc public var signatureRights: Swift.String?
  @objc public var signatureType: Swift.String?
  @objc public var stampFormat: Swift.String?
  @objc public var stampImageUri: Foundation.URL?
  @objc public var stampSizeMM: Swift.String?
  @objc public var stampType: Swift.String?
  @objc public var status: Swift.String?
  @objc public init(adoptedDateTime: Foundation.Date? = nil, createdDateTime: Foundation.Date? = nil, customField: Swift.String? = nil, dateStampProperties: DocuSignAPI.DSAPIDateStampProperties? = nil, disallowUserResizeStamp: Swift.Bool = false, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, externalID: Swift.String? = nil, imageBase64: Swift.String? = nil, imageType: Swift.String? = nil, initials150ImageId: Swift.String? = nil, initialsImageUri: Foundation.URL? = nil, isDefault: Swift.String? = nil, lastModifiedDateTime: Foundation.Date? = nil, nrdsId: Swift.String? = nil, nrdsLastName: Swift.String? = nil, nrdsStatus: Swift.String? = nil, phoneticName: Swift.String? = nil, signature150ImageId: Swift.String? = nil, signatureFont: Swift.String? = nil, signatureId: Swift.String? = nil, signatureImageUri: Foundation.URL? = nil, signatureInitials: Swift.String? = nil, signatureName: Swift.String? = nil, signatureRights: Swift.String? = nil, signatureType: Swift.String? = nil, stampFormat: Swift.String? = nil, stampImageUri: Foundation.URL? = nil, stampSizeMM: Swift.String? = nil, stampType: Swift.String? = nil, status: Swift.String? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIRecipientDomain : Swift.Codable {
  public var active: Swift.String?
  public var domainCode: Swift.String?
  public var domainName: Swift.String?
  public var recipientDomainId: Swift.String?
  public init(active: Swift.String? = nil, domainCode: Swift.String? = nil, domainName: Swift.String? = nil, recipientDomainId: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIWorkspaceUserAuthorization : Swift.Codable {
  @DocuSignAPI.BoolFromString public var canDelete: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  @DocuSignAPI.BoolFromString public var canMove: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  @DocuSignAPI.BoolFromString public var canTransact: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  @DocuSignAPI.BoolFromString public var canView: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var created: Foundation.Date?
  public var createdById: Swift.String?
  public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  public var modified: Foundation.Date?
  public var modifiedById: Swift.String?
  public var workspaceUserId: Swift.String?
  public var workspaceUserInformation: DocuSignAPI.DSAPIWorkspaceUser?
  public init(canDelete: Swift.Bool = false, canMove: Swift.Bool = false, canTransact: Swift.Bool = false, canView: Swift.Bool = false, created: Foundation.Date? = nil, createdById: Swift.String? = nil, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, modified: Foundation.Date? = nil, modifiedById: Swift.String? = nil, workspaceUserId: Swift.String? = nil, workspaceUserInformation: DocuSignAPI.DSAPIWorkspaceUser? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @objcMembers public class DSAPIPathExtendedElement : ObjectiveC.NSObject, Swift.Codable {
  @objc public var name: Swift.String?
  @objc public var type: Swift.String?
  @objc public var typeName: Swift.String?
  @objc public init(name: Swift.String? = nil, type: Swift.String? = nil, typeName: Swift.String? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @objcMembers public class DSAPIFirstName : ObjectiveC.NSObject, Swift.Codable {
  @objc @DocuSignAPI.BoolFromString public var anchorAllowWhiteSpaceInCharacters: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorAllowWhiteSpaceInCharactersMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var anchorCaseSensitive: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorCaseSensitiveMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorHorizontalAlignment: Swift.String?
  @objc public var anchorHorizontalAlignmentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var anchorIgnoreIfNotPresent: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorIgnoreIfNotPresentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var anchorMatchWholeWord: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorMatchWholeWordMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorString: Swift.String?
  @objc public var anchorStringMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorTabProcessorVersion: Swift.String?
  @objc public var anchorTabProcessorVersionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorUnits: Swift.String?
  @objc public var anchorUnitsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorXOffset: Swift.String?
  @objc public var anchorXOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorYOffset: Swift.String?
  @objc public var anchorYOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var bold: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var boldMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var conditionalParentLabel: Swift.String?
  @objc public var conditionalParentLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var conditionalParentValue: Swift.String?
  @objc public var conditionalParentValueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var customTabId: Swift.String?
  @objc public var customTabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var documentId: Swift.String?
  @objc public var documentIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  @objc public var font: Swift.String?
  @objc public var fontColor: Swift.String?
  @objc public var fontColorMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var fontMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var fontSize: Swift.String?
  @objc public var fontSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var formOrder: Swift.String?
  @objc public var formOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var formPageLabel: Swift.String?
  @objc public var formPageLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var formPageNumber: Swift.String?
  @objc public var formPageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var height: Swift.String?
  @objc public var heightMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var italic: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var italicMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var localePolicy: DocuSignAPI.DSAPILocalePolicyTab?
  @objc public var mergeField: DocuSignAPI.DSAPIMergeField?
  @objc public var mergeFieldXml: Swift.String?
  @objc public var name: Swift.String?
  @objc public var nameMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var pageNumber: Swift.String?
  @objc public var pageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var recipientId: Swift.String?
  @objc public var recipientIdGuid: Swift.String?
  @objc public var recipientIdGuidMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var recipientIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var smartContractInformation: DocuSignAPI.DSAPISmartContractInformation?
  @objc public var source: Swift.String?
  @objc public var status: Swift.String?
  @objc public var statusMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabGroupLabels: [Swift.String]?
  @objc public var tabGroupLabelsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabId: Swift.String?
  @objc public var tabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabLabel: Swift.String?
  @objc public var tabLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabOrder: Swift.String?
  @objc public var tabOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabType: Swift.String?
  @objc public var tabTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var templateLocked: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var templateLockedMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var templateRequired: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var templateRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tooltip: Swift.String?
  @objc public var toolTipMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var underline: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var underlineMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var value: Swift.String?
  @objc public var valueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var width: Swift.String?
  @objc public var widthMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var xPosition: Swift.String?
  @objc public var xPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var yPosition: Swift.String?
  @objc public var yPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public init(anchorAllowWhiteSpaceInCharacters: Swift.Bool = false, anchorAllowWhiteSpaceInCharactersMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorCaseSensitive: Swift.Bool = false, anchorCaseSensitiveMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorHorizontalAlignment: Swift.String? = nil, anchorHorizontalAlignmentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorIgnoreIfNotPresent: Swift.Bool = false, anchorIgnoreIfNotPresentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorMatchWholeWord: Swift.Bool = false, anchorMatchWholeWordMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorString: Swift.String? = nil, anchorStringMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorTabProcessorVersion: Swift.String? = nil, anchorTabProcessorVersionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorUnits: Swift.String? = nil, anchorUnitsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorXOffset: Swift.String? = nil, anchorXOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorYOffset: Swift.String? = nil, anchorYOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, bold: Swift.Bool = false, boldMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, conditionalParentLabel: Swift.String? = nil, conditionalParentLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, conditionalParentValue: Swift.String? = nil, conditionalParentValueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, customTabId: Swift.String? = nil, customTabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, documentId: Swift.String? = nil, documentIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, font: Swift.String? = nil, fontColor: Swift.String? = nil, fontColorMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, fontMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, fontSize: Swift.String? = nil, fontSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formOrder: Swift.String? = nil, formOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formPageLabel: Swift.String? = nil, formPageLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formPageNumber: Swift.String? = nil, formPageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, height: Swift.String? = nil, heightMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, italic: Swift.Bool = false, italicMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, localePolicy: DocuSignAPI.DSAPILocalePolicyTab? = nil, mergeField: DocuSignAPI.DSAPIMergeField? = nil, mergeFieldXml: Swift.String? = nil, name: Swift.String? = nil, nameMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, pageNumber: Swift.String? = nil, pageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, recipientId: Swift.String? = nil, recipientIdGuid: Swift.String? = nil, recipientIdGuidMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, recipientIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, smartContractInformation: DocuSignAPI.DSAPISmartContractInformation? = nil, source: Swift.String? = nil, status: Swift.String? = nil, statusMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabGroupLabels: [Swift.String]? = nil, tabGroupLabelsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabId: Swift.String? = nil, tabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabLabel: Swift.String? = nil, tabLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabOrder: Swift.String? = nil, tabOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabType: Swift.String? = nil, tabTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, templateLocked: Swift.Bool = false, templateLockedMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, templateRequired: Swift.Bool = false, templateRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tooltip: Swift.String? = nil, toolTipMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, underline: Swift.Bool = false, underlineMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, value: Swift.String? = nil, valueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, width: Swift.String? = nil, widthMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, xPosition: Swift.String? = nil, xPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, yPosition: Swift.String? = nil, yPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIBulkSendingList : Swift.Codable {
  public var bulkCopies: [DocuSignAPI.DSAPIBulkSendingCopy]?
  public var listId: Swift.String?
  public var name: Swift.String?
  public init(bulkCopies: [DocuSignAPI.DSAPIBulkSendingCopy]? = nil, listId: Swift.String? = nil, name: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPITemplateSharedItem : Swift.Codable {
  public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  public var owner: DocuSignAPI.DSAPIUserInfo?
  public var password: Swift.String?
  public var shared: Swift.String?
  public var sharedGroups: [DocuSignAPI.DSAPIMemberGroupSharedItem]?
  public var sharedUsers: [DocuSignAPI.DSAPIUserSharedItem]?
  public var templateId: Swift.String?
  public var templateName: Swift.String?
  public init(errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, owner: DocuSignAPI.DSAPIUserInfo? = nil, password: Swift.String? = nil, shared: Swift.String? = nil, sharedGroups: [DocuSignAPI.DSAPIMemberGroupSharedItem]? = nil, sharedUsers: [DocuSignAPI.DSAPIUserSharedItem]? = nil, templateId: Swift.String? = nil, templateName: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIDocumentHtmlCollapsibleDisplaySettings : Swift.Codable {
  public var arrowClosed: Swift.String?
  public var arrowColor: Swift.String?
  public var arrowLocation: Swift.String?
  public var arrowOpen: Swift.String?
  public var arrowSize: Swift.String?
  public var arrowStyle: Swift.String?
  public var containerStyle: Swift.String?
  public var labelStyle: Swift.String?
  public var onlyArrowIsClickable: Swift.Bool
  public var outerLabelAndArrowStyle: Swift.String?
  public init(arrowClosed: Swift.String? = nil, arrowColor: Swift.String? = nil, arrowLocation: Swift.String? = nil, arrowOpen: Swift.String? = nil, arrowSize: Swift.String? = nil, arrowStyle: Swift.String? = nil, containerStyle: Swift.String? = nil, labelStyle: Swift.String? = nil, onlyArrowIsClickable: Swift.Bool = false, outerLabelAndArrowStyle: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @objcMembers public class DSAPITemplateRole : ObjectiveC.NSObject, Swift.Codable {
  @objc public var accessCode: Swift.String?
  @objc public var additionalNotifications: [DocuSignAPI.DSAPIRecipientAdditionalNotification]?
  @objc public var clientUserId: Swift.String?
  @objc @DocuSignAPI.BoolFromString public var defaultRecipient: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var email: Swift.String?
  @objc public var emailNotification: DocuSignAPI.DSAPIRecipientEmailNotification?
  @objc public var embeddedRecipientStartURL: Swift.String?
  @objc public var inPersonSignerName: Swift.String?
  @objc public var name: Swift.String?
  public var phoneNumber: DocuSignAPI.DSAPIRecipientPhoneNumber?
  public var recipientSignatureProviders: [DocuSignAPI.DSAPIRecipientSignatureProvider]?
  @objc public var roleName: Swift.String?
  @objc public var routingOrder: Swift.String?
  @objc public var signingGroupId: Swift.String?
  @objc public var tabs: DocuSignAPI.DSAPITabs?
  @objc override dynamic public init()
  public init(accessCode: Swift.String? = nil, additionalNotifications: [DocuSignAPI.DSAPIRecipientAdditionalNotification]? = nil, clientUserId: Swift.String? = nil, defaultRecipient: Swift.Bool = false, email: Swift.String? = nil, emailNotification: DocuSignAPI.DSAPIRecipientEmailNotification? = nil, embeddedRecipientStartURL: Swift.String? = nil, inPersonSignerName: Swift.String? = nil, name: Swift.String? = nil, phoneNumber: DocuSignAPI.DSAPIRecipientPhoneNumber? = nil, recipientSignatureProviders: [DocuSignAPI.DSAPIRecipientSignatureProvider]? = nil, roleName: Swift.String? = nil, routingOrder: Swift.String? = nil, signingGroupId: Swift.String? = nil, tabs: DocuSignAPI.DSAPITabs? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @objcMembers public class DSAPIDate : ObjectiveC.NSObject, Swift.Codable {
  @objc @DocuSignAPI.BoolFromString public var anchorAllowWhiteSpaceInCharacters: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorAllowWhiteSpaceInCharactersMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var anchorCaseSensitive: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorCaseSensitiveMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorHorizontalAlignment: Swift.String?
  @objc public var anchorHorizontalAlignmentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var anchorIgnoreIfNotPresent: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorIgnoreIfNotPresentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var anchorMatchWholeWord: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorMatchWholeWordMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorString: Swift.String?
  @objc public var anchorStringMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorTabProcessorVersion: Swift.String?
  @objc public var anchorTabProcessorVersionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorUnits: Swift.String?
  @objc public var anchorUnitsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorXOffset: Swift.String?
  @objc public var anchorXOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorYOffset: Swift.String?
  @objc public var anchorYOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var bold: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var boldMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var concealValueOnDocument: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var concealValueOnDocumentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var conditionalParentLabel: Swift.String?
  @objc public var conditionalParentLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var conditionalParentValue: Swift.String?
  @objc public var conditionalParentValueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var customTabId: Swift.String?
  @objc public var customTabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var disableAutoSize: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var disableAutoSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var documentId: Swift.String?
  @objc public var documentIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  @objc public var font: Swift.String?
  @objc public var fontColor: Swift.String?
  @objc public var fontColorMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var fontMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var fontSize: Swift.String?
  @objc public var fontSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var formOrder: Swift.String?
  @objc public var formOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var formPageLabel: Swift.String?
  @objc public var formPageLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var formPageNumber: Swift.String?
  @objc public var formPageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var height: Swift.String?
  @objc public var heightMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var italic: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var italicMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var localePolicy: DocuSignAPI.DSAPILocalePolicyTab?
  @objc @DocuSignAPI.BoolFromString public var locked: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var lockedMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var maxLength: Swift.String?
  @objc public var maxLengthMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var mergeField: DocuSignAPI.DSAPIMergeField?
  @objc public var mergeFieldXml: Swift.String?
  @objc public var name: Swift.String?
  @objc public var nameMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var originalValue: Swift.String?
  @objc public var originalValueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var pageNumber: Swift.String?
  @objc public var pageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var recipientId: Swift.String?
  @objc public var recipientIdGuid: Swift.String?
  @objc public var recipientIdGuidMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var recipientIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var requireAll: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var requireAllMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var required: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var requiredMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var requireInitialOnSharedChange: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var requireInitialOnSharedChangeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var senderRequired: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var senderRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var shared: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var sharedMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var shareToRecipients: Swift.String?
  @objc public var shareToRecipientsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var smartContractInformation: DocuSignAPI.DSAPISmartContractInformation?
  @objc public var source: Swift.String?
  @objc public var status: Swift.String?
  @objc public var statusMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabGroupLabels: [Swift.String]?
  @objc public var tabGroupLabelsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabId: Swift.String?
  @objc public var tabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabLabel: Swift.String?
  @objc public var tabLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabOrder: Swift.String?
  @objc public var tabOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabType: Swift.String?
  @objc public var tabTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var templateLocked: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var templateLockedMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var templateRequired: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var templateRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tooltip: Swift.String?
  @objc public var toolTipMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var underline: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var underlineMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var validationMessage: Swift.String?
  @objc public var validationMessageMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var validationPattern: Swift.String?
  @objc public var validationPatternMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var value: Swift.String?
  @objc public var valueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var width: Swift.String?
  @objc public var widthMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var xPosition: Swift.String?
  @objc public var xPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var yPosition: Swift.String?
  @objc public var yPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public init(anchorAllowWhiteSpaceInCharacters: Swift.Bool = false, anchorAllowWhiteSpaceInCharactersMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorCaseSensitive: Swift.Bool = false, anchorCaseSensitiveMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorHorizontalAlignment: Swift.String? = nil, anchorHorizontalAlignmentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorIgnoreIfNotPresent: Swift.Bool = false, anchorIgnoreIfNotPresentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorMatchWholeWord: Swift.Bool = false, anchorMatchWholeWordMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorString: Swift.String? = nil, anchorStringMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorTabProcessorVersion: Swift.String? = nil, anchorTabProcessorVersionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorUnits: Swift.String? = nil, anchorUnitsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorXOffset: Swift.String? = nil, anchorXOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorYOffset: Swift.String? = nil, anchorYOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, bold: Swift.Bool = false, boldMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, concealValueOnDocument: Swift.Bool = false, concealValueOnDocumentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, conditionalParentLabel: Swift.String? = nil, conditionalParentLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, conditionalParentValue: Swift.String? = nil, conditionalParentValueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, customTabId: Swift.String? = nil, customTabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, disableAutoSize: Swift.Bool = false, disableAutoSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, documentId: Swift.String? = nil, documentIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, font: Swift.String? = nil, fontColor: Swift.String? = nil, fontColorMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, fontMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, fontSize: Swift.String? = nil, fontSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formOrder: Swift.String? = nil, formOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formPageLabel: Swift.String? = nil, formPageLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formPageNumber: Swift.String? = nil, formPageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, height: Swift.String? = nil, heightMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, italic: Swift.Bool = false, italicMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, localePolicy: DocuSignAPI.DSAPILocalePolicyTab? = nil, locked: Swift.Bool = false, lockedMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, maxLength: Swift.String? = nil, maxLengthMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, mergeField: DocuSignAPI.DSAPIMergeField? = nil, mergeFieldXml: Swift.String? = nil, name: Swift.String? = nil, nameMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, originalValue: Swift.String? = nil, originalValueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, pageNumber: Swift.String? = nil, pageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, recipientId: Swift.String? = nil, recipientIdGuid: Swift.String? = nil, recipientIdGuidMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, recipientIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, requireAll: Swift.Bool = false, requireAllMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, required: Swift.Bool = false, requiredMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, requireInitialOnSharedChange: Swift.Bool = false, requireInitialOnSharedChangeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, senderRequired: Swift.Bool = false, senderRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, shared: Swift.Bool = false, sharedMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, shareToRecipients: Swift.String? = nil, shareToRecipientsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, smartContractInformation: DocuSignAPI.DSAPISmartContractInformation? = nil, source: Swift.String? = nil, status: Swift.String? = nil, statusMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabGroupLabels: [Swift.String]? = nil, tabGroupLabelsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabId: Swift.String? = nil, tabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabLabel: Swift.String? = nil, tabLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabOrder: Swift.String? = nil, tabOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabType: Swift.String? = nil, tabTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, templateLocked: Swift.Bool = false, templateLockedMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, templateRequired: Swift.Bool = false, templateRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tooltip: Swift.String? = nil, toolTipMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, underline: Swift.Bool = false, underlineMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, validationMessage: Swift.String? = nil, validationMessageMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, validationPattern: Swift.String? = nil, validationPatternMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, value: Swift.String? = nil, valueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, width: Swift.String? = nil, widthMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, xPosition: Swift.String? = nil, xPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, yPosition: Swift.String? = nil, yPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIAccountPasswordStrengthType : Swift.Codable {
  public var options: [DocuSignAPI.DSAPIAccountPasswordStrengthTypeOption]?
  public init(options: [DocuSignAPI.DSAPIAccountPasswordStrengthTypeOption]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIAccessCodeFormat : Swift.Codable {
  @DocuSignAPI.BoolFromString public var formatRequired: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var formatRequiredMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @DocuSignAPI.BoolFromString public var letterRequired: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var letterRequiredMetadata: DocuSignAPI.DSAPISettingsMetadata?
  public var minimumLength: Swift.String?
  public var minimumLengthMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @DocuSignAPI.BoolFromString public var numberRequired: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var numberRequiredMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @DocuSignAPI.BoolFromString public var specialCharacterRequired: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var specialCharacterRequiredMetadata: DocuSignAPI.DSAPISettingsMetadata?
  public init(formatRequired: Swift.Bool = false, formatRequiredMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, letterRequired: Swift.Bool = false, letterRequiredMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, minimumLength: Swift.String? = nil, minimumLengthMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, numberRequired: Swift.Bool = false, numberRequiredMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, specialCharacterRequired: Swift.Bool = false, specialCharacterRequiredMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIContactPhoneNumber : Swift.Codable {
  public var phoneNumber: Swift.String?
  public var phoneType: Swift.String?
  public init(phoneNumber: Swift.String? = nil, phoneType: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIEnvelopeAuditEventResponse : Swift.Codable {
  public var auditEvents: [DocuSignAPI.DSAPIEnvelopeAuditEvent]?
  public init(auditEvents: [DocuSignAPI.DSAPIEnvelopeAuditEvent]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @objcMembers public class DSAPISignHere : ObjectiveC.NSObject, Swift.Codable {
  @objc @DocuSignAPI.BoolFromString public var anchorAllowWhiteSpaceInCharacters: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorAllowWhiteSpaceInCharactersMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var anchorCaseSensitive: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorCaseSensitiveMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorHorizontalAlignment: Swift.String?
  @objc public var anchorHorizontalAlignmentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var anchorIgnoreIfNotPresent: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorIgnoreIfNotPresentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var anchorMatchWholeWord: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorMatchWholeWordMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorString: Swift.String?
  @objc public var anchorStringMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorTabProcessorVersion: Swift.String?
  @objc public var anchorTabProcessorVersionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorUnits: Swift.String?
  @objc public var anchorUnitsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorXOffset: Swift.String?
  @objc public var anchorXOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorYOffset: Swift.String?
  @objc public var anchorYOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var conditionalParentLabel: Swift.String?
  @objc public var conditionalParentLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var conditionalParentValue: Swift.String?
  @objc public var conditionalParentValueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var customTabId: Swift.String?
  @objc public var customTabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var documentId: Swift.String?
  @objc public var documentIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  @objc public var formOrder: Swift.String?
  @objc public var formOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var formPageLabel: Swift.String?
  @objc public var formPageLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var formPageNumber: Swift.String?
  @objc public var formPageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var handDrawRequired: Swift.String?
  @objc public var height: Swift.String?
  @objc public var heightMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var isSealSignTab: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var mergeField: DocuSignAPI.DSAPIMergeField?
  @objc public var mergeFieldXml: Swift.String?
  @objc public var name: Swift.String?
  @objc public var nameMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var optional: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var optionalMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var pageNumber: Swift.String?
  @objc public var pageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var recipientId: Swift.String?
  @objc public var recipientIdGuid: Swift.String?
  @objc public var recipientIdGuidMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var recipientIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var scaleValue: Swift.String?
  @objc public var scaleValueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var smartContractInformation: DocuSignAPI.DSAPISmartContractInformation?
  @objc public var source: Swift.String?
  @objc public var stamp: DocuSignAPI.DSAPIStamp?
  @objc public var stampType: Swift.String?
  @objc public var stampTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var status: Swift.String?
  @objc public var statusMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabGroupLabels: [Swift.String]?
  @objc public var tabGroupLabelsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabId: Swift.String?
  @objc public var tabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabLabel: Swift.String?
  @objc public var tabLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabOrder: Swift.String?
  @objc public var tabOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabType: Swift.String?
  @objc public var tabTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var templateLocked: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var templateLockedMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var templateRequired: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var templateRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tooltip: Swift.String?
  @objc public var toolTipMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var width: Swift.String?
  @objc public var widthMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var xPosition: Swift.String?
  @objc public var xPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var yPosition: Swift.String?
  @objc public var yPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var imageDataBase64: Swift.String?
  @objc override dynamic public init()
  public init(anchorAllowWhiteSpaceInCharacters: Swift.Bool = false, anchorAllowWhiteSpaceInCharactersMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorCaseSensitive: Swift.Bool = false, anchorCaseSensitiveMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorHorizontalAlignment: Swift.String? = nil, anchorHorizontalAlignmentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorIgnoreIfNotPresent: Swift.Bool = false, anchorIgnoreIfNotPresentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorMatchWholeWord: Swift.Bool = false, anchorMatchWholeWordMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorString: Swift.String? = nil, anchorStringMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorTabProcessorVersion: Swift.String? = nil, anchorTabProcessorVersionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorUnits: Swift.String? = nil, anchorUnitsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorXOffset: Swift.String? = nil, anchorXOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorYOffset: Swift.String? = nil, anchorYOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, conditionalParentLabel: Swift.String? = nil, conditionalParentLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, conditionalParentValue: Swift.String? = nil, conditionalParentValueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, customTabId: Swift.String? = nil, customTabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, documentId: Swift.String? = nil, documentIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, formOrder: Swift.String? = nil, formOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formPageLabel: Swift.String? = nil, formPageLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formPageNumber: Swift.String? = nil, formPageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, handDrawRequired: Swift.String? = nil, height: Swift.String? = nil, heightMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, isSealSignTab: Swift.Bool = false, mergeField: DocuSignAPI.DSAPIMergeField? = nil, mergeFieldXml: Swift.String? = nil, name: Swift.String? = nil, nameMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, optional: Swift.Bool = false, optionalMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, pageNumber: Swift.String? = nil, pageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, recipientId: Swift.String? = nil, recipientIdGuid: Swift.String? = nil, recipientIdGuidMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, recipientIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, scaleValue: Swift.String? = nil, scaleValueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, smartContractInformation: DocuSignAPI.DSAPISmartContractInformation? = nil, source: Swift.String? = nil, stamp: DocuSignAPI.DSAPIStamp? = nil, stampType: Swift.String? = nil, stampTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, status: Swift.String? = nil, statusMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabGroupLabels: [Swift.String]? = nil, tabGroupLabelsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabId: Swift.String? = nil, tabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabLabel: Swift.String? = nil, tabLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabOrder: Swift.String? = nil, tabOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabType: Swift.String? = nil, tabTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, templateLocked: Swift.Bool = false, templateLockedMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, templateRequired: Swift.Bool = false, templateRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tooltip: Swift.String? = nil, toolTipMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, width: Swift.String? = nil, widthMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, xPosition: Swift.String? = nil, xPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, yPosition: Swift.String? = nil, yPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIAccountSignaturesInformation : Swift.Codable {
  public var accountSignatures: [DocuSignAPI.DSAPIAccountSignature]?
  public init(accountSignatures: [DocuSignAPI.DSAPIAccountSignature]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIFavoriteTemplatesInfo : Swift.Codable {
  public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  public var favoriteTemplates: [DocuSignAPI.DSAPIFavoriteTemplatesContentItem]?
  public var templatesUpdatedCount: Swift.Int?
  public init(errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, favoriteTemplates: [DocuSignAPI.DSAPIFavoriteTemplatesContentItem]? = nil, templatesUpdatedCount: Swift.Int? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIScheduledSendingApiModel : Swift.Codable {
  public var resumeDate: Foundation.Date?
  public var rules: [DocuSignAPI.DSAPIEnvelopeDelayRuleApiModel]?
  public var status: Swift.String?
  public init(resumeDate: Foundation.Date? = nil, rules: [DocuSignAPI.DSAPIEnvelopeDelayRuleApiModel]? = nil, status: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIResourceInformation : Swift.Codable {
  public var resources: [DocuSignAPI.DSAPINameValue]?
  public init(resources: [DocuSignAPI.DSAPINameValue]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIBillingPlanPreview : Swift.Codable {
  public var currencyCode: Swift.String?
  public var invoice: DocuSignAPI.DSAPIBillingInvoice?
  @DocuSignAPI.BoolFromString public var isProrated: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var subtotalAmount: Swift.String?
  public var taxAmount: Swift.String?
  public var totalAmount: Swift.String?
  public init(currencyCode: Swift.String? = nil, invoice: DocuSignAPI.DSAPIBillingInvoice? = nil, isProrated: Swift.Bool = false, subtotalAmount: Swift.String? = nil, taxAmount: Swift.String? = nil, totalAmount: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @objcMembers public class DSAPIFoldersResponse : ObjectiveC.NSObject, Swift.Codable {
  @objc public var endPosition: Swift.String?
  @objc public var envelopes: [DocuSignAPI.DSAPIEnvelopeSummary]?
  @objc public var folders: [DocuSignAPI.DSAPIFolder]?
  @objc public var nextUri: Foundation.URL?
  @objc public var previousUri: Foundation.URL?
  @objc public var resultSetSize: Swift.String?
  @objc public var startPosition: Swift.String?
  @objc public var totalSetSize: Swift.String?
  @objc public init(endPosition: Swift.String? = nil, envelopes: [DocuSignAPI.DSAPIEnvelopeSummary]? = nil, folders: [DocuSignAPI.DSAPIFolder]? = nil, nextUri: Foundation.URL? = nil, previousUri: Foundation.URL? = nil, resultSetSize: Swift.String? = nil, startPosition: Swift.String? = nil, totalSetSize: Swift.String? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct DSAPITemplateNotificationRequest : Swift.Codable {
  public var expirations: DocuSignAPI.DSAPIExpirations?
  public var password: Swift.String?
  public var reminders: DocuSignAPI.DSAPIReminders?
  @DocuSignAPI.BoolFromString public var useAccountDefaults: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public init(expirations: DocuSignAPI.DSAPIExpirations? = nil, password: Swift.String? = nil, reminders: DocuSignAPI.DSAPIReminders? = nil, useAccountDefaults: Swift.Bool = false)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIExternalDocServiceErrorDetails : Swift.Codable {
  public var authenticationUrl: Foundation.URL?
  public var errorCode: Swift.String?
  public var message: Swift.String?
  public init(authenticationUrl: Foundation.URL? = nil, errorCode: Swift.String? = nil, message: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIBulkSendBatchSummaries : Swift.Codable {
  public var batchSizeLimit: Swift.String?
  public var bulkBatchSummaries: [DocuSignAPI.DSAPIBulkSendBatchSummary]?
  public var bulkProcessQueueLimit: Swift.String?
  public var bulkProcessTotalQueued: Swift.String?
  public var endPosition: Swift.String?
  public var nextUri: Foundation.URL?
  public var previousUri: Foundation.URL?
  public var queueLimit: Swift.String?
  public var resultSetSize: Swift.String?
  public var startPosition: Swift.String?
  public var totalQueued: Swift.String?
  public var totalSetSize: Swift.String?
  public init(batchSizeLimit: Swift.String? = nil, bulkBatchSummaries: [DocuSignAPI.DSAPIBulkSendBatchSummary]? = nil, bulkProcessQueueLimit: Swift.String? = nil, bulkProcessTotalQueued: Swift.String? = nil, endPosition: Swift.String? = nil, nextUri: Foundation.URL? = nil, previousUri: Foundation.URL? = nil, queueLimit: Swift.String? = nil, resultSetSize: Swift.String? = nil, startPosition: Swift.String? = nil, totalQueued: Swift.String? = nil, totalSetSize: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIDocumentHtmlDisplaySettings : Swift.Codable {
  public var cellStyle: Swift.String?
  public var collapsibleSettings: DocuSignAPI.DSAPIDocumentHtmlCollapsibleDisplaySettings?
  public var display: Swift.String?
  public var displayLabel: Swift.String?
  public var displayOrder: Swift.Int?
  public var displayPageNumber: Swift.Int?
  public var hideLabelWhenOpened: Swift.Bool
  public var inlineOuterStyle: Swift.String?
  public var labelWhenOpened: Swift.String?
  public var preLabel: Swift.String?
  public var scrollToTopWhenOpened: Swift.Bool
  public var tableStyle: Swift.String?
  public init(cellStyle: Swift.String? = nil, collapsibleSettings: DocuSignAPI.DSAPIDocumentHtmlCollapsibleDisplaySettings? = nil, display: Swift.String? = nil, displayLabel: Swift.String? = nil, displayOrder: Swift.Int? = nil, displayPageNumber: Swift.Int? = nil, hideLabelWhenOpened: Swift.Bool = false, inlineOuterStyle: Swift.String? = nil, labelWhenOpened: Swift.String? = nil, preLabel: Swift.String? = nil, scrollToTopWhenOpened: Swift.Bool = false, tableStyle: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIAdminMessage : Swift.Codable {
  public var baseMessage: Swift.String?
  public var moreInformation: Swift.String?
  public init(baseMessage: Swift.String? = nil, moreInformation: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @objcMembers public class DSAPICarbonCopy : ObjectiveC.NSObject, Swift.Codable {
  @objc public var accessCode: Swift.String?
  @objc public var accessCodeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var addAccessCodeToEmail: Swift.String?
  @objc public var additionalNotifications: [DocuSignAPI.DSAPIRecipientAdditionalNotification]?
  @objc public var agentCanEditEmail: Swift.String?
  @objc public var agentCanEditName: Swift.String?
  @objc @DocuSignAPI.BoolFromString public var allowSystemOverrideForLockedRecipient: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var autoRespondedReason: Swift.String?
  @objc public var clientUserId: Swift.String?
  @objc public var completedCount: Swift.String?
  @objc public var customFields: [Swift.String]?
  @objc public var declinedDateTime: Foundation.Date?
  @objc public var declinedReason: Swift.String?
  @objc public var deliveredDateTime: Foundation.Date?
  @objc public var deliveryMethod: Swift.String?
  @objc public var deliveryMethodMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var designatorId: Swift.String?
  @objc public var designatorIdGuid: Swift.String?
  @objc public var documentVisibility: [DocuSignAPI.DSAPIDocumentVisibility]?
  @objc public var email: Swift.String?
  @objc public var emailMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var emailNotification: DocuSignAPI.DSAPIRecipientEmailNotification?
  @objc public var emailRecipientPostSigningURL: Swift.String?
  @objc public var embeddedRecipientStartURL: Swift.String?
  @objc public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  @objc public var excludedDocuments: [Swift.String]?
  @objc public var faxNumber: Swift.String?
  @objc public var faxNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var firstName: Swift.String?
  @objc public var firstNameMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var fullName: Swift.String?
  @objc public var fullNameMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var idCheckConfigurationName: Swift.String?
  @objc public var idCheckConfigurationNameMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var idCheckInformationInput: DocuSignAPI.DSAPIIdCheckInformationInput?
  public var identityVerification: DocuSignAPI.DSAPIRecipientIdentityVerification?
  @objc @DocuSignAPI.BoolFromString public var inheritEmailNotificationConfiguration: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var lastName: Swift.String?
  @objc public var lastNameMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var linkedAccountConfigurationId: Swift.String?
  @objc public var lockedRecipientPhoneAuthEditable: Swift.String?
  @objc public var lockedRecipientSmsEditable: Swift.String?
  @objc public var name: Swift.String?
  @objc public var nameMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var note: Swift.String?
  @objc public var noteMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var phoneAuthentication: DocuSignAPI.DSAPIRecipientPhoneAuthentication?
  public var phoneNumber: DocuSignAPI.DSAPIRecipientPhoneNumber?
  public var proofFile: DocuSignAPI.DSAPIRecipientProofFile?
  @objc public var recipientAttachments: [DocuSignAPI.DSAPIRecipientAttachment]?
  public var recipientAuthenticationStatus: DocuSignAPI.DSAPIAuthenticationStatus?
  public var recipientFeatureMetadata: [DocuSignAPI.DSAPIFeatureAvailableMetadata]?
  @objc public var recipientId: Swift.String?
  @objc public var recipientIdGuid: Swift.String?
  @objc public var recipientType: Swift.String?
  @objc public var recipientTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var requireIdLookup: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var requireIdLookupMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var roleName: Swift.String?
  @objc public var routingOrder: Swift.String?
  @objc public var routingOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var sentDateTime: Foundation.Date?
  @objc public var signedDateTime: Foundation.Date?
  @objc public var signingGroupId: Swift.String?
  @objc public var signingGroupIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var signingGroupName: Swift.String?
  @objc public var signingGroupUsers: [DocuSignAPI.DSAPIUserInfo]?
  @objc public var smsAuthentication: DocuSignAPI.DSAPIRecipientSMSAuthentication?
  @objc public var socialAuthentications: [DocuSignAPI.DSAPISocialAuthentication]?
  @objc public var status: Swift.String?
  @objc public var statusCode: Swift.String?
  @objc @DocuSignAPI.BoolFromString public var suppressEmails: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var tabs: DocuSignAPI.DSAPITabs?
  @objc @DocuSignAPI.BoolFromString public var templateLocked: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc @DocuSignAPI.BoolFromString public var templateRequired: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var totalTabCount: Swift.String?
  @objc public var userId: Swift.String?
  @objc override dynamic public init()
  public init(accessCode: Swift.String? = nil, accessCodeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, addAccessCodeToEmail: Swift.String? = nil, additionalNotifications: [DocuSignAPI.DSAPIRecipientAdditionalNotification]? = nil, agentCanEditEmail: Swift.String? = nil, agentCanEditName: Swift.String? = nil, allowSystemOverrideForLockedRecipient: Swift.Bool = false, autoRespondedReason: Swift.String? = nil, clientUserId: Swift.String? = nil, completedCount: Swift.String? = nil, customFields: [Swift.String]? = nil, declinedDateTime: Foundation.Date? = nil, declinedReason: Swift.String? = nil, deliveredDateTime: Foundation.Date? = nil, deliveryMethod: Swift.String? = nil, deliveryMethodMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, designatorId: Swift.String? = nil, designatorIdGuid: Swift.String? = nil, documentVisibility: [DocuSignAPI.DSAPIDocumentVisibility]? = nil, email: Swift.String? = nil, emailMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, emailNotification: DocuSignAPI.DSAPIRecipientEmailNotification? = nil, emailRecipientPostSigningURL: Swift.String? = nil, embeddedRecipientStartURL: Swift.String? = nil, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, excludedDocuments: [Swift.String]? = nil, faxNumber: Swift.String? = nil, faxNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, firstName: Swift.String? = nil, firstNameMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, fullName: Swift.String? = nil, fullNameMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, idCheckConfigurationName: Swift.String? = nil, idCheckConfigurationNameMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, idCheckInformationInput: DocuSignAPI.DSAPIIdCheckInformationInput? = nil, identityVerification: DocuSignAPI.DSAPIRecipientIdentityVerification? = nil, inheritEmailNotificationConfiguration: Swift.Bool = false, lastName: Swift.String? = nil, lastNameMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, linkedAccountConfigurationId: Swift.String? = nil, lockedRecipientPhoneAuthEditable: Swift.String? = nil, lockedRecipientSmsEditable: Swift.String? = nil, name: Swift.String? = nil, nameMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, note: Swift.String? = nil, noteMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, phoneAuthentication: DocuSignAPI.DSAPIRecipientPhoneAuthentication? = nil, phoneNumber: DocuSignAPI.DSAPIRecipientPhoneNumber? = nil, proofFile: DocuSignAPI.DSAPIRecipientProofFile? = nil, recipientAttachments: [DocuSignAPI.DSAPIRecipientAttachment]? = nil, recipientAuthenticationStatus: DocuSignAPI.DSAPIAuthenticationStatus? = nil, recipientFeatureMetadata: [DocuSignAPI.DSAPIFeatureAvailableMetadata]? = nil, recipientId: Swift.String? = nil, recipientIdGuid: Swift.String? = nil, recipientType: Swift.String? = nil, recipientTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, requireIdLookup: Swift.Bool = false, requireIdLookupMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, roleName: Swift.String? = nil, routingOrder: Swift.String? = nil, routingOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, sentDateTime: Foundation.Date? = nil, signedDateTime: Foundation.Date? = nil, signingGroupId: Swift.String? = nil, signingGroupIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, signingGroupName: Swift.String? = nil, signingGroupUsers: [DocuSignAPI.DSAPIUserInfo]? = nil, smsAuthentication: DocuSignAPI.DSAPIRecipientSMSAuthentication? = nil, socialAuthentications: [DocuSignAPI.DSAPISocialAuthentication]? = nil, status: Swift.String? = nil, statusCode: Swift.String? = nil, suppressEmails: Swift.Bool = false, tabs: DocuSignAPI.DSAPITabs? = nil, templateLocked: Swift.Bool = false, templateRequired: Swift.Bool = false, totalTabCount: Swift.String? = nil, userId: Swift.String? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIBrandResourceUrls : Swift.Codable {
  public var email: Swift.String?
  public var sending: Swift.String?
  public var signing: Swift.String?
  public var signingCaptive: Swift.String?
  public init(email: Swift.String? = nil, sending: Swift.String? = nil, signing: Swift.String? = nil, signingCaptive: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPISmartSection : Swift.Codable {
  @DocuSignAPI.BoolFromString public var anchorAllowWhiteSpaceInCharacters: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var anchorAllowWhiteSpaceInCharactersMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var anchorCaseSensitive: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var anchorCaseSensitiveMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorHorizontalAlignment: Swift.String?
  public var anchorHorizontalAlignmentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var anchorIgnoreIfNotPresent: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var anchorIgnoreIfNotPresentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var anchorMatchWholeWord: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var anchorMatchWholeWordMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorString: Swift.String?
  public var anchorStringMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorTabProcessorVersion: Swift.String?
  public var anchorTabProcessorVersionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorUnits: Swift.String?
  public var anchorUnitsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorXOffset: Swift.String?
  public var anchorXOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorYOffset: Swift.String?
  public var anchorYOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var caseSensitive: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var conditionalParentLabel: Swift.String?
  public var conditionalParentLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var conditionalParentValue: Swift.String?
  public var conditionalParentValueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var customTabId: Swift.String?
  public var customTabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var displaySettings: DocuSignAPI.DSAPISmartSectionDisplaySettings?
  public var documentId: Swift.String?
  public var documentIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var endAnchor: Swift.String?
  public var endPosition: DocuSignAPI.DSAPISmartSectionAnchorPosition?
  public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  public var formOrder: Swift.String?
  public var formOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var formPageLabel: Swift.String?
  public var formPageLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var formPageNumber: Swift.String?
  public var formPageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var height: Swift.String?
  public var heightMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var locked: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var lockedMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var mergeField: DocuSignAPI.DSAPIMergeField?
  public var mergeFieldXml: Swift.String?
  public var overlayType: Swift.String?
  public var overlayTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var pageNumber: Swift.String?
  public var pageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var recipientId: Swift.String?
  public var recipientIdGuid: Swift.String?
  public var recipientIdGuidMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var recipientIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var removeEndAnchor: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  @DocuSignAPI.BoolFromString public var removeStartAnchor: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  @DocuSignAPI.BoolFromString public var shared: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var sharedMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var smartContractInformation: DocuSignAPI.DSAPISmartContractInformation?
  public var source: Swift.String?
  public var startAnchor: Swift.String?
  public var startPosition: DocuSignAPI.DSAPISmartSectionAnchorPosition?
  public var status: Swift.String?
  public var statusMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var tabGroupLabels: [Swift.String]?
  public var tabGroupLabelsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var tabId: Swift.String?
  public var tabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var tabLabel: Swift.String?
  public var tabOrder: Swift.String?
  public var tabOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var tabType: Swift.String?
  public var tabTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var templateLocked: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var templateLockedMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var templateRequired: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var templateRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var tooltip: Swift.String?
  public var toolTipMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var width: Swift.String?
  public var widthMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var xPosition: Swift.String?
  public var xPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var yPosition: Swift.String?
  public var yPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public init(anchorAllowWhiteSpaceInCharacters: Swift.Bool = false, anchorAllowWhiteSpaceInCharactersMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorCaseSensitive: Swift.Bool = false, anchorCaseSensitiveMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorHorizontalAlignment: Swift.String? = nil, anchorHorizontalAlignmentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorIgnoreIfNotPresent: Swift.Bool = false, anchorIgnoreIfNotPresentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorMatchWholeWord: Swift.Bool = false, anchorMatchWholeWordMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorString: Swift.String? = nil, anchorStringMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorTabProcessorVersion: Swift.String? = nil, anchorTabProcessorVersionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorUnits: Swift.String? = nil, anchorUnitsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorXOffset: Swift.String? = nil, anchorXOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorYOffset: Swift.String? = nil, anchorYOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, caseSensitive: Swift.Bool = false, conditionalParentLabel: Swift.String? = nil, conditionalParentLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, conditionalParentValue: Swift.String? = nil, conditionalParentValueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, customTabId: Swift.String? = nil, customTabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, displaySettings: DocuSignAPI.DSAPISmartSectionDisplaySettings? = nil, documentId: Swift.String? = nil, documentIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, endAnchor: Swift.String? = nil, endPosition: DocuSignAPI.DSAPISmartSectionAnchorPosition? = nil, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, formOrder: Swift.String? = nil, formOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formPageLabel: Swift.String? = nil, formPageLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formPageNumber: Swift.String? = nil, formPageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, height: Swift.String? = nil, heightMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, locked: Swift.Bool = false, lockedMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, mergeField: DocuSignAPI.DSAPIMergeField? = nil, mergeFieldXml: Swift.String? = nil, overlayType: Swift.String? = nil, overlayTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, pageNumber: Swift.String? = nil, pageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, recipientId: Swift.String? = nil, recipientIdGuid: Swift.String? = nil, recipientIdGuidMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, recipientIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, removeEndAnchor: Swift.Bool = false, removeStartAnchor: Swift.Bool = false, shared: Swift.Bool = false, sharedMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, smartContractInformation: DocuSignAPI.DSAPISmartContractInformation? = nil, source: Swift.String? = nil, startAnchor: Swift.String? = nil, startPosition: DocuSignAPI.DSAPISmartSectionAnchorPosition? = nil, status: Swift.String? = nil, statusMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabGroupLabels: [Swift.String]? = nil, tabGroupLabelsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabId: Swift.String? = nil, tabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabLabel: Swift.String? = nil, tabOrder: Swift.String? = nil, tabOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabType: Swift.String? = nil, tabTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, templateLocked: Swift.Bool = false, templateLockedMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, templateRequired: Swift.Bool = false, templateRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tooltip: Swift.String? = nil, toolTipMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, width: Swift.String? = nil, widthMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, xPosition: Swift.String? = nil, xPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, yPosition: Swift.String? = nil, yPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIFeatureSet : Swift.Codable {
  public var currencyFeatureSetPrices: [DocuSignAPI.DSAPICurrencyFeatureSetPrice]?
  public var envelopeFee: Swift.String?
  public var featureSetId: Swift.String?
  public var fixedFee: Swift.String?
  public var is21CFRPart11: Swift.String?
  public var isActive: Swift.String?
  @DocuSignAPI.BoolFromString public var isEnabled: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var name: Swift.String?
  public var seatFee: Swift.String?
  public init(currencyFeatureSetPrices: [DocuSignAPI.DSAPICurrencyFeatureSetPrice]? = nil, envelopeFee: Swift.String? = nil, featureSetId: Swift.String? = nil, fixedFee: Swift.String? = nil, is21CFRPart11: Swift.String? = nil, isActive: Swift.String? = nil, isEnabled: Swift.Bool = false, name: Swift.String? = nil, seatFee: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIPaymentMethodWithOptions : Swift.Codable {
  public var supportedCurrencies: [Swift.String]?
  public var supportedOptions: [Swift.String]?
  public var type: Swift.String?
  public init(supportedCurrencies: [Swift.String]? = nil, supportedOptions: [Swift.String]? = nil, type: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIOauthAccess : Swift.Codable {
  public var accessToken: Swift.String?
  public var data: [DocuSignAPI.DSAPINameValue]?
  public var expiresIn: Swift.String?
  public var refreshToken: Swift.String?
  public var scope: Swift.String?
  public var tokenType: Swift.String?
  public init(accessToken: Swift.String? = nil, data: [DocuSignAPI.DSAPINameValue]? = nil, expiresIn: Swift.String? = nil, refreshToken: Swift.String? = nil, scope: Swift.String? = nil, tokenType: Swift.String? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case accessToken
    case data
    case expiresIn
    case refreshToken
    case scope
    case tokenType
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension DocuSignAPI.DSAPIEnvelopeDefinition {
  @objc dynamic public func convertToObject(jsonString: Swift.String) -> DocuSignAPI.DSAPIEnvelopeDefinition?
}
public struct DSAPIAccountSignatureDefinition : Swift.Codable {
  public var dateStampProperties: DocuSignAPI.DSAPIDateStampProperties?
  @DocuSignAPI.BoolFromString public var disallowUserResizeStamp: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var externalID: Swift.String?
  public var imageType: Swift.String?
  @DocuSignAPI.BoolFromString public var isDefault: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var nrdsId: Swift.String?
  public var nrdsLastName: Swift.String?
  public var phoneticName: Swift.String?
  public var signatureFont: Swift.String?
  public var signatureGroups: [DocuSignAPI.DSAPISignatureGroupDef]?
  public var signatureId: Swift.String?
  public var signatureInitials: Swift.String?
  public var signatureName: Swift.String?
  public var signatureType: Swift.String?
  public var signatureUsers: [DocuSignAPI.DSAPISignatureUserDef]?
  public var stampFormat: Swift.String?
  public var stampSizeMM: Swift.String?
  public init(dateStampProperties: DocuSignAPI.DSAPIDateStampProperties? = nil, disallowUserResizeStamp: Swift.Bool = false, externalID: Swift.String? = nil, imageType: Swift.String? = nil, isDefault: Swift.Bool = false, nrdsId: Swift.String? = nil, nrdsLastName: Swift.String? = nil, phoneticName: Swift.String? = nil, signatureFont: Swift.String? = nil, signatureGroups: [DocuSignAPI.DSAPISignatureGroupDef]? = nil, signatureId: Swift.String? = nil, signatureInitials: Swift.String? = nil, signatureName: Swift.String? = nil, signatureType: Swift.String? = nil, signatureUsers: [DocuSignAPI.DSAPISignatureUserDef]? = nil, stampFormat: Swift.String? = nil, stampSizeMM: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPINotaryJournal : Swift.Codable {
  public var createdDate: Foundation.Date?
  public var documentName: Swift.String?
  public var jurisdiction: DocuSignAPI.DSAPIJurisdiction?
  public var notaryJournalId: Swift.String?
  public var notaryJournalMetaData: DocuSignAPI.DSAPINotaryJournalMetaData?
  public var signerName: Swift.String?
  public init(createdDate: Foundation.Date? = nil, documentName: Swift.String? = nil, jurisdiction: DocuSignAPI.DSAPIJurisdiction? = nil, notaryJournalId: Swift.String? = nil, notaryJournalMetaData: DocuSignAPI.DSAPINotaryJournalMetaData? = nil, signerName: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIPermissionProfile : Swift.Codable {
  public var modifiedByUsername: Swift.String?
  public var modifiedDateTime: Foundation.Date?
  public var permissionProfileId: Swift.String?
  public var permissionProfileName: Swift.String?
  public var settings: DocuSignAPI.DSAPIAccountRoleSettings?
  public var userCount: Swift.String?
  public var users: [DocuSignAPI.DSAPIUserInformation]?
  public init(modifiedByUsername: Swift.String? = nil, modifiedDateTime: Foundation.Date? = nil, permissionProfileId: Swift.String? = nil, permissionProfileName: Swift.String? = nil, settings: DocuSignAPI.DSAPIAccountRoleSettings? = nil, userCount: Swift.String? = nil, users: [DocuSignAPI.DSAPIUserInformation]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIPolyLine : Swift.Codable {
  public var x1: Swift.String?
  public var x2: Swift.String?
  public var y1: Swift.String?
  public var y2: Swift.String?
  public init(x1: Swift.String? = nil, x2: Swift.String? = nil, y1: Swift.String? = nil, y2: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPISenderCompany : Swift.Codable {
  @DocuSignAPI.BoolFromString public var anchorAllowWhiteSpaceInCharacters: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var anchorAllowWhiteSpaceInCharactersMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var anchorCaseSensitive: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var anchorCaseSensitiveMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorHorizontalAlignment: Swift.String?
  public var anchorHorizontalAlignmentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var anchorIgnoreIfNotPresent: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var anchorIgnoreIfNotPresentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var anchorMatchWholeWord: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var anchorMatchWholeWordMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorString: Swift.String?
  public var anchorStringMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorTabProcessorVersion: Swift.String?
  public var anchorTabProcessorVersionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorUnits: Swift.String?
  public var anchorUnitsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorXOffset: Swift.String?
  public var anchorXOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorYOffset: Swift.String?
  public var anchorYOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var bold: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var boldMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var conditionalParentLabel: Swift.String?
  public var conditionalParentLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var conditionalParentValue: Swift.String?
  public var conditionalParentValueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var customTabId: Swift.String?
  public var customTabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var documentId: Swift.String?
  public var documentIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  public var font: Swift.String?
  public var fontColor: Swift.String?
  public var fontColorMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var fontMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var fontSize: Swift.String?
  public var fontSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var formOrder: Swift.String?
  public var formOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var formPageLabel: Swift.String?
  public var formPageLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var formPageNumber: Swift.String?
  public var formPageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var height: Swift.String?
  public var heightMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var italic: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var italicMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var localePolicy: DocuSignAPI.DSAPILocalePolicyTab?
  public var mergeField: DocuSignAPI.DSAPIMergeField?
  public var mergeFieldXml: Swift.String?
  public var name: Swift.String?
  public var nameMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var pageNumber: Swift.String?
  public var pageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var recipientId: Swift.String?
  public var recipientIdGuid: Swift.String?
  public var recipientIdGuidMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var recipientIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var smartContractInformation: DocuSignAPI.DSAPISmartContractInformation?
  public var source: Swift.String?
  public var status: Swift.String?
  public var statusMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var tabGroupLabels: [Swift.String]?
  public var tabGroupLabelsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var tabId: Swift.String?
  public var tabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var tabLabel: Swift.String?
  public var tabLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var tabOrder: Swift.String?
  public var tabOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var tabType: Swift.String?
  public var tabTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var templateLocked: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var templateLockedMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var templateRequired: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var templateRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var tooltip: Swift.String?
  public var toolTipMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var underline: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var underlineMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var value: Swift.String?
  public var valueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var width: Swift.String?
  public var widthMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var xPosition: Swift.String?
  public var xPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var yPosition: Swift.String?
  public var yPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public init(anchorAllowWhiteSpaceInCharacters: Swift.Bool = false, anchorAllowWhiteSpaceInCharactersMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorCaseSensitive: Swift.Bool = false, anchorCaseSensitiveMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorHorizontalAlignment: Swift.String? = nil, anchorHorizontalAlignmentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorIgnoreIfNotPresent: Swift.Bool = false, anchorIgnoreIfNotPresentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorMatchWholeWord: Swift.Bool = false, anchorMatchWholeWordMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorString: Swift.String? = nil, anchorStringMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorTabProcessorVersion: Swift.String? = nil, anchorTabProcessorVersionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorUnits: Swift.String? = nil, anchorUnitsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorXOffset: Swift.String? = nil, anchorXOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorYOffset: Swift.String? = nil, anchorYOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, bold: Swift.Bool = false, boldMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, conditionalParentLabel: Swift.String? = nil, conditionalParentLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, conditionalParentValue: Swift.String? = nil, conditionalParentValueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, customTabId: Swift.String? = nil, customTabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, documentId: Swift.String? = nil, documentIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, font: Swift.String? = nil, fontColor: Swift.String? = nil, fontColorMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, fontMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, fontSize: Swift.String? = nil, fontSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formOrder: Swift.String? = nil, formOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formPageLabel: Swift.String? = nil, formPageLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formPageNumber: Swift.String? = nil, formPageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, height: Swift.String? = nil, heightMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, italic: Swift.Bool = false, italicMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, localePolicy: DocuSignAPI.DSAPILocalePolicyTab? = nil, mergeField: DocuSignAPI.DSAPIMergeField? = nil, mergeFieldXml: Swift.String? = nil, name: Swift.String? = nil, nameMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, pageNumber: Swift.String? = nil, pageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, recipientId: Swift.String? = nil, recipientIdGuid: Swift.String? = nil, recipientIdGuidMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, recipientIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, smartContractInformation: DocuSignAPI.DSAPISmartContractInformation? = nil, source: Swift.String? = nil, status: Swift.String? = nil, statusMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabGroupLabels: [Swift.String]? = nil, tabGroupLabelsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabId: Swift.String? = nil, tabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabLabel: Swift.String? = nil, tabLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabOrder: Swift.String? = nil, tabOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabType: Swift.String? = nil, tabTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, templateLocked: Swift.Bool = false, templateLockedMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, templateRequired: Swift.Bool = false, templateRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tooltip: Swift.String? = nil, toolTipMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, underline: Swift.Bool = false, underlineMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, value: Swift.String? = nil, valueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, width: Swift.String? = nil, widthMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, xPosition: Swift.String? = nil, xPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, yPosition: Swift.String? = nil, yPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIBulkProcessingLists : Swift.Codable {
  public var bulkProcessListIds: [Swift.String]?
  public init(bulkProcessListIds: [Swift.String]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPILockRequest : Swift.Codable {
  public var lockDurationInSeconds: Swift.String?
  public var lockedByApp: Swift.String?
  public var lockType: Swift.String?
  public var templatePassword: Swift.String?
  @DocuSignAPI.BoolFromString public var useScratchPad: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public init(lockDurationInSeconds: Swift.String? = nil, lockedByApp: Swift.String? = nil, lockType: Swift.String? = nil, templatePassword: Swift.String? = nil, useScratchPad: Swift.Bool = false)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @objcMembers open class UsersAPI : ObjectiveC.NSObject {
  open class func contactsDeleteContactWithId(accountId: Swift.String, contactId: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPIContactUpdateResponse?, _ error: Swift.Error?) -> Swift.Void))
  open class func contactsDeleteContactWithIdWithRequestBuilder(accountId: Swift.String, contactId: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIContactUpdateResponse>
  open class func contactsDeleteContacts(accountId: Swift.String, body: DocuSignAPI.DSAPIContactModRequest? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIContactUpdateResponse?, _ error: Swift.Error?) -> Swift.Void))
  open class func contactsDeleteContactsWithRequestBuilder(accountId: Swift.String, body: DocuSignAPI.DSAPIContactModRequest? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIContactUpdateResponse>
  open class func contactsGetContactById(accountId: Swift.String, contactId: Swift.String, cloudProvider: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIContactGetResponse?, _ error: Swift.Error?) -> Swift.Void))
  open class func contactsGetContactByIdWithRequestBuilder(accountId: Swift.String, contactId: Swift.String, cloudProvider: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIContactGetResponse>
  open class func contactsPostContacts(accountId: Swift.String, body: DocuSignAPI.DSAPIContactModRequest? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIContactUpdateResponse?, _ error: Swift.Error?) -> Swift.Void))
  open class func contactsPostContactsWithRequestBuilder(accountId: Swift.String, body: DocuSignAPI.DSAPIContactModRequest? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIContactUpdateResponse>
  open class func contactsPutContacts(accountId: Swift.String, body: DocuSignAPI.DSAPIContactModRequest? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIContactUpdateResponse?, _ error: Swift.Error?) -> Swift.Void))
  open class func contactsPutContactsWithRequestBuilder(accountId: Swift.String, body: DocuSignAPI.DSAPIContactModRequest? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIContactUpdateResponse>
  open class func userCustomSettingsDeleteCustomSettings(accountId: Swift.String, userId: Swift.String, body: DocuSignAPI.DSAPICustomSettingsInformation? = nil, groupname: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPICustomSettingsInformation?, _ error: Swift.Error?) -> Swift.Void))
  open class func userCustomSettingsDeleteCustomSettingsWithRequestBuilder(accountId: Swift.String, userId: Swift.String, body: DocuSignAPI.DSAPICustomSettingsInformation? = nil, groupName: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPICustomSettingsInformation>
  open class func userCustomSettingsGetCustomSettings(accountId: Swift.String, userId: Swift.String, groupName: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPICustomSettingsInformation?, _ error: Swift.Error?) -> Swift.Void))
  open class func userCustomSettingsGetCustomSettingsWithRequestBuilder(accountId: Swift.String, userId: Swift.String, groupName: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPICustomSettingsInformation>
  open class func userCustomSettingsPutCustomSettings(accountId: Swift.String, userId: Swift.String, body: DocuSignAPI.DSAPICustomSettingsInformation? = nil, groupName: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPICustomSettingsInformation?, _ error: Swift.Error?) -> Swift.Void))
  open class func userCustomSettingsPutCustomSettingsWithRequestBuilder(accountId: Swift.String, userId: Swift.String, body: DocuSignAPI.DSAPICustomSettingsInformation? = nil, groupName: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPICustomSettingsInformation>
  open class func userGetUser(accountId: Swift.String, userId: Swift.String, additionalInfo: Swift.String? = nil, email: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIUserInformation?, _ error: Swift.Error?) -> Swift.Void))
  open class func userGetUserWithRequestBuilder(accountId: Swift.String, userId: Swift.String, additionalInfo: Swift.String? = nil, email: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIUserInformation>
  open class func userProfileGetProfile(accountId: Swift.String, userId: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPIUserProfile?, _ error: Swift.Error?) -> Swift.Void))
  open class func userProfileGetProfileWithRequestBuilder(accountId: Swift.String, userId: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIUserProfile>
  open class func userProfileImageDeleteUserProfileImage(accountId: Swift.String, userId: Swift.String, completion: @escaping ((_ data: Swift.Void?, _ error: Swift.Error?) -> Swift.Void))
  open class func userProfileImageDeleteUserProfileImageWithRequestBuilder(accountId: Swift.String, userId: Swift.String) -> DocuSignAPI.RequestBuilder<Swift.Void>
  @objc open class func userProfileImageGetUserProfileImage(accountId: Swift.String, userId: Swift.String, encoding: Swift.String? = nil, completion: @escaping ((_ data: Foundation.Data?, _ error: Swift.Error?) -> Swift.Void))
  open class func userProfileImageGetUserProfileImageWithRequestBuilder(accountId: Swift.String, userId: Swift.String, encoding: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<Foundation.Data>
  open class func userProfileImagePutUserProfileImage(accountId: Swift.String, userId: Swift.String, completion: @escaping ((_ data: Swift.Void?, _ error: Swift.Error?) -> Swift.Void))
  open class func userProfileImagePutUserProfileImageWithRequestBuilder(accountId: Swift.String, userId: Swift.String) -> DocuSignAPI.RequestBuilder<Swift.Void>
  open class func userProfilePutProfile(accountId: Swift.String, userId: Swift.String, body: DocuSignAPI.DSAPIUserProfile? = nil, completion: @escaping ((_ data: Swift.Void?, _ error: Swift.Error?) -> Swift.Void))
  open class func userProfilePutProfileWithRequestBuilder(accountId: Swift.String, userId: Swift.String, body: DocuSignAPI.DSAPIUserProfile? = nil) -> DocuSignAPI.RequestBuilder<Swift.Void>
  open class func userPutUser(accountId: Swift.String, userId: Swift.String, body: DocuSignAPI.DSAPIUserInformation? = nil, allowAllLanguages: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIUserInformation?, _ error: Swift.Error?) -> Swift.Void))
  open class func userPutUserWithRequestBuilder(accountId: Swift.String, userId: Swift.String, body: DocuSignAPI.DSAPIUserInformation? = nil, allowAllLanguages: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIUserInformation>
  @objc open class func userSettingsGetUserSettings(accountId: Swift.String, userId: Swift.String, completion: @escaping ((_ data: Foundation.Data?, _ error: Swift.Error?) -> Swift.Void))
  open class func userSettingsGetUserSettingsWithRequestBuilder(accountId: Swift.String, userId: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIUserSettingsInformation>
  open class func userSettingsPutUserSettings(accountId: Swift.String, userId: Swift.String, body: DocuSignAPI.DSAPIUserSettingsInformation? = nil, allowAllLanguages: Swift.String? = nil, completion: @escaping ((_ data: Swift.Void?, _ error: Swift.Error?) -> Swift.Void))
  open class func userSettingsPutUserSettingsWithRequestBuilder(accountId: Swift.String, userId: Swift.String, body: DocuSignAPI.DSAPIUserSettingsInformation? = nil, allowAllLanguages: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<Swift.Void>
  @objc open class func userSignaturesDeleteUserSignature(accountId: Swift.String, signatureId: Swift.String, userId: Swift.String, completion: @escaping (_ error: Swift.Error?) -> Swift.Void)
  open class func userSignaturesDeleteUserSignatureWithRequestBuilder(accountId: Swift.String, signatureId: Swift.String, userId: Swift.String) -> DocuSignAPI.RequestBuilder<Swift.Void>
  @objc open class func userSignaturesDeleteUserSignatureImage(accountId: Swift.String, imageType: Swift.String, signatureId: Swift.String, userId: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPIUserSignature?, _ error: Swift.Error?) -> Swift.Void))
  open class func userSignaturesDeleteUserSignatureImageWithRequestBuilder(accountId: Swift.String, imageType: Swift.String, signatureId: Swift.String, userId: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIUserSignature>
  @objc open class func userSignaturesGetUserSignature(accountId: Swift.String, signatureId: Swift.String, userId: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPIUserSignature?, _ error: Swift.Error?) -> Swift.Void))
  open class func userSignaturesGetUserSignatureWithRequestBuilder(accountId: Swift.String, signatureId: Swift.String, userId: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIUserSignature>
  @objc open class func userSignaturesGetUserSignatureImage(accountId: Swift.String, imageType: Swift.String, signatureId: Swift.String, userId: Swift.String, includeChrome: Swift.String? = nil, completion: @escaping ((_ data: Foundation.Data?, _ error: Swift.Error?) -> Swift.Void))
  open class func userSignaturesGetUserSignatureImageWithRequestBuilder(accountId: Swift.String, imageType: Swift.String, signatureId: Swift.String, userId: Swift.String, includeChrome: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<Foundation.Data>
  @objc open class func userSignaturesGetUserSignatures(accountId: Swift.String, userId: Swift.String, stampType: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIUserSignaturesInformation?, _ error: Swift.Error?) -> Swift.Void))
  open class func userSignaturesGetUserSignaturesWithRequestBuilder(accountId: Swift.String, userId: Swift.String, stampType: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIUserSignaturesInformation>
  @objc open class func userSignaturesPostUserSignatures(accountId: Swift.String, userId: Swift.String, body: DocuSignAPI.DSAPIUserSignaturesInformation? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIUserSignaturesInformation?, _ error: Swift.Error?) -> Swift.Void))
  open class func userSignaturesPostUserSignaturesWithRequestBuilder(accountId: Swift.String, userId: Swift.String, body: DocuSignAPI.DSAPIUserSignaturesInformation? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIUserSignaturesInformation>
  @objc open class func userSignaturesPutUserSignature(accountId: Swift.String, userId: Swift.String, body: DocuSignAPI.DSAPIUserSignaturesInformation? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIUserSignaturesInformation?, _ error: Swift.Error?) -> Swift.Void))
  open class func userSignaturesPutUserSignatureWithRequestBuilder(accountId: Swift.String, userId: Swift.String, body: DocuSignAPI.DSAPIUserSignaturesInformation? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIUserSignaturesInformation>
  @objc open class func userSignaturesPutUserSignatureById(accountId: Swift.String, signatureId: Swift.String, userId: Swift.String, body: DocuSignAPI.DSAPIUserSignatureDefinition? = nil, closeExistingSignature: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIUserSignature?, _ error: Swift.Error?) -> Swift.Void))
  open class func userSignaturesPutUserSignatureByIdWithRequestBuilder(accountId: Swift.String, signatureId: Swift.String, userId: Swift.String, body: DocuSignAPI.DSAPIUserSignatureDefinition? = nil, closeExistingSignature: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIUserSignature>
  @objc open class func userSignaturesPutUserSignatureImage(accountId: Swift.String, imageType: Swift.String, signatureId: Swift.String, userId: Swift.String, transparentPng: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIUserSignature?, _ error: Swift.Error?) -> Swift.Void))
  open class func userSignaturesPutUserSignatureImageWithRequestBuilder(accountId: Swift.String, imageType: Swift.String, signatureId: Swift.String, userId: Swift.String, transparentPng: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIUserSignature>
  open class func usersDeleteUsers(accountId: Swift.String, body: DocuSignAPI.DSAPIUserInfoList? = nil, delete: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIUsersResponse?, _ error: Swift.Error?) -> Swift.Void))
  open class func usersDeleteUsersWithRequestBuilder(accountId: Swift.String, body: DocuSignAPI.DSAPIUserInfoList? = nil, delete: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIUsersResponse>
  open class func usersGetUsers(accountId: Swift.String, additionalInfo: Swift.String? = nil, count: Swift.String? = nil, domainUsersOnly: Swift.String? = nil, email: Swift.String? = nil, emailSubstring: Swift.String? = nil, groupId: Swift.String? = nil, includeUsersettingsForCsv: Swift.String? = nil, loginStatus: Swift.String? = nil, notGroupId: Swift.String? = nil, startPosition: Swift.String? = nil, status: Swift.String? = nil, userNameSubstring: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIUserInformationList?, _ error: Swift.Error?) -> Swift.Void))
  open class func usersGetUsersWithRequestBuilder(accountId: Swift.String, additionalInfo: Swift.String? = nil, count: Swift.String? = nil, domainUsersOnly: Swift.String? = nil, email: Swift.String? = nil, emailSubstring: Swift.String? = nil, groupId: Swift.String? = nil, includeUsersettingsForCsv: Swift.String? = nil, loginStatus: Swift.String? = nil, notGroupId: Swift.String? = nil, startPosition: Swift.String? = nil, status: Swift.String? = nil, userNameSubstring: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIUserInformationList>
  open class func usersPostUsers(accountId: Swift.String, body: DocuSignAPI.DSAPINewUsersDefinition? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPINewUsersSummary?, _ error: Swift.Error?) -> Swift.Void))
  open class func usersPostUsersWithRequestBuilder(accountId: Swift.String, body: DocuSignAPI.DSAPINewUsersDefinition? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPINewUsersSummary>
  open class func usersPutUsers(accountId: Swift.String, body: DocuSignAPI.DSAPIUserInformationList? = nil, allowAllLanguages: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIUserInformationList?, _ error: Swift.Error?) -> Swift.Void))
  open class func usersPutUsersWithRequestBuilder(accountId: Swift.String, body: DocuSignAPI.DSAPIUserInformationList? = nil, allowAllLanguages: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIUserInformationList>
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers open class BulkProcessDataAPI {
  open class func bulkProcessDeleteBulkProcessList(accountId: Swift.String, bulkProcessListId: Swift.String, processAction: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPIBulkProcessResult?, _ error: Swift.Error?) -> Swift.Void))
  open class func bulkProcessDeleteBulkProcessListWithRequestBuilder(accountId: Swift.String, bulkProcessListId: Swift.String, processAction: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIBulkProcessResult>
  open class func bulkProcessDeleteBulkProcessLists(accountId: Swift.String, processAction: Swift.String, body: DocuSignAPI.DSAPIBulkProcessingLists? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIBulkProcessResult?, _ error: Swift.Error?) -> Swift.Void))
  open class func bulkProcessDeleteBulkProcessListsWithRequestBuilder(accountId: Swift.String, processAction: Swift.String, body: DocuSignAPI.DSAPIBulkProcessingLists? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIBulkProcessResult>
  open class func bulkProcessGetBulkProcessList(accountId: Swift.String, bulkProcessListId: Swift.String, processAction: Swift.String, completion: @escaping ((_ data: Swift.Void?, _ error: Swift.Error?) -> Swift.Void))
  open class func bulkProcessGetBulkProcessListWithRequestBuilder(accountId: Swift.String, bulkProcessListId: Swift.String, processAction: Swift.String) -> DocuSignAPI.RequestBuilder<Swift.Void>
  open class func bulkProcessGetBulkProcessLists(accountId: Swift.String, processAction: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPIBulkProcessingListSummaries?, _ error: Swift.Error?) -> Swift.Void))
  open class func bulkProcessGetBulkProcessListsWithRequestBuilder(accountId: Swift.String, processAction: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIBulkProcessingListSummaries>
  open class func bulkProcessPostBulkProcessRequest(accountId: Swift.String, processAction: Swift.String, completion: @escaping ((_ data: Swift.Void?, _ error: Swift.Error?) -> Swift.Void))
  open class func bulkProcessPostBulkProcessRequestWithRequestBuilder(accountId: Swift.String, processAction: Swift.String) -> DocuSignAPI.RequestBuilder<Swift.Void>
  open class func bulkProcessPostBulkProcessRequestToQueue(accountId: Swift.String, bulkProcessListId: Swift.String, processAction: Swift.String, body: DocuSignAPI.DSAPIBulkProcessRequest? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIBulkProcessResponse?, _ error: Swift.Error?) -> Swift.Void))
  open class func bulkProcessPostBulkProcessRequestToQueueWithRequestBuilder(accountId: Swift.String, bulkProcessListId: Swift.String, processAction: Swift.String, body: DocuSignAPI.DSAPIBulkProcessRequest? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIBulkProcessResponse>
  open class func bulkProcessPutBulkProcessList(accountId: Swift.String, bulkProcessListId: Swift.String, processAction: Swift.String, completion: @escaping ((_ data: Swift.Void?, _ error: Swift.Error?) -> Swift.Void))
  open class func bulkProcessPutBulkProcessListWithRequestBuilder(accountId: Swift.String, bulkProcessListId: Swift.String, processAction: Swift.String) -> DocuSignAPI.RequestBuilder<Swift.Void>
  @objc deinit
}
public struct DSAPIListItem : Swift.Codable {
  @DocuSignAPI.BoolFromString public var selected: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var selectedMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var text: Swift.String?
  public var textMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var value: Swift.String?
  public var valueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public init(selected: Swift.Bool = false, selectedMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, text: Swift.String? = nil, textMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, value: Swift.String? = nil, valueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIBulkEnvelope : Swift.Codable {
  public var bulkRecipientRow: Swift.String?
  public var bulkStatus: Swift.String?
  public var email: Swift.String?
  public var envelopeId: Swift.String?
  public var envelopeUri: Foundation.URL?
  public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  public var name: Swift.String?
  public var submittedDateTime: Foundation.Date?
  public var transactionId: Swift.String?
  public init(bulkRecipientRow: Swift.String? = nil, bulkStatus: Swift.String? = nil, email: Swift.String? = nil, envelopeId: Swift.String? = nil, envelopeUri: Foundation.URL? = nil, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, name: Swift.String? = nil, submittedDateTime: Foundation.Date? = nil, transactionId: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers open class DiagnosticsAPI {
  open class func aPIRequestLogDeleteRequestLogs(completion: @escaping ((_ data: Swift.Void?, _ error: Swift.Error?) -> Swift.Void))
  open class func aPIRequestLogDeleteRequestLogsWithRequestBuilder() -> DocuSignAPI.RequestBuilder<Swift.Void>
  open class func aPIRequestLogGetRequestLog(requestLogId: Swift.String, completion: @escaping ((_ data: Foundation.Data?, _ error: Swift.Error?) -> Swift.Void))
  open class func aPIRequestLogGetRequestLogWithRequestBuilder(requestLogId: Swift.String) -> DocuSignAPI.RequestBuilder<Foundation.Data>
  open class func aPIRequestLogGetRequestLogSettings(completion: @escaping ((_ data: DocuSignAPI.DSAPIDiagnosticsSettingsInformation?, _ error: Swift.Error?) -> Swift.Void))
  open class func aPIRequestLogGetRequestLogSettingsWithRequestBuilder() -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIDiagnosticsSettingsInformation>
  open class func aPIRequestLogGetRequestLogs(encoding: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIApiRequestLogsResult?, _ error: Swift.Error?) -> Swift.Void))
  open class func aPIRequestLogGetRequestLogsWithRequestBuilder(encoding: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIApiRequestLogsResult>
  open class func aPIRequestLogPutRequestLogSettings(body: DocuSignAPI.DSAPIDiagnosticsSettingsInformation? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIDiagnosticsSettingsInformation?, _ error: Swift.Error?) -> Swift.Void))
  open class func aPIRequestLogPutRequestLogSettingsWithRequestBuilder(body: DocuSignAPI.DSAPIDiagnosticsSettingsInformation? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIDiagnosticsSettingsInformation>
  open class func serviceInformationGetResourceInformation(completion: @escaping ((_ data: DocuSignAPI.DSAPIResourceInformation?, _ error: Swift.Error?) -> Swift.Void))
  open class func serviceInformationGetResourceInformationWithRequestBuilder() -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIResourceInformation>
  open class func serviceInformationGetServiceInformation(completion: @escaping ((_ data: DocuSignAPI.DSAPIServiceInformation?, _ error: Swift.Error?) -> Swift.Void))
  open class func serviceInformationGetServiceInformationWithRequestBuilder() -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIServiceInformation>
  @objc deinit
}
public struct DSAPISmartContractInformation : Swift.Codable {
  public var code: Swift.String?
  public var uri: Foundation.URL?
  public init(code: Swift.String? = nil, uri: Foundation.URL? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIFileType : Swift.Codable {
  public var fileExtension: Swift.String?
  public var mimeType: Swift.String?
  public init(fileExtension: Swift.String? = nil, mimeType: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPITemplateRecipients : Swift.Codable {
  public var agents: [DocuSignAPI.DSAPIAgent]?
  public var carbonCopies: [DocuSignAPI.DSAPICarbonCopy]?
  public var certifiedDeliveries: [DocuSignAPI.DSAPICertifiedDelivery]?
  public var currentRoutingOrder: Swift.String?
  public var editors: [DocuSignAPI.DSAPIEditor]?
  public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  public var inPersonSigners: [DocuSignAPI.DSAPIInPersonSigner]?
  public var intermediaries: [DocuSignAPI.DSAPIIntermediary]?
  public var notaries: [DocuSignAPI.DSAPINotaryRecipient]?
  public var recipientCount: Swift.String?
  public var seals: [DocuSignAPI.DSAPISealSign]?
  public var signers: [DocuSignAPI.DSAPISigner]?
  public var witnesses: [DocuSignAPI.DSAPIWitness]?
  public init(agents: [DocuSignAPI.DSAPIAgent]? = nil, carbonCopies: [DocuSignAPI.DSAPICarbonCopy]? = nil, certifiedDeliveries: [DocuSignAPI.DSAPICertifiedDelivery]? = nil, currentRoutingOrder: Swift.String? = nil, editors: [DocuSignAPI.DSAPIEditor]? = nil, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, inPersonSigners: [DocuSignAPI.DSAPIInPersonSigner]? = nil, intermediaries: [DocuSignAPI.DSAPIIntermediary]? = nil, notaries: [DocuSignAPI.DSAPINotaryRecipient]? = nil, recipientCount: Swift.String? = nil, seals: [DocuSignAPI.DSAPISealSign]? = nil, signers: [DocuSignAPI.DSAPISigner]? = nil, witnesses: [DocuSignAPI.DSAPIWitness]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIFolderSharedItem : Swift.Codable {
  public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  public var folderId: Swift.String?
  public var name: Swift.String?
  public var owner: DocuSignAPI.DSAPIUserInfo?
  public var parentFolderId: Swift.String?
  public var parentFolderUri: Foundation.URL?
  public var shared: Swift.String?
  public var sharedGroups: [DocuSignAPI.DSAPIMemberGroupSharedItem]?
  public var sharedUsers: [DocuSignAPI.DSAPIUserSharedItem]?
  public var uri: Foundation.URL?
  public var user: DocuSignAPI.DSAPIUserInfo?
  public init(errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, folderId: Swift.String? = nil, name: Swift.String? = nil, owner: DocuSignAPI.DSAPIUserInfo? = nil, parentFolderId: Swift.String? = nil, parentFolderUri: Foundation.URL? = nil, shared: Swift.String? = nil, sharedGroups: [DocuSignAPI.DSAPIMemberGroupSharedItem]? = nil, sharedUsers: [DocuSignAPI.DSAPIUserSharedItem]? = nil, uri: Foundation.URL? = nil, user: DocuSignAPI.DSAPIUserInfo? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIConnectUserInfo : Swift.Codable {
  public var email: Swift.String?
  public var isIncluded: Swift.String?
  public var userId: Swift.String?
  public var userName: Swift.String?
  public init(email: Swift.String? = nil, isIncluded: Swift.String? = nil, userId: Swift.String? = nil, userName: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPICloudStorageProvider : Swift.Codable {
  public var authenticationUrl: Foundation.URL?
  public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  public var redirectUrl: Foundation.URL?
  public var service: Swift.String?
  public var serviceId: Swift.String?
  public init(authenticationUrl: Foundation.URL? = nil, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, redirectUrl: Foundation.URL? = nil, service: Swift.String? = nil, serviceId: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIBillingPaymentItem : Swift.Codable {
  public var amount: Swift.String?
  public var _description: Swift.String?
  public var paymentDate: Foundation.Date?
  public var paymentId: Swift.String?
  public var paymentNumber: Swift.String?
  public init(amount: Swift.String? = nil, _description: Swift.String? = nil, paymentDate: Foundation.Date? = nil, paymentId: Swift.String? = nil, paymentNumber: Swift.String? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case amount
    case _description
    case paymentDate
    case paymentId
    case paymentNumber
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIPaymentGatewayAccountsInfo : Swift.Codable {
  public var paymentGatewayAccounts: [DocuSignAPI.DSAPIPaymentGatewayAccount]?
  public init(paymentGatewayAccounts: [DocuSignAPI.DSAPIPaymentGatewayAccount]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIBillingPlanResponse : Swift.Codable {
  public var billingPlan: DocuSignAPI.DSAPIBillingPlan?
  public var successorPlans: [DocuSignAPI.DSAPIBillingPlan]?
  public init(billingPlan: DocuSignAPI.DSAPIBillingPlan? = nil, successorPlans: [DocuSignAPI.DSAPIBillingPlan]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIFoldersRequest : Swift.Codable {
  public var envelopeIds: [Swift.String]?
  public var folders: [DocuSignAPI.DSAPIFolder]?
  public var fromFolderId: Swift.String?
  public init(envelopeIds: [Swift.String]? = nil, folders: [DocuSignAPI.DSAPIFolder]? = nil, fromFolderId: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIConnectFailureResults : Swift.Codable {
  public var retryQueue: [DocuSignAPI.DSAPIConnectFailureResult]?
  public init(retryQueue: [DocuSignAPI.DSAPIConnectFailureResult]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers open class PowerFormsAPI {
  open class func powerFormsDeletePowerForm(accountId: Swift.String, powerFormId: Swift.String, completion: @escaping ((_ data: Swift.Void?, _ error: Swift.Error?) -> Swift.Void))
  open class func powerFormsDeletePowerFormWithRequestBuilder(accountId: Swift.String, powerFormId: Swift.String) -> DocuSignAPI.RequestBuilder<Swift.Void>
  open class func powerFormsDeletePowerFormsList(accountId: Swift.String, body: DocuSignAPI.DSAPIPowerFormsRequest? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIPowerFormsResponse?, _ error: Swift.Error?) -> Swift.Void))
  open class func powerFormsDeletePowerFormsListWithRequestBuilder(accountId: Swift.String, body: DocuSignAPI.DSAPIPowerFormsRequest? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIPowerFormsResponse>
  open class func powerFormsGetPowerForm(accountId: Swift.String, powerFormId: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPIPowerForm?, _ error: Swift.Error?) -> Swift.Void))
  open class func powerFormsGetPowerFormWithRequestBuilder(accountId: Swift.String, powerFormId: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIPowerForm>
  open class func powerFormsGetPowerFormFormData(accountId: Swift.String, powerFormId: Swift.String, dataLayout: Swift.String? = nil, fromDate: Swift.String? = nil, toDate: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIPowerFormsFormDataResponse?, _ error: Swift.Error?) -> Swift.Void))
  open class func powerFormsGetPowerFormFormDataWithRequestBuilder(accountId: Swift.String, powerFormId: Swift.String, dataLayout: Swift.String? = nil, fromDate: Swift.String? = nil, toDate: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIPowerFormsFormDataResponse>
  open class func powerFormsGetPowerFormsList(accountId: Swift.String, fromDate: Swift.String? = nil, order: Swift.String? = nil, orderBy: Swift.String? = nil, toDate: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIPowerFormsResponse?, _ error: Swift.Error?) -> Swift.Void))
  open class func powerFormsGetPowerFormsListWithRequestBuilder(accountId: Swift.String, fromDate: Swift.String? = nil, order: Swift.String? = nil, orderBy: Swift.String? = nil, toDate: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIPowerFormsResponse>
  open class func powerFormsGetPowerFormsSenders(accountId: Swift.String, startPosition: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIPowerFormSendersResponse?, _ error: Swift.Error?) -> Swift.Void))
  open class func powerFormsGetPowerFormsSendersWithRequestBuilder(accountId: Swift.String, startPosition: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIPowerFormSendersResponse>
  open class func powerFormsPostPowerForm(accountId: Swift.String, body: DocuSignAPI.DSAPIPowerForm? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIPowerForm?, _ error: Swift.Error?) -> Swift.Void))
  open class func powerFormsPostPowerFormWithRequestBuilder(accountId: Swift.String, body: DocuSignAPI.DSAPIPowerForm? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIPowerForm>
  open class func powerFormsPutPowerForm(accountId: Swift.String, powerFormId: Swift.String, body: DocuSignAPI.DSAPIPowerForm? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIPowerForm?, _ error: Swift.Error?) -> Swift.Void))
  open class func powerFormsPutPowerFormWithRequestBuilder(accountId: Swift.String, powerFormId: Swift.String, body: DocuSignAPI.DSAPIPowerForm? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIPowerForm>
  @objc deinit
}
public struct DSAPICaptiveRecipient : Swift.Codable {
  public var clientUserId: Swift.String?
  public var email: Swift.String?
  public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  public var userName: Swift.String?
  public init(clientUserId: Swift.String? = nil, email: Swift.String? = nil, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, userName: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIUserPasswordInformation : Swift.Codable {
  public var currentPassword: Swift.String?
  public var email: Swift.String?
  public var forgottenPasswordInfo: DocuSignAPI.DSAPIForgottenPasswordInformation?
  public var newPassword: Swift.String?
  public init(currentPassword: Swift.String? = nil, email: Swift.String? = nil, forgottenPasswordInfo: DocuSignAPI.DSAPIForgottenPasswordInformation? = nil, newPassword: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIRecipientPhoneAuthentication : Swift.Codable {
  public var recipMayProvideNumber: Swift.String?
  public var recipMayProvideNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var recordVoicePrint: Swift.String?
  public var recordVoicePrintMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var senderProvidedNumbers: [Swift.String]?
  public var senderProvidedNumbersMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var validateRecipProvidedNumber: Swift.String?
  public var validateRecipProvidedNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public init(recipMayProvideNumber: Swift.String? = nil, recipMayProvideNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, recordVoicePrint: Swift.String? = nil, recordVoicePrintMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, senderProvidedNumbers: [Swift.String]? = nil, senderProvidedNumbersMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, validateRecipProvidedNumber: Swift.String? = nil, validateRecipProvidedNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @objcMembers public class DSAPISocialAuthentication : ObjectiveC.NSObject, Swift.Codable {
  @objc public var authentication: Swift.String?
  @objc public init(authentication: Swift.String? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIFolderItemResponse : Swift.Codable {
  public var endPosition: Swift.String?
  public var folderItems: [DocuSignAPI.DSAPIFolderItemV2]?
  public var nextUri: Foundation.URL?
  public var previousUri: Foundation.URL?
  public var resultSetSize: Swift.String?
  public var startPosition: Swift.String?
  public var totalRows: Swift.String?
  public init(endPosition: Swift.String? = nil, folderItems: [DocuSignAPI.DSAPIFolderItemV2]? = nil, nextUri: Foundation.URL? = nil, previousUri: Foundation.URL? = nil, resultSetSize: Swift.String? = nil, startPosition: Swift.String? = nil, totalRows: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIBulkSendErrorStatus : Swift.Codable {
  public var created: Swift.String?
  public var errorMessage: Swift.String?
  public var recipientEmails: [Swift.String]?
  public init(created: Swift.String? = nil, errorMessage: Swift.String? = nil, recipientEmails: [Swift.String]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPICommentHistoryResult : Swift.Codable {
  public var comments: [DocuSignAPI.DSAPIComment]?
  public var count: Swift.Int?
  public var endTimetoken: Swift.String?
  public var startTimetoken: Swift.String?
  public init(comments: [DocuSignAPI.DSAPIComment]? = nil, count: Swift.Int? = nil, endTimetoken: Swift.String? = nil, startTimetoken: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIAskAnAdmin : Swift.Codable {
  public var email: Swift.String?
  public var message: Swift.String?
  public var name: Swift.String?
  public var phone: Swift.String?
  public init(email: Swift.String? = nil, message: Swift.String? = nil, name: Swift.String? = nil, phone: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @objcMembers public class DSAPIEnvelopeDocument : ObjectiveC.NSObject, Swift.Codable {
  @objc public var addedRecipientIds: [Swift.String]?
  @objc public var attachmentTabId: Swift.String?
  @objc @DocuSignAPI.BoolFromString public var authoritativeCopy: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var authoritativeCopyMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var availableDocumentTypes: [DocuSignAPI.DSAPISignatureType]?
  @objc @DocuSignAPI.BoolFromString public var containsPdfFormFields: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var display: Swift.String?
  @objc public var displayMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var documentBase64: Swift.String?
  @objc public var documentFields: [DocuSignAPI.DSAPINameValue]?
  @objc public var documentId: Swift.String?
  @objc public var documentIdGuid: Swift.String?
  @objc public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  @objc @DocuSignAPI.BoolFromString public var includeInDownload: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var includeInDownloadMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var name: Swift.String?
  @objc public var nameMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var order: Swift.String?
  @objc public var pages: [DocuSignAPI.DSAPIPage]?
  @objc public var signerMustAcknowledge: Swift.String?
  @objc public var signerMustAcknowledgeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var sizeBytes: Swift.String?
  @objc @DocuSignAPI.BoolFromString public var templateLocked: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc @DocuSignAPI.BoolFromString public var templateRequired: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var type: Swift.String?
  @objc public var uri: Foundation.URL?
  public init(addedRecipientIds: [Swift.String]? = nil, attachmentTabId: Swift.String? = nil, authoritativeCopy: Swift.Bool = false, authoritativeCopyMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, availableDocumentTypes: [DocuSignAPI.DSAPISignatureType]? = nil, containsPdfFormFields: Swift.Bool = false, display: Swift.String? = nil, displayMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, documentBase64: Swift.String? = nil, documentFields: [DocuSignAPI.DSAPINameValue]? = nil, documentId: Swift.String? = nil, documentIdGuid: Swift.String? = nil, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, includeInDownload: Swift.Bool = false, includeInDownloadMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, name: Swift.String? = nil, nameMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, order: Swift.String? = nil, pages: [DocuSignAPI.DSAPIPage]? = nil, signerMustAcknowledge: Swift.String? = nil, signerMustAcknowledgeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, sizeBytes: Swift.String? = nil, templateLocked: Swift.Bool = false, templateRequired: Swift.Bool = false, type: Swift.String? = nil, uri: Foundation.URL? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIBulkSendingCopyTab : Swift.Codable {
  public var initialValue: Swift.String?
  public var tabLabel: Swift.String?
  public init(initialValue: Swift.String? = nil, tabLabel: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIAccountBillingPlanResponse : Swift.Codable {
  public var billingAddress: DocuSignAPI.DSAPIAccountAddress?
  @DocuSignAPI.BoolFromString public var billingAddressIsCreditCardAddress: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var billingPlan: DocuSignAPI.DSAPIAccountBillingPlan?
  public var creditCardInformation: DocuSignAPI.DSAPICreditCardInformation?
  public var directDebitProcessorInformation: DocuSignAPI.DSAPIDirectDebitProcessorInformation?
  public var downgradePlanInformation: DocuSignAPI.DSAPIDowngradePlanUpdateResponse?
  public var downgradeRequestInformation: DocuSignAPI.DSAPIDowngradeRequestInformation?
  public var entityInformation: DocuSignAPI.DSAPIBillingEntityInformationResponse?
  public var paymentMethod: Swift.String?
  public var paymentProcessorInformation: DocuSignAPI.DSAPIPaymentProcessorInformation?
  public var referralInformation: DocuSignAPI.DSAPIReferralInformation?
  public var successorPlans: [DocuSignAPI.DSAPIBillingPlan]?
  public var taxExemptId: Swift.String?
  public init(billingAddress: DocuSignAPI.DSAPIAccountAddress? = nil, billingAddressIsCreditCardAddress: Swift.Bool = false, billingPlan: DocuSignAPI.DSAPIAccountBillingPlan? = nil, creditCardInformation: DocuSignAPI.DSAPICreditCardInformation? = nil, directDebitProcessorInformation: DocuSignAPI.DSAPIDirectDebitProcessorInformation? = nil, downgradePlanInformation: DocuSignAPI.DSAPIDowngradePlanUpdateResponse? = nil, downgradeRequestInformation: DocuSignAPI.DSAPIDowngradeRequestInformation? = nil, entityInformation: DocuSignAPI.DSAPIBillingEntityInformationResponse? = nil, paymentMethod: Swift.String? = nil, paymentProcessorInformation: DocuSignAPI.DSAPIPaymentProcessorInformation? = nil, referralInformation: DocuSignAPI.DSAPIReferralInformation? = nil, successorPlans: [DocuSignAPI.DSAPIBillingPlan]? = nil, taxExemptId: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIWorkspaceFolderContents : Swift.Codable {
  public var endPosition: Swift.String?
  public var folder: DocuSignAPI.DSAPIWorkspaceItem?
  public var items: [DocuSignAPI.DSAPIWorkspaceItem]?
  public var parentFolders: [DocuSignAPI.DSAPIWorkspaceItem]?
  public var resultSetSize: Swift.String?
  public var startPosition: Swift.String?
  public var totalSetSize: Swift.String?
  public var workspaceId: Swift.String?
  public init(endPosition: Swift.String? = nil, folder: DocuSignAPI.DSAPIWorkspaceItem? = nil, items: [DocuSignAPI.DSAPIWorkspaceItem]? = nil, parentFolders: [DocuSignAPI.DSAPIWorkspaceItem]? = nil, resultSetSize: Swift.String? = nil, startPosition: Swift.String? = nil, totalSetSize: Swift.String? = nil, workspaceId: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIDocumentHtmlDefinitionOriginals : Swift.Codable {
  public var htmlDefinitions: [DocuSignAPI.DSAPIDocumentHtmlDefinitionOriginal]?
  public init(htmlDefinitions: [DocuSignAPI.DSAPIDocumentHtmlDefinitionOriginal]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers open class CloudStorageAPI {
  open class func cloudStorageDeleteCloudStorage(accountId: Swift.String, serviceId: Swift.String, userId: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPICloudStorageProviders?, _ error: Swift.Error?) -> Swift.Void))
  open class func cloudStorageDeleteCloudStorageWithRequestBuilder(accountId: Swift.String, serviceId: Swift.String, userId: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPICloudStorageProviders>
  open class func cloudStorageDeleteCloudStorageProviders(accountId: Swift.String, userId: Swift.String, body: DocuSignAPI.DSAPICloudStorageProviders? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPICloudStorageProviders?, _ error: Swift.Error?) -> Swift.Void))
  open class func cloudStorageDeleteCloudStorageProvidersWithRequestBuilder(accountId: Swift.String, userId: Swift.String, body: DocuSignAPI.DSAPICloudStorageProviders? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPICloudStorageProviders>
  open class func cloudStorageFolderGetCloudStorageFolder(accountId: Swift.String, folderId: Swift.String, serviceId: Swift.String, userId: Swift.String, cloudStorageFolderPath: Swift.String? = nil, cloudStorageFolderidPlain: Swift.String? = nil, count: Swift.String? = nil, order: Swift.String? = nil, orderBy: Swift.String? = nil, searchText: Swift.String? = nil, startPosition: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIExternalFolder?, _ error: Swift.Error?) -> Swift.Void))
  open class func cloudStorageFolderGetCloudStorageFolderWithRequestBuilder(accountId: Swift.String, folderId: Swift.String, serviceId: Swift.String, userId: Swift.String, cloudStorageFolderPath: Swift.String? = nil, cloudStorageFolderidPlain: Swift.String? = nil, count: Swift.String? = nil, order: Swift.String? = nil, orderBy: Swift.String? = nil, searchText: Swift.String? = nil, startPosition: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIExternalFolder>
  open class func cloudStorageFolderGetCloudStorageFolderAll(accountId: Swift.String, serviceId: Swift.String, userId: Swift.String, cloudStorageFolderPath: Swift.String? = nil, count: Swift.String? = nil, order: Swift.String? = nil, orderBy: Swift.String? = nil, searchText: Swift.String? = nil, startPosition: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIExternalFolder?, _ error: Swift.Error?) -> Swift.Void))
  open class func cloudStorageFolderGetCloudStorageFolderAllWithRequestBuilder(accountId: Swift.String, serviceId: Swift.String, userId: Swift.String, cloudStorageFolderPath: Swift.String? = nil, count: Swift.String? = nil, order: Swift.String? = nil, orderBy: Swift.String? = nil, searchText: Swift.String? = nil, startPosition: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIExternalFolder>
  open class func cloudStorageGetCloudStorage(accountId: Swift.String, serviceId: Swift.String, userId: Swift.String, redirectUrl: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPICloudStorageProviders?, _ error: Swift.Error?) -> Swift.Void))
  open class func cloudStorageGetCloudStorageWithRequestBuilder(accountId: Swift.String, serviceId: Swift.String, userId: Swift.String, redirectUrl: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPICloudStorageProviders>
  open class func cloudStorageGetCloudStorageProviders(accountId: Swift.String, userId: Swift.String, redirectUrl: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPICloudStorageProviders?, _ error: Swift.Error?) -> Swift.Void))
  open class func cloudStorageGetCloudStorageProvidersWithRequestBuilder(accountId: Swift.String, userId: Swift.String, redirectUrl: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPICloudStorageProviders>
  open class func cloudStoragePostCloudStorage(accountId: Swift.String, userId: Swift.String, body: DocuSignAPI.DSAPICloudStorageProviders? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPICloudStorageProviders?, _ error: Swift.Error?) -> Swift.Void))
  open class func cloudStoragePostCloudStorageWithRequestBuilder(accountId: Swift.String, userId: Swift.String, body: DocuSignAPI.DSAPICloudStorageProviders? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPICloudStorageProviders>
  @objc deinit
}
@objc @objcMembers public class DSAPIUserInfo : ObjectiveC.NSObject, Swift.Codable {
  @objc public var accountId: Swift.String?
  @objc public var accountName: Swift.String?
  @objc public var activationAccessCode: Swift.String?
  @objc public var email: Swift.String?
  @objc public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  @objc @DocuSignAPI.BoolFromString public var loginStatus: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var membershipId: Swift.String?
  @objc @DocuSignAPI.BoolFromString public var sendActivationEmail: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var uri: Foundation.URL?
  @objc public var userId: Swift.String?
  @objc public var userName: Swift.String?
  @objc public var userStatus: Swift.String?
  @objc public var userType: Swift.String?
  @objc public init(accountId: Swift.String? = nil, accountName: Swift.String? = nil, activationAccessCode: Swift.String? = nil, email: Swift.String? = nil, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, loginStatus: Swift.Bool = false, membershipId: Swift.String? = nil, sendActivationEmail: Swift.Bool = false, uri: Foundation.URL? = nil, userId: Swift.String? = nil, userName: Swift.String? = nil, userStatus: Swift.String? = nil, userType: Swift.String? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIRecipientRules : Swift.Codable {
  public var conditionalRecipients: [DocuSignAPI.DSAPIConditionalRecipientRule]?
  public init(conditionalRecipients: [DocuSignAPI.DSAPIConditionalRecipientRule]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIUserInfoList : Swift.Codable {
  public var users: [DocuSignAPI.DSAPIUserInfo]?
  public init(users: [DocuSignAPI.DSAPIUserInfo]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIBillingEntityInformationResponse : Swift.Codable {
  public var billingProfile: Swift.String?
  public var entityName: Swift.String?
  public var externalEntityId: Swift.String?
  public var isExternallyBilled: Swift.String?
  public init(billingProfile: Swift.String? = nil, entityName: Swift.String? = nil, externalEntityId: Swift.String? = nil, isExternallyBilled: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIDiagnosticsSettingsInformation : Swift.Codable {
  public var apiRequestLogging: Swift.String?
  public var apiRequestLogMaxEntries: Swift.String?
  public var apiRequestLogRemainingEntries: Swift.String?
  public init(apiRequestLogging: Swift.String? = nil, apiRequestLogMaxEntries: Swift.String? = nil, apiRequestLogRemainingEntries: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIBulkSendResponse : Swift.Codable {
  public var batchId: Swift.String?
  public var batchName: Swift.String?
  public var batchSize: Swift.String?
  public var envelopeOrTemplateId: Swift.String?
  public var errorDetails: [Swift.String]?
  public var errors: [Swift.String]?
  public var queueLimit: Swift.String?
  public var totalQueued: Swift.String?
  public init(batchId: Swift.String? = nil, batchName: Swift.String? = nil, batchSize: Swift.String? = nil, envelopeOrTemplateId: Swift.String? = nil, errorDetails: [Swift.String]? = nil, errors: [Swift.String]? = nil, queueLimit: Swift.String? = nil, totalQueued: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIJurisdiction : Swift.Codable {
  @DocuSignAPI.BoolFromString public var allowSystemCreatedSeal: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  @DocuSignAPI.BoolFromString public var allowUserUploadedSeal: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  @DocuSignAPI.BoolFromString public var commissionIdInSeal: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var county: Swift.String?
  @DocuSignAPI.BoolFromString public var countyInSeal: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  @DocuSignAPI.BoolFromString public var enabled: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var jurisdictionId: Swift.String?
  public var name: Swift.String?
  @DocuSignAPI.BoolFromString public var notaryPublicInSeal: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  @DocuSignAPI.BoolFromString public var stateNameInSeal: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public init(allowSystemCreatedSeal: Swift.Bool = false, allowUserUploadedSeal: Swift.Bool = false, commissionIdInSeal: Swift.Bool = false, county: Swift.String? = nil, countyInSeal: Swift.Bool = false, enabled: Swift.Bool = false, jurisdictionId: Swift.String? = nil, name: Swift.String? = nil, notaryPublicInSeal: Swift.Bool = false, stateNameInSeal: Swift.Bool = false)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIConditionalRecipientRuleFilter : Swift.Codable {
  public var _operator: Swift.String?
  public var recipientId: Swift.String?
  public var scope: Swift.String?
  public var tabId: Swift.String?
  public var tabLabel: Swift.String?
  public var tabType: Swift.String?
  public var value: Swift.String?
  public init(_operator: Swift.String? = nil, recipientId: Swift.String? = nil, scope: Swift.String? = nil, tabId: Swift.String? = nil, tabLabel: Swift.String? = nil, tabType: Swift.String? = nil, value: Swift.String? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case _operator
    case recipientId
    case scope
    case tabId
    case tabLabel
    case tabType
    case value
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIAccountPasswordLockoutDurationType : Swift.Codable {
  public var options: [Swift.String]?
  public init(options: [Swift.String]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIChunkedUploadPart : Swift.Codable {
  public var sequence: Swift.String?
  public var size: Swift.String?
  public init(sequence: Swift.String? = nil, size: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPICurrencyFeatureSetPrice : Swift.Codable {
  public var currencyCode: Swift.String?
  public var currencySymbol: Swift.String?
  public var envelopeFee: Swift.String?
  public var fixedFee: Swift.String?
  public var seatFee: Swift.String?
  public init(currencyCode: Swift.String? = nil, currencySymbol: Swift.String? = nil, envelopeFee: Swift.String? = nil, fixedFee: Swift.String? = nil, seatFee: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPISignatureGroup : Swift.Codable {
  public var groupId: Swift.String?
  public var groupName: Swift.String?
  public var rights: Swift.String?
  public init(groupId: Swift.String? = nil, groupName: Swift.String? = nil, rights: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPICurrencyPlanPrice : Swift.Codable {
  public var currencyCode: Swift.String?
  public var currencySymbol: Swift.String?
  public var perSeatPrice: Swift.String?
  public var supportedCardTypes: DocuSignAPI.DSAPICreditCardTypes?
  public var supportIncidentFee: Swift.String?
  public var supportPlanFee: Swift.String?
  public init(currencyCode: Swift.String? = nil, currencySymbol: Swift.String? = nil, perSeatPrice: Swift.String? = nil, supportedCardTypes: DocuSignAPI.DSAPICreditCardTypes? = nil, supportIncidentFee: Swift.String? = nil, supportPlanFee: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPINotificationDefaultSettings : Swift.Codable {
  public var senderEmailNotifications: DocuSignAPI.DSAPISenderEmailNotifications?
  public var signerEmailNotifications: DocuSignAPI.DSAPISignerEmailNotifications?
  public init(senderEmailNotifications: DocuSignAPI.DSAPISenderEmailNotifications? = nil, signerEmailNotifications: DocuSignAPI.DSAPISignerEmailNotifications? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIEnvelopeTransferRuleRequest : Swift.Codable {
  @DocuSignAPI.BoolFromString public var carbonCopyOriginalOwner: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  @DocuSignAPI.BoolFromString public var enabled: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var envelopeTransferRuleId: Swift.String?
  public var eventType: Swift.String?
  public var fromGroups: [DocuSignAPI.DSAPIGroup]?
  public var fromUsers: [DocuSignAPI.DSAPIUserInformation]?
  public var modifiedDate: Foundation.Date?
  public var modifiedUser: DocuSignAPI.DSAPIUserInformation?
  public var toFolder: DocuSignAPI.DSAPIFolder?
  public var toUser: DocuSignAPI.DSAPIUserInformation?
  public init(carbonCopyOriginalOwner: Swift.Bool = false, enabled: Swift.Bool = false, envelopeTransferRuleId: Swift.String? = nil, eventType: Swift.String? = nil, fromGroups: [DocuSignAPI.DSAPIGroup]? = nil, fromUsers: [DocuSignAPI.DSAPIUserInformation]? = nil, modifiedDate: Foundation.Date? = nil, modifiedUser: DocuSignAPI.DSAPIUserInformation? = nil, toFolder: DocuSignAPI.DSAPIFolder? = nil, toUser: DocuSignAPI.DSAPIUserInformation? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPISignatureProviderRequiredOption : Swift.Codable {
  public var requiredSignatureProviderOptionIds: [Swift.String]?
  public var signerType: Swift.String?
  public init(requiredSignatureProviderOptionIds: [Swift.String]? = nil, signerType: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIBrandResourcesList : Swift.Codable {
  public var resourcesContentTypes: [DocuSignAPI.DSAPIBrandResources]?
  public init(resourcesContentTypes: [DocuSignAPI.DSAPIBrandResources]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIAccountSignatureProviders : Swift.Codable {
  public var signatureProviders: [DocuSignAPI.DSAPIAccountSignatureProvider]?
  public init(signatureProviders: [DocuSignAPI.DSAPIAccountSignatureProvider]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIEnvelopeTransferRuleInformation : Swift.Codable {
  public var endPosition: Swift.String?
  public var envelopeTransferRules: [DocuSignAPI.DSAPIEnvelopeTransferRule]?
  public var nextUri: Foundation.URL?
  public var previousUri: Foundation.URL?
  public var resultSetSize: Swift.String?
  public var startPosition: Swift.String?
  public var totalSetSize: Swift.String?
  public init(endPosition: Swift.String? = nil, envelopeTransferRules: [DocuSignAPI.DSAPIEnvelopeTransferRule]? = nil, nextUri: Foundation.URL? = nil, previousUri: Foundation.URL? = nil, resultSetSize: Swift.String? = nil, startPosition: Swift.String? = nil, totalSetSize: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIMobileNotifierConfigurationInformation : Swift.Codable {
  public var mobileNotifierConfigurations: [DocuSignAPI.DSAPIMobileNotifierConfiguration]?
  public init(mobileNotifierConfigurations: [DocuSignAPI.DSAPIMobileNotifierConfiguration]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension DocuSignAPI.DSAPIRecipients {
  @objc dynamic public func toDictionary() -> Any?
}
public struct DSAPIRecipientPhoneNumber : Swift.Codable {
  public var countryCode: Swift.String?
  public var countryCodeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var number: Swift.String?
  public var numberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public init(countryCode: Swift.String? = nil, countryCodeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, number: Swift.String? = nil, numberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @objcMembers public class DSAPIOfflineAttributes : ObjectiveC.NSObject, Swift.Codable {
  @objc public var accountEsignId: Swift.String?
  @objc public var deviceModel: Swift.String?
  @objc public var deviceName: Swift.String?
  @objc public var gpsLatitude: Swift.String?
  @objc public var gpsLongitude: Swift.String?
  @objc public var offlineSigningHash: Swift.String?
  @objc override dynamic public init()
  @objc public init(accountEsignId: Swift.String? = nil, deviceModel: Swift.String? = nil, deviceName: Swift.String? = nil, gpsLatitude: Swift.String? = nil, gpsLongitude: Swift.String? = nil, offlineSigningHash: Swift.String? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIEventNotification : Swift.Codable {
  public var deliveryMode: Swift.String?
  public var envelopeEvents: [DocuSignAPI.DSAPIEnvelopeEvent]?
  public var eventData: DocuSignAPI.DSAPIConnectEventData?
  public var events: [Swift.String]?
  @DocuSignAPI.BoolFromString public var includeCertificateOfCompletion: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  @DocuSignAPI.BoolFromString public var includeCertificateWithSoap: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  @DocuSignAPI.BoolFromString public var includeDocumentFields: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  @DocuSignAPI.BoolFromString public var includeDocuments: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  @DocuSignAPI.BoolFromString public var includeEnvelopeVoidReason: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  @DocuSignAPI.BoolFromString public var includeHMAC: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  @DocuSignAPI.BoolFromString public var includeSenderAccountAsCustomField: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  @DocuSignAPI.BoolFromString public var includeTimeZone: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  @DocuSignAPI.BoolFromString public var loggingEnabled: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var recipientEvents: [DocuSignAPI.DSAPIRecipientEvent]?
  @DocuSignAPI.BoolFromString public var requireAcknowledgment: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  @DocuSignAPI.BoolFromString public var signMessageWithX509Cert: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var soapNameSpace: Swift.String?
  public var url: Foundation.URL?
  @DocuSignAPI.BoolFromString public var useSoapInterface: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public init(deliveryMode: Swift.String? = nil, envelopeEvents: [DocuSignAPI.DSAPIEnvelopeEvent]? = nil, eventData: DocuSignAPI.DSAPIConnectEventData? = nil, events: [Swift.String]? = nil, includeCertificateOfCompletion: Swift.Bool = false, includeCertificateWithSoap: Swift.Bool = false, includeDocumentFields: Swift.Bool = false, includeDocuments: Swift.Bool = false, includeEnvelopeVoidReason: Swift.Bool = false, includeHMAC: Swift.Bool = false, includeSenderAccountAsCustomField: Swift.Bool = false, includeTimeZone: Swift.Bool = false, loggingEnabled: Swift.Bool = false, recipientEvents: [DocuSignAPI.DSAPIRecipientEvent]? = nil, requireAcknowledgment: Swift.Bool = false, signMessageWithX509Cert: Swift.Bool = false, soapNameSpace: Swift.String? = nil, url: Foundation.URL? = nil, useSoapInterface: Swift.Bool = false)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIFileTypeList : Swift.Codable {
  public var fileTypes: [DocuSignAPI.DSAPIFileType]?
  public init(fileTypes: [DocuSignAPI.DSAPIFileType]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIBulkRecipient : Swift.Codable {
  public var accessCode: Swift.String?
  public var email: Swift.String?
  public var errorDetails: [DocuSignAPI.DSAPIErrorDetails]?
  public var identification: Swift.String?
  public var name: Swift.String?
  public var note: Swift.String?
  public var phoneNumber: Swift.String?
  public var recipientSignatureProviderInfo: [DocuSignAPI.DSAPIBulkRecipientSignatureProvider]?
  public var rowNumber: Swift.String?
  public var tabLabels: [DocuSignAPI.DSAPIBulkRecipientTabLabel]?
  public init(accessCode: Swift.String? = nil, email: Swift.String? = nil, errorDetails: [DocuSignAPI.DSAPIErrorDetails]? = nil, identification: Swift.String? = nil, name: Swift.String? = nil, note: Swift.String? = nil, phoneNumber: Swift.String? = nil, recipientSignatureProviderInfo: [DocuSignAPI.DSAPIBulkRecipientSignatureProvider]? = nil, rowNumber: Swift.String? = nil, tabLabels: [DocuSignAPI.DSAPIBulkRecipientTabLabel]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public protocol ResponseTelemetry : Swift.CustomStringConvertible {
  var requestStartTime: CoreFoundation.CFAbsoluteTime { get }
  var initialResponseTime: CoreFoundation.CFAbsoluteTime { get }
  var requestCompletedTime: CoreFoundation.CFAbsoluteTime { get }
  var latency: Foundation.TimeInterval { get }
  var requestDuration: Foundation.TimeInterval { get }
  var totalDuration: Foundation.TimeInterval { get }
}
public struct DSAPIEnvelopeNotificationRequest : Swift.Codable {
  public var expirations: DocuSignAPI.DSAPIExpirations?
  public var reminders: DocuSignAPI.DSAPIReminders?
  @DocuSignAPI.BoolFromString public var useAccountDefaults: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public init(expirations: DocuSignAPI.DSAPIExpirations? = nil, reminders: DocuSignAPI.DSAPIReminders? = nil, useAccountDefaults: Swift.Bool = false)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIAccountIdentityVerificationResponse : Swift.Codable {
  public var identityVerification: [DocuSignAPI.DSAPIAccountIdentityVerificationWorkflow]?
  public init(identityVerification: [DocuSignAPI.DSAPIAccountIdentityVerificationWorkflow]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers open class GroupsAPI {
  open class func brandsDeleteGroupBrands(accountId: Swift.String, groupId: Swift.String, body: DocuSignAPI.DSAPIBrandsRequest? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIBrandsResponse?, _ error: Swift.Error?) -> Swift.Void))
  open class func brandsDeleteGroupBrandsWithRequestBuilder(accountId: Swift.String, groupId: Swift.String, body: DocuSignAPI.DSAPIBrandsRequest? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIBrandsResponse>
  open class func brandsGetGroupBrands(accountId: Swift.String, groupId: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPIBrandsResponse?, _ error: Swift.Error?) -> Swift.Void))
  open class func brandsGetGroupBrandsWithRequestBuilder(accountId: Swift.String, groupId: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIBrandsResponse>
  open class func brandsPutGroupBrands(accountId: Swift.String, groupId: Swift.String, body: DocuSignAPI.DSAPIBrandsRequest? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIBrandsResponse?, _ error: Swift.Error?) -> Swift.Void))
  open class func brandsPutGroupBrandsWithRequestBuilder(accountId: Swift.String, groupId: Swift.String, body: DocuSignAPI.DSAPIBrandsRequest? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIBrandsResponse>
  open class func groupsDeleteGroupUsers(accountId: Swift.String, groupId: Swift.String, body: DocuSignAPI.DSAPIUserInfoList? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIUsersResponse?, _ error: Swift.Error?) -> Swift.Void))
  open class func groupsDeleteGroupUsersWithRequestBuilder(accountId: Swift.String, groupId: Swift.String, body: DocuSignAPI.DSAPIUserInfoList? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIUsersResponse>
  open class func groupsDeleteGroups(accountId: Swift.String, body: DocuSignAPI.DSAPIGroupInformation? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIGroupInformation?, _ error: Swift.Error?) -> Swift.Void))
  open class func groupsDeleteGroupsWithRequestBuilder(accountId: Swift.String, body: DocuSignAPI.DSAPIGroupInformation? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIGroupInformation>
  open class func groupsGetGroupUsers(accountId: Swift.String, groupId: Swift.String, count: Swift.String? = nil, startPosition: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIUsersResponse?, _ error: Swift.Error?) -> Swift.Void))
  open class func groupsGetGroupUsersWithRequestBuilder(accountId: Swift.String, groupId: Swift.String, count: Swift.String? = nil, startPosition: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIUsersResponse>
  open class func groupsGetGroups(accountId: Swift.String, count: Swift.String? = nil, groupType: Swift.String? = nil, includeUsercount: Swift.String? = nil, searchText: Swift.String? = nil, startPosition: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIGroupInformation?, _ error: Swift.Error?) -> Swift.Void))
  open class func groupsGetGroupsWithRequestBuilder(accountId: Swift.String, count: Swift.String? = nil, groupType: Swift.String? = nil, includeUsercount: Swift.String? = nil, searchText: Swift.String? = nil, startPosition: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIGroupInformation>
  open class func groupsPostGroups(accountId: Swift.String, body: DocuSignAPI.DSAPIGroupInformation? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIGroupInformation?, _ error: Swift.Error?) -> Swift.Void))
  open class func groupsPostGroupsWithRequestBuilder(accountId: Swift.String, body: DocuSignAPI.DSAPIGroupInformation? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIGroupInformation>
  open class func groupsPutGroupUsers(accountId: Swift.String, groupId: Swift.String, body: DocuSignAPI.DSAPIUserInfoList? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIUsersResponse?, _ error: Swift.Error?) -> Swift.Void))
  open class func groupsPutGroupUsersWithRequestBuilder(accountId: Swift.String, groupId: Swift.String, body: DocuSignAPI.DSAPIUserInfoList? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIUsersResponse>
  open class func groupsPutGroups(accountId: Swift.String, body: DocuSignAPI.DSAPIGroupInformation? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIGroupInformation?, _ error: Swift.Error?) -> Swift.Void))
  open class func groupsPutGroupsWithRequestBuilder(accountId: Swift.String, body: DocuSignAPI.DSAPIGroupInformation? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIGroupInformation>
  @objc deinit
}
public struct DSAPICommissionNumber : Swift.Codable {
  @DocuSignAPI.BoolFromString public var anchorAllowWhiteSpaceInCharacters: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var anchorAllowWhiteSpaceInCharactersMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var anchorCaseSensitive: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var anchorCaseSensitiveMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorHorizontalAlignment: Swift.String?
  public var anchorHorizontalAlignmentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var anchorIgnoreIfNotPresent: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var anchorIgnoreIfNotPresentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var anchorMatchWholeWord: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var anchorMatchWholeWordMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorString: Swift.String?
  public var anchorStringMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorTabProcessorVersion: Swift.String?
  public var anchorTabProcessorVersionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorUnits: Swift.String?
  public var anchorUnitsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorXOffset: Swift.String?
  public var anchorXOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorYOffset: Swift.String?
  public var anchorYOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var bold: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var boldMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var concealValueOnDocument: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var concealValueOnDocumentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var conditionalParentLabel: Swift.String?
  public var conditionalParentLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var conditionalParentValue: Swift.String?
  public var conditionalParentValueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var customTabId: Swift.String?
  public var customTabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var disableAutoSize: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var disableAutoSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var documentId: Swift.String?
  public var documentIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  public var font: Swift.String?
  public var fontColor: Swift.String?
  public var fontColorMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var fontMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var fontSize: Swift.String?
  public var fontSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var formOrder: Swift.String?
  public var formOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var formPageLabel: Swift.String?
  public var formPageLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var formPageNumber: Swift.String?
  public var formPageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var height: Swift.String?
  public var heightMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var italic: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var italicMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var localePolicy: DocuSignAPI.DSAPILocalePolicyTab?
  @DocuSignAPI.BoolFromString public var locked: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var lockedMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var maxLength: Swift.String?
  public var maxLengthMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var mergeField: DocuSignAPI.DSAPIMergeField?
  public var mergeFieldXml: Swift.String?
  public var name: Swift.String?
  public var nameMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var originalValue: Swift.String?
  public var originalValueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var pageNumber: Swift.String?
  public var pageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var recipientId: Swift.String?
  public var recipientIdGuid: Swift.String?
  public var recipientIdGuidMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var recipientIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var required: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var requiredMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var smartContractInformation: DocuSignAPI.DSAPISmartContractInformation?
  public var source: Swift.String?
  public var status: Swift.String?
  public var statusMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var tabGroupLabels: [Swift.String]?
  public var tabGroupLabelsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var tabId: Swift.String?
  public var tabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var tabLabel: Swift.String?
  public var tabLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var tabOrder: Swift.String?
  public var tabOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var tabType: Swift.String?
  public var tabTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var templateLocked: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var templateLockedMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var templateRequired: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var templateRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var tooltip: Swift.String?
  public var toolTipMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var underline: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var underlineMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var value: Swift.String?
  public var valueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var width: Swift.String?
  public var widthMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var xPosition: Swift.String?
  public var xPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var yPosition: Swift.String?
  public var yPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public init(anchorAllowWhiteSpaceInCharacters: Swift.Bool = false, anchorAllowWhiteSpaceInCharactersMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorCaseSensitive: Swift.Bool = false, anchorCaseSensitiveMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorHorizontalAlignment: Swift.String? = nil, anchorHorizontalAlignmentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorIgnoreIfNotPresent: Swift.Bool = false, anchorIgnoreIfNotPresentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorMatchWholeWord: Swift.Bool = false, anchorMatchWholeWordMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorString: Swift.String? = nil, anchorStringMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorTabProcessorVersion: Swift.String? = nil, anchorTabProcessorVersionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorUnits: Swift.String? = nil, anchorUnitsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorXOffset: Swift.String? = nil, anchorXOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorYOffset: Swift.String? = nil, anchorYOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, bold: Swift.Bool = false, boldMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, concealValueOnDocument: Swift.Bool = false, concealValueOnDocumentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, conditionalParentLabel: Swift.String? = nil, conditionalParentLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, conditionalParentValue: Swift.String? = nil, conditionalParentValueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, customTabId: Swift.String? = nil, customTabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, disableAutoSize: Swift.Bool = false, disableAutoSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, documentId: Swift.String? = nil, documentIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, font: Swift.String? = nil, fontColor: Swift.String? = nil, fontColorMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, fontMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, fontSize: Swift.String? = nil, fontSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formOrder: Swift.String? = nil, formOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formPageLabel: Swift.String? = nil, formPageLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formPageNumber: Swift.String? = nil, formPageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, height: Swift.String? = nil, heightMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, italic: Swift.Bool = false, italicMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, localePolicy: DocuSignAPI.DSAPILocalePolicyTab? = nil, locked: Swift.Bool = false, lockedMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, maxLength: Swift.String? = nil, maxLengthMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, mergeField: DocuSignAPI.DSAPIMergeField? = nil, mergeFieldXml: Swift.String? = nil, name: Swift.String? = nil, nameMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, originalValue: Swift.String? = nil, originalValueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, pageNumber: Swift.String? = nil, pageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, recipientId: Swift.String? = nil, recipientIdGuid: Swift.String? = nil, recipientIdGuidMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, recipientIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, required: Swift.Bool = false, requiredMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, smartContractInformation: DocuSignAPI.DSAPISmartContractInformation? = nil, source: Swift.String? = nil, status: Swift.String? = nil, statusMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabGroupLabels: [Swift.String]? = nil, tabGroupLabelsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabId: Swift.String? = nil, tabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabLabel: Swift.String? = nil, tabLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabOrder: Swift.String? = nil, tabOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabType: Swift.String? = nil, tabTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, templateLocked: Swift.Bool = false, templateLockedMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, templateRequired: Swift.Bool = false, templateRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tooltip: Swift.String? = nil, toolTipMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, underline: Swift.Bool = false, underlineMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, value: Swift.String? = nil, valueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, width: Swift.String? = nil, widthMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, xPosition: Swift.String? = nil, xPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, yPosition: Swift.String? = nil, yPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIRecipientGroup : Swift.Codable {
  public var groupMessage: Swift.String?
  public var groupName: Swift.String?
  public var recipients: [DocuSignAPI.DSAPIRecipientOption]?
  public init(groupMessage: Swift.String? = nil, groupName: Swift.String? = nil, recipients: [DocuSignAPI.DSAPIRecipientOption]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIAccountSignatureProviderOption : Swift.Codable {
  public var signatureProviderOptionDisplayName: Swift.String?
  public var signatureProviderOptionId: Swift.String?
  public var signatureProviderOptionName: Swift.String?
  public init(signatureProviderOptionDisplayName: Swift.String? = nil, signatureProviderOptionId: Swift.String? = nil, signatureProviderOptionName: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @objcMembers public class DSAPIListCustomField : ObjectiveC.NSObject, Swift.Codable {
  @objc public var configurationType: Swift.String?
  @objc public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  @objc public var fieldId: Swift.String?
  @objc public var listItems: [Swift.String]?
  @objc public var name: Swift.String?
  @objc @DocuSignAPI.BoolFromString public var required: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc @DocuSignAPI.BoolFromString public var show: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var value: Swift.String?
  @objc override dynamic public init()
  @objc public init(configurationType: Swift.String? = nil, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, fieldId: Swift.String? = nil, listItems: [Swift.String]? = nil, name: Swift.String? = nil, required: Swift.Bool = false, show: Swift.Bool = false, value: Swift.String? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers open class SigningGroupsAPI {
  open class func signingGroupsDeleteSigningGroupUsers(accountId: Swift.String, signingGroupId: Swift.String, body: DocuSignAPI.DSAPISigningGroupUsers? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPISigningGroupUsers?, _ error: Swift.Error?) -> Swift.Void))
  open class func signingGroupsDeleteSigningGroupUsersWithRequestBuilder(accountId: Swift.String, signingGroupId: Swift.String, body: DocuSignAPI.DSAPISigningGroupUsers? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPISigningGroupUsers>
  open class func signingGroupsDeleteSigningGroups(accountId: Swift.String, body: DocuSignAPI.DSAPISigningGroupInformation? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPISigningGroupInformation?, _ error: Swift.Error?) -> Swift.Void))
  open class func signingGroupsDeleteSigningGroupsWithRequestBuilder(accountId: Swift.String, body: DocuSignAPI.DSAPISigningGroupInformation? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPISigningGroupInformation>
  open class func signingGroupsGetSigningGroup(accountId: Swift.String, signingGroupId: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPISigningGroup?, _ error: Swift.Error?) -> Swift.Void))
  open class func signingGroupsGetSigningGroupWithRequestBuilder(accountId: Swift.String, signingGroupId: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPISigningGroup>
  open class func signingGroupsGetSigningGroupUsers(accountId: Swift.String, signingGroupId: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPISigningGroupUsers?, _ error: Swift.Error?) -> Swift.Void))
  open class func signingGroupsGetSigningGroupUsersWithRequestBuilder(accountId: Swift.String, signingGroupId: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPISigningGroupUsers>
  open class func signingGroupsGetSigningGroups(accountId: Swift.String, groupType: Swift.String? = nil, includeUsers: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPISigningGroupInformation?, _ error: Swift.Error?) -> Swift.Void))
  open class func signingGroupsGetSigningGroupsWithRequestBuilder(accountId: Swift.String, groupType: Swift.String? = nil, includeUsers: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPISigningGroupInformation>
  open class func signingGroupsPostSigningGroups(accountId: Swift.String, body: DocuSignAPI.DSAPISigningGroupInformation? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPISigningGroupInformation?, _ error: Swift.Error?) -> Swift.Void))
  open class func signingGroupsPostSigningGroupsWithRequestBuilder(accountId: Swift.String, body: DocuSignAPI.DSAPISigningGroupInformation? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPISigningGroupInformation>
  open class func signingGroupsPutSigningGroup(accountId: Swift.String, signingGroupId: Swift.String, body: DocuSignAPI.DSAPISigningGroup? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPISigningGroup?, _ error: Swift.Error?) -> Swift.Void))
  open class func signingGroupsPutSigningGroupWithRequestBuilder(accountId: Swift.String, signingGroupId: Swift.String, body: DocuSignAPI.DSAPISigningGroup? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPISigningGroup>
  open class func signingGroupsPutSigningGroupUsers(accountId: Swift.String, signingGroupId: Swift.String, body: DocuSignAPI.DSAPISigningGroupUsers? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPISigningGroupUsers?, _ error: Swift.Error?) -> Swift.Void))
  open class func signingGroupsPutSigningGroupUsersWithRequestBuilder(accountId: Swift.String, signingGroupId: Swift.String, body: DocuSignAPI.DSAPISigningGroupUsers? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPISigningGroupUsers>
  open class func signingGroupsPutSigningGroups(accountId: Swift.String, body: DocuSignAPI.DSAPISigningGroupInformation? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPISigningGroupInformation?, _ error: Swift.Error?) -> Swift.Void))
  open class func signingGroupsPutSigningGroupsWithRequestBuilder(accountId: Swift.String, body: DocuSignAPI.DSAPISigningGroupInformation? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPISigningGroupInformation>
  @objc deinit
}
public struct DSAPIBillingInvoiceItem : Swift.Codable {
  public var chargeAmount: Swift.String?
  public var chargeName: Swift.String?
  public var invoiceItemId: Swift.String?
  public var quantity: Swift.String?
  public var unitPrice: Swift.String?
  public init(chargeAmount: Swift.String? = nil, chargeName: Swift.String? = nil, invoiceItemId: Swift.String? = nil, quantity: Swift.String? = nil, unitPrice: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIResourcesResourceContentTypeBody : Swift.Codable {
  public var fileXml: Foundation.Data
  public init(fileXml: Foundation.Data)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case fileXml
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIPowerFormFormDataRecipient : Swift.Codable {
  public var email: Swift.String?
  public var formData: [DocuSignAPI.DSAPINameValue]?
  public var name: Swift.String?
  public var recipientId: Swift.String?
  public init(email: Swift.String? = nil, formData: [DocuSignAPI.DSAPINameValue]? = nil, name: Swift.String? = nil, recipientId: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIExternalDocumentSources : Swift.Codable {
  public var boxnetEnabled: Swift.String?
  public var boxnetMetadata: DocuSignAPI.DSAPISettingsMetadata?
  public var dropboxEnabled: Swift.String?
  public var dropboxMetadata: DocuSignAPI.DSAPISettingsMetadata?
  public var googleDriveEnabled: Swift.String?
  public var googleDriveMetadata: DocuSignAPI.DSAPISettingsMetadata?
  public var oneDriveEnabled: Swift.String?
  public var oneDriveMetadata: DocuSignAPI.DSAPISettingsMetadata?
  public var salesforceEnabled: Swift.String?
  public var salesforceMetadata: DocuSignAPI.DSAPISettingsMetadata?
  public init(boxnetEnabled: Swift.String? = nil, boxnetMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, dropboxEnabled: Swift.String? = nil, dropboxMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, googleDriveEnabled: Swift.String? = nil, googleDriveMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, oneDriveEnabled: Swift.String? = nil, oneDriveMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, salesforceEnabled: Swift.String? = nil, salesforceMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @objcMembers public class DSAPIEnvelopeDefinition : ObjectiveC.NSObject, Swift.Codable {
  @objc public var accessControlListBase64: Swift.String?
  @objc public var accessibility: Swift.String?
  @objc @DocuSignAPI.BoolFromString public var allowComments: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc @DocuSignAPI.BoolFromString public var allowMarkup: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc @DocuSignAPI.BoolFromString public var allowReassign: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc @DocuSignAPI.BoolFromString public var allowRecipientRecursion: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc @DocuSignAPI.BoolFromString public var allowViewHistory: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anySigner: Swift.String?
  @objc @DocuSignAPI.BoolFromString public var asynchronous: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var attachments: [DocuSignAPI.DSAPIAttachment]?
  @objc public var attachmentsUri: Foundation.URL?
  @objc @DocuSignAPI.BoolFromString public var authoritativeCopy: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var authoritativeCopyDefault: Swift.String?
  @objc @DocuSignAPI.BoolFromString public var autoNavigation: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var brandId: Swift.String?
  @objc @DocuSignAPI.BoolFromString public var brandLock: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var certificateUri: Foundation.URL?
  @objc public var completedDateTime: Foundation.Date?
  public var compositeTemplates: [DocuSignAPI.DSAPICompositeTemplate]?
  @objc public var copyRecipientData: Swift.String?
  @objc public var createdDateTime: Foundation.Date?
  @objc public var customFields: DocuSignAPI.DSAPICustomFields?
  @objc public var customFieldsUri: Foundation.URL?
  @objc public var declinedDateTime: Foundation.Date?
  @objc public var deletedDateTime: Foundation.Date?
  @objc public var deliveredDateTime: Foundation.Date?
  @objc @DocuSignAPI.BoolFromString public var disableResponsiveDocument: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var documentBase64: Swift.String?
  @objc public var documents: [DocuSignAPI.DSAPIDocument]?
  @objc public var documentsCombinedUri: Foundation.URL?
  @objc public var documentsUri: Foundation.URL?
  @objc public var emailBlurb: Swift.String?
  @objc public var emailSettings: DocuSignAPI.DSAPIEmailSettings?
  @objc public var emailSubject: Swift.String?
  @objc @DocuSignAPI.BoolFromString public var enableWetSign: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc @DocuSignAPI.BoolFromString public var enforceSignerVisibility: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var envelopeAttachments: [DocuSignAPI.DSAPIAttachment]?
  public var envelopeCustomMetadata: DocuSignAPI.DSAPIEnvelopeCustomMetadata?
  @objc public var envelopeDocuments: [DocuSignAPI.DSAPIEnvelopeDocument]?
  @objc public var envelopeId: Swift.String?
  @objc @DocuSignAPI.BoolFromString public var envelopeIdStamping: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var envelopeLocation: Swift.String?
  public var envelopeMetadata: DocuSignAPI.DSAPIEnvelopeMetadata?
  @objc public var envelopeUri: Foundation.URL?
  public var eventNotification: DocuSignAPI.DSAPIEventNotification?
  public var eventNotifications: [DocuSignAPI.DSAPIEventNotification]?
  @objc public var expireAfter: Swift.String?
  @objc public var expireDateTime: Foundation.Date?
  @objc public var expireEnabled: Swift.String?
  @objc public var externalEnvelopeId: Swift.String?
  @objc public var folders: [DocuSignAPI.DSAPIFolder]?
  @objc @DocuSignAPI.BoolFromString public var hasComments: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc @DocuSignAPI.BoolFromString public var hasFormDataChanged: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc @DocuSignAPI.BoolFromString public var hasWavFile: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var holder: Swift.String?
  @objc public var initialSentDateTime: Foundation.Date?
  @objc @DocuSignAPI.BoolFromString public var is21CFRPart11: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc @DocuSignAPI.BoolFromString public var isDynamicEnvelope: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc @DocuSignAPI.BoolFromString public var isSignatureProviderEnvelope: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var lastModifiedDateTime: Foundation.Date?
  @objc public var location: Swift.String?
  @objc public var lockInformation: DocuSignAPI.DSAPILockInformation?
  @objc @DocuSignAPI.BoolFromString public var messageLock: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var notification: DocuSignAPI.DSAPINotification?
  @objc public var notificationUri: Foundation.URL?
  @objc public var password: Swift.String?
  public var powerForm: DocuSignAPI.DSAPIPowerForm?
  @objc public var purgeCompletedDate: Foundation.Date?
  @objc public var purgeRequestDate: Foundation.Date?
  @objc public var purgeState: Swift.String?
  @objc public var recipients: DocuSignAPI.DSAPIRecipients?
  @objc @DocuSignAPI.BoolFromString public var recipientsLock: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var recipientsUri: Foundation.URL?
  @objc public var recipientViewRequest: DocuSignAPI.DSAPIRecipientViewRequest?
  @objc public var sender: DocuSignAPI.DSAPIUserInfo?
  @objc public var sentDateTime: Foundation.Date?
  @objc @DocuSignAPI.BoolFromString public var signerCanSignOnMobile: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var signingLocation: Swift.String?
  @objc public var status: Swift.String?
  @objc public var statusChangedDateTime: Foundation.Date?
  @objc public var statusDateTime: Foundation.Date?
  @objc public var templateId: Swift.String?
  @objc public var templateRoles: [DocuSignAPI.DSAPITemplateRole]?
  @objc public var templatesUri: Foundation.URL?
  @objc public var transactionId: Swift.String?
  @objc public var useDisclosure: Swift.String?
  @objc public var voidedDateTime: Foundation.Date?
  @objc public var voidedReason: Swift.String?
  public var workflow: DocuSignAPI.DSAPIWorkflow?
  @objc override dynamic public init()
  public init(accessControlListBase64: Swift.String? = nil, accessibility: Swift.String? = nil, allowComments: Swift.Bool = false, allowMarkup: Swift.Bool = false, allowReassign: Swift.Bool = false, allowRecipientRecursion: Swift.Bool = false, allowViewHistory: Swift.Bool = false, anySigner: Swift.String? = nil, asynchronous: Swift.Bool = false, attachments: [DocuSignAPI.DSAPIAttachment]? = nil, attachmentsUri: Foundation.URL? = nil, authoritativeCopy: Swift.Bool = false, authoritativeCopyDefault: Swift.String? = nil, autoNavigation: Swift.Bool = false, brandId: Swift.String? = nil, brandLock: Swift.Bool = false, certificateUri: Foundation.URL? = nil, completedDateTime: Foundation.Date? = nil, compositeTemplates: [DocuSignAPI.DSAPICompositeTemplate]? = nil, copyRecipientData: Swift.String? = nil, createdDateTime: Foundation.Date? = nil, customFields: DocuSignAPI.DSAPICustomFields? = nil, customFieldsUri: Foundation.URL? = nil, declinedDateTime: Foundation.Date? = nil, deletedDateTime: Foundation.Date? = nil, deliveredDateTime: Foundation.Date? = nil, disableResponsiveDocument: Swift.Bool = false, documentBase64: Swift.String? = nil, documents: [DocuSignAPI.DSAPIDocument]? = nil, documentsCombinedUri: Foundation.URL? = nil, documentsUri: Foundation.URL? = nil, emailBlurb: Swift.String? = nil, emailSettings: DocuSignAPI.DSAPIEmailSettings? = nil, emailSubject: Swift.String? = nil, enableWetSign: Swift.Bool = false, enforceSignerVisibility: Swift.Bool = false, envelopeAttachments: [DocuSignAPI.DSAPIAttachment]? = nil, envelopeCustomMetadata: DocuSignAPI.DSAPIEnvelopeCustomMetadata? = nil, envelopeDocuments: [DocuSignAPI.DSAPIEnvelopeDocument]? = nil, envelopeId: Swift.String? = nil, envelopeIdStamping: Swift.Bool = false, envelopeLocation: Swift.String? = nil, envelopeMetadata: DocuSignAPI.DSAPIEnvelopeMetadata? = nil, envelopeUri: Foundation.URL? = nil, eventNotification: DocuSignAPI.DSAPIEventNotification? = nil, eventNotifications: [DocuSignAPI.DSAPIEventNotification]? = nil, expireAfter: Swift.String? = nil, expireDateTime: Foundation.Date? = nil, expireEnabled: Swift.String? = nil, externalEnvelopeId: Swift.String? = nil, folders: [DocuSignAPI.DSAPIFolder]? = nil, hasComments: Swift.Bool = false, hasFormDataChanged: Swift.Bool = false, hasWavFile: Swift.Bool = false, holder: Swift.String? = nil, initialSentDateTime: Foundation.Date? = nil, is21CFRPart11: Swift.Bool = false, isDynamicEnvelope: Swift.Bool = false, isSignatureProviderEnvelope: Swift.Bool = false, lastModifiedDateTime: Foundation.Date? = nil, location: Swift.String? = nil, lockInformation: DocuSignAPI.DSAPILockInformation? = nil, messageLock: Swift.Bool = false, notification: DocuSignAPI.DSAPINotification? = nil, notificationUri: Foundation.URL? = nil, password: Swift.String? = nil, powerForm: DocuSignAPI.DSAPIPowerForm? = nil, purgeCompletedDate: Foundation.Date? = nil, purgeRequestDate: Foundation.Date? = nil, purgeState: Swift.String? = nil, recipients: DocuSignAPI.DSAPIRecipients? = nil, recipientsLock: Swift.Bool = false, recipientsUri: Foundation.URL? = nil, recipientViewRequest: DocuSignAPI.DSAPIRecipientViewRequest? = nil, sender: DocuSignAPI.DSAPIUserInfo? = nil, sentDateTime: Foundation.Date? = nil, signerCanSignOnMobile: Swift.Bool = false, signingLocation: Swift.String? = nil, status: Swift.String? = nil, statusChangedDateTime: Foundation.Date? = nil, statusDateTime: Foundation.Date? = nil, templateId: Swift.String? = nil, templateRoles: [DocuSignAPI.DSAPITemplateRole]? = nil, templatesUri: Foundation.URL? = nil, transactionId: Swift.String? = nil, useDisclosure: Swift.String? = nil, voidedDateTime: Foundation.Date? = nil, voidedReason: Swift.String? = nil, workflow: DocuSignAPI.DSAPIWorkflow? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @objcMembers public class DSAPISigner : ObjectiveC.NSObject, Swift.Codable {
  @objc public var accessCode: Swift.String?
  @objc public var accessCodeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var addAccessCodeToEmail: Swift.String?
  @objc public var additionalNotifications: [DocuSignAPI.DSAPIRecipientAdditionalNotification]?
  @objc public var agentCanEditEmail: Swift.String?
  @objc public var agentCanEditName: Swift.String?
  @objc @DocuSignAPI.BoolFromString public var allowSystemOverrideForLockedRecipient: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc @DocuSignAPI.BoolFromString public var autoNavigation: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var autoRespondedReason: Swift.String?
  @objc public var bulkRecipientsUri: Foundation.URL?
  @objc @DocuSignAPI.BoolFromString public var canSignOffline: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var clientUserId: Swift.String?
  @objc public var completedCount: Swift.String?
  @objc public var creationReason: Swift.String?
  @objc public var customFields: [Swift.String]?
  @objc public var declinedDateTime: Foundation.Date?
  @objc public var declinedReason: Swift.String?
  @objc @DocuSignAPI.BoolFromString public var defaultRecipient: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  public var delegatedBy: DocuSignAPI.DSAPIDelegationInfo?
  public var delegatedTo: [DocuSignAPI.DSAPIDelegationInfo]?
  @objc public var deliveredDateTime: Foundation.Date?
  @objc public var deliveryMethod: Swift.String?
  @objc public var deliveryMethodMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var designatorId: Swift.String?
  @objc public var designatorIdGuid: Swift.String?
  @objc public var documentVisibility: [DocuSignAPI.DSAPIDocumentVisibility]?
  @objc public var email: Swift.String?
  @objc public var emailMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var emailNotification: DocuSignAPI.DSAPIRecipientEmailNotification?
  @objc public var emailRecipientPostSigningURL: Swift.String?
  @objc public var embeddedRecipientStartURL: Swift.String?
  @objc public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  @objc public var excludedDocuments: [Swift.String]?
  @objc public var faxNumber: Swift.String?
  @objc public var faxNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var firstName: Swift.String?
  @objc public var firstNameMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var fullName: Swift.String?
  @objc public var fullNameMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var idCheckConfigurationName: Swift.String?
  @objc public var idCheckConfigurationNameMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var idCheckInformationInput: DocuSignAPI.DSAPIIdCheckInformationInput?
  public var identityVerification: DocuSignAPI.DSAPIRecipientIdentityVerification?
  @objc @DocuSignAPI.BoolFromString public var inheritEmailNotificationConfiguration: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc @DocuSignAPI.BoolFromString public var isBulkRecipient: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var isBulkRecipientMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var lastName: Swift.String?
  @objc public var lastNameMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var lockedRecipientPhoneAuthEditable: Swift.String?
  @objc public var lockedRecipientSmsEditable: Swift.String?
  @objc public var name: Swift.String?
  @objc public var nameMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var notaryId: Swift.String?
  @objc public var notarySignerEmailSent: Swift.String?
  @objc public var note: Swift.String?
  @objc public var noteMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var offlineAttributes: DocuSignAPI.DSAPIOfflineAttributes?
  public var phoneAuthentication: DocuSignAPI.DSAPIRecipientPhoneAuthentication?
  public var phoneNumber: DocuSignAPI.DSAPIRecipientPhoneNumber?
  public var proofFile: DocuSignAPI.DSAPIRecipientProofFile?
  @objc public var recipientAttachments: [DocuSignAPI.DSAPIRecipientAttachment]?
  public var recipientAuthenticationStatus: DocuSignAPI.DSAPIAuthenticationStatus?
  public var recipientFeatureMetadata: [DocuSignAPI.DSAPIFeatureAvailableMetadata]?
  @objc public var recipientId: Swift.String?
  @objc public var recipientIdGuid: Swift.String?
  public var recipientSignatureProviders: [DocuSignAPI.DSAPIRecipientSignatureProvider]?
  @objc @DocuSignAPI.BoolFromString public var recipientSuppliesTabs: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var recipientType: Swift.String?
  @objc public var recipientTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var requireIdLookup: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var requireIdLookupMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var requireSignerCertificate: Swift.String?
  @objc @DocuSignAPI.BoolFromString public var requireSignOnPaper: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc @DocuSignAPI.BoolFromString public var requireUploadSignature: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var roleName: Swift.String?
  @objc public var routingOrder: Swift.String?
  @objc public var routingOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var sentDateTime: Foundation.Date?
  @objc public var signatureInfo: DocuSignAPI.DSAPIRecipientSignatureInformation?
  @objc public var signedDateTime: Foundation.Date?
  @objc @DocuSignAPI.BoolFromString public var signInEachLocation: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var signInEachLocationMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var signingGroupId: Swift.String?
  @objc public var signingGroupIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var signingGroupName: Swift.String?
  @objc public var signingGroupUsers: [DocuSignAPI.DSAPIUserInfo]?
  @objc public var smsAuthentication: DocuSignAPI.DSAPIRecipientSMSAuthentication?
  @objc public var socialAuthentications: [DocuSignAPI.DSAPISocialAuthentication]?
  @objc public var status: Swift.String?
  @objc public var statusCode: Swift.String?
  @objc @DocuSignAPI.BoolFromString public var suppressEmails: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var tabs: DocuSignAPI.DSAPITabs?
  @objc @DocuSignAPI.BoolFromString public var templateLocked: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc @DocuSignAPI.BoolFromString public var templateRequired: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var totalTabCount: Swift.String?
  @objc public var userId: Swift.String?
  @objc public var consumerDisclosure: DocuSignAPI.DSAPIConsumerDisclosure?
  @objc public var recipientPhotoImageDataBase64: Swift.String?
  @objc override dynamic public init()
  public init(accessCode: Swift.String? = nil, accessCodeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, addAccessCodeToEmail: Swift.String? = nil, additionalNotifications: [DocuSignAPI.DSAPIRecipientAdditionalNotification]? = nil, agentCanEditEmail: Swift.String? = nil, agentCanEditName: Swift.String? = nil, allowSystemOverrideForLockedRecipient: Swift.Bool = false, autoNavigation: Swift.Bool = false, autoRespondedReason: Swift.String? = nil, bulkRecipientsUri: Foundation.URL? = nil, canSignOffline: Swift.Bool = false, clientUserId: Swift.String? = nil, completedCount: Swift.String? = nil, creationReason: Swift.String? = nil, customFields: [Swift.String]? = nil, declinedDateTime: Foundation.Date? = nil, declinedReason: Swift.String? = nil, defaultRecipient: Swift.Bool = false, delegatedBy: DocuSignAPI.DSAPIDelegationInfo? = nil, delegatedTo: [DocuSignAPI.DSAPIDelegationInfo]? = nil, deliveredDateTime: Foundation.Date? = nil, deliveryMethod: Swift.String? = nil, deliveryMethodMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, designatorId: Swift.String? = nil, designatorIdGuid: Swift.String? = nil, documentVisibility: [DocuSignAPI.DSAPIDocumentVisibility]? = nil, email: Swift.String? = nil, emailMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, emailNotification: DocuSignAPI.DSAPIRecipientEmailNotification? = nil, emailRecipientPostSigningURL: Swift.String? = nil, embeddedRecipientStartURL: Swift.String? = nil, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, excludedDocuments: [Swift.String]? = nil, faxNumber: Swift.String? = nil, faxNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, firstName: Swift.String? = nil, firstNameMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, fullName: Swift.String? = nil, fullNameMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, idCheckConfigurationName: Swift.String? = nil, idCheckConfigurationNameMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, idCheckInformationInput: DocuSignAPI.DSAPIIdCheckInformationInput? = nil, identityVerification: DocuSignAPI.DSAPIRecipientIdentityVerification? = nil, inheritEmailNotificationConfiguration: Swift.Bool = false, isBulkRecipient: Swift.Bool = false, isBulkRecipientMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, lastName: Swift.String? = nil, lastNameMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, lockedRecipientPhoneAuthEditable: Swift.String? = nil, lockedRecipientSmsEditable: Swift.String? = nil, name: Swift.String? = nil, nameMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, notaryId: Swift.String? = nil, notarySignerEmailSent: Swift.String? = nil, note: Swift.String? = nil, noteMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, offlineAttributes: DocuSignAPI.DSAPIOfflineAttributes? = nil, phoneAuthentication: DocuSignAPI.DSAPIRecipientPhoneAuthentication? = nil, phoneNumber: DocuSignAPI.DSAPIRecipientPhoneNumber? = nil, proofFile: DocuSignAPI.DSAPIRecipientProofFile? = nil, recipientAttachments: [DocuSignAPI.DSAPIRecipientAttachment]? = nil, recipientAuthenticationStatus: DocuSignAPI.DSAPIAuthenticationStatus? = nil, recipientFeatureMetadata: [DocuSignAPI.DSAPIFeatureAvailableMetadata]? = nil, recipientId: Swift.String? = nil, recipientIdGuid: Swift.String? = nil, recipientSignatureProviders: [DocuSignAPI.DSAPIRecipientSignatureProvider]? = nil, recipientSuppliesTabs: Swift.Bool = false, recipientType: Swift.String? = nil, recipientTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, requireIdLookup: Swift.Bool = false, requireIdLookupMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, requireSignerCertificate: Swift.String? = nil, requireSignOnPaper: Swift.Bool = false, requireUploadSignature: Swift.Bool = false, roleName: Swift.String? = nil, routingOrder: Swift.String? = nil, routingOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, sentDateTime: Foundation.Date? = nil, signatureInfo: DocuSignAPI.DSAPIRecipientSignatureInformation? = nil, signedDateTime: Foundation.Date? = nil, signInEachLocation: Swift.Bool = false, signInEachLocationMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, signingGroupId: Swift.String? = nil, signingGroupIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, signingGroupName: Swift.String? = nil, signingGroupUsers: [DocuSignAPI.DSAPIUserInfo]? = nil, smsAuthentication: DocuSignAPI.DSAPIRecipientSMSAuthentication? = nil, socialAuthentications: [DocuSignAPI.DSAPISocialAuthentication]? = nil, status: Swift.String? = nil, statusCode: Swift.String? = nil, suppressEmails: Swift.Bool = false, tabs: DocuSignAPI.DSAPITabs? = nil, templateLocked: Swift.Bool = false, templateRequired: Swift.Bool = false, totalTabCount: Swift.String? = nil, userId: Swift.String? = nil, consumerDisclosure: DocuSignAPI.DSAPIConsumerDisclosure? = nil, recipientPhotoImageDataBase64: Swift.String? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIReturnUrlRequest : Swift.Codable {
  public var returnUrl: Foundation.URL?
  public init(returnUrl: Foundation.URL? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIDocumentHtmlDefinition : Swift.Codable {
  public var displayAnchorPrefix: Swift.String?
  public var displayAnchors: [DocuSignAPI.DSAPIDocumentHtmlDisplayAnchor]?
  public var displayOrder: Swift.String?
  public var displayPageNumber: Swift.String?
  public var documentGuid: Swift.String?
  public var documentId: Swift.String?
  public var headerLabel: Swift.String?
  public var maxScreenWidth: Swift.String?
  public var removeEmptyTags: Swift.String?
  @DocuSignAPI.BoolFromString public var showMobileOptimizedToggle: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var source: Swift.String?
  public init(displayAnchorPrefix: Swift.String? = nil, displayAnchors: [DocuSignAPI.DSAPIDocumentHtmlDisplayAnchor]? = nil, displayOrder: Swift.String? = nil, displayPageNumber: Swift.String? = nil, documentGuid: Swift.String? = nil, documentId: Swift.String? = nil, headerLabel: Swift.String? = nil, maxScreenWidth: Swift.String? = nil, removeEmptyTags: Swift.String? = nil, showMobileOptimizedToggle: Swift.Bool = false, source: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @objcMembers public class DSAPINotification : ObjectiveC.NSObject, Swift.Codable {
  @objc public var expirations: DocuSignAPI.DSAPIExpirations?
  @objc public var reminders: DocuSignAPI.DSAPIReminders?
  @objc @DocuSignAPI.BoolFromString public var useAccountDefaults: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc override dynamic public init()
  @objc public init(expirations: DocuSignAPI.DSAPIExpirations? = nil, reminders: DocuSignAPI.DSAPIReminders? = nil, useAccountDefaults: Swift.Bool = false)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @objcMembers public class DSAPITitle : ObjectiveC.NSObject, Swift.Codable {
  @objc @DocuSignAPI.BoolFromString public var anchorAllowWhiteSpaceInCharacters: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorAllowWhiteSpaceInCharactersMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var anchorCaseSensitive: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorCaseSensitiveMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorHorizontalAlignment: Swift.String?
  @objc public var anchorHorizontalAlignmentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var anchorIgnoreIfNotPresent: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorIgnoreIfNotPresentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var anchorMatchWholeWord: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorMatchWholeWordMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorString: Swift.String?
  @objc public var anchorStringMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorTabProcessorVersion: Swift.String?
  @objc public var anchorTabProcessorVersionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorUnits: Swift.String?
  @objc public var anchorUnitsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorXOffset: Swift.String?
  @objc public var anchorXOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorYOffset: Swift.String?
  @objc public var anchorYOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var bold: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var boldMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var concealValueOnDocument: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var concealValueOnDocumentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var conditionalParentLabel: Swift.String?
  @objc public var conditionalParentLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var conditionalParentValue: Swift.String?
  @objc public var conditionalParentValueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var customTabId: Swift.String?
  @objc public var customTabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var disableAutoSize: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var disableAutoSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var documentId: Swift.String?
  @objc public var documentIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  @objc public var font: Swift.String?
  @objc public var fontColor: Swift.String?
  @objc public var fontColorMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var fontMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var fontSize: Swift.String?
  @objc public var fontSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var formOrder: Swift.String?
  @objc public var formOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var formPageLabel: Swift.String?
  @objc public var formPageLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var formPageNumber: Swift.String?
  @objc public var formPageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var height: Swift.String?
  @objc public var heightMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var italic: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var italicMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var localePolicy: DocuSignAPI.DSAPILocalePolicyTab?
  @objc @DocuSignAPI.BoolFromString public var locked: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var lockedMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var maxLength: Swift.String?
  @objc public var maxLengthMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var mergeField: DocuSignAPI.DSAPIMergeField?
  @objc public var mergeFieldXml: Swift.String?
  @objc public var name: Swift.String?
  @objc public var nameMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var originalValue: Swift.String?
  @objc public var originalValueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var pageNumber: Swift.String?
  @objc public var pageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var recipientId: Swift.String?
  @objc public var recipientIdGuid: Swift.String?
  @objc public var recipientIdGuidMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var recipientIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var required: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var requiredMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var smartContractInformation: DocuSignAPI.DSAPISmartContractInformation?
  @objc public var source: Swift.String?
  @objc public var status: Swift.String?
  @objc public var statusMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabGroupLabels: [Swift.String]?
  @objc public var tabGroupLabelsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabId: Swift.String?
  @objc public var tabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabLabel: Swift.String?
  @objc public var tabLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabOrder: Swift.String?
  @objc public var tabOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabType: Swift.String?
  @objc public var tabTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var templateLocked: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var templateLockedMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var templateRequired: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var templateRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tooltip: Swift.String?
  @objc public var toolTipMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var underline: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var underlineMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var value: Swift.String?
  @objc public var valueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var width: Swift.String?
  @objc public var widthMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var xPosition: Swift.String?
  @objc public var xPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var yPosition: Swift.String?
  @objc public var yPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc override dynamic public init()
  public init(anchorAllowWhiteSpaceInCharacters: Swift.Bool = false, anchorAllowWhiteSpaceInCharactersMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorCaseSensitive: Swift.Bool = false, anchorCaseSensitiveMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorHorizontalAlignment: Swift.String? = nil, anchorHorizontalAlignmentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorIgnoreIfNotPresent: Swift.Bool = false, anchorIgnoreIfNotPresentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorMatchWholeWord: Swift.Bool = false, anchorMatchWholeWordMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorString: Swift.String? = nil, anchorStringMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorTabProcessorVersion: Swift.String? = nil, anchorTabProcessorVersionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorUnits: Swift.String? = nil, anchorUnitsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorXOffset: Swift.String? = nil, anchorXOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorYOffset: Swift.String? = nil, anchorYOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, bold: Swift.Bool = false, boldMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, concealValueOnDocument: Swift.Bool = false, concealValueOnDocumentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, conditionalParentLabel: Swift.String? = nil, conditionalParentLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, conditionalParentValue: Swift.String? = nil, conditionalParentValueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, customTabId: Swift.String? = nil, customTabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, disableAutoSize: Swift.Bool = false, disableAutoSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, documentId: Swift.String? = nil, documentIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, font: Swift.String? = nil, fontColor: Swift.String? = nil, fontColorMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, fontMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, fontSize: Swift.String? = nil, fontSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formOrder: Swift.String? = nil, formOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formPageLabel: Swift.String? = nil, formPageLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formPageNumber: Swift.String? = nil, formPageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, height: Swift.String? = nil, heightMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, italic: Swift.Bool = false, italicMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, localePolicy: DocuSignAPI.DSAPILocalePolicyTab? = nil, locked: Swift.Bool = false, lockedMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, maxLength: Swift.String? = nil, maxLengthMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, mergeField: DocuSignAPI.DSAPIMergeField? = nil, mergeFieldXml: Swift.String? = nil, name: Swift.String? = nil, nameMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, originalValue: Swift.String? = nil, originalValueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, pageNumber: Swift.String? = nil, pageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, recipientId: Swift.String? = nil, recipientIdGuid: Swift.String? = nil, recipientIdGuidMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, recipientIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, required: Swift.Bool = false, requiredMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, smartContractInformation: DocuSignAPI.DSAPISmartContractInformation? = nil, source: Swift.String? = nil, status: Swift.String? = nil, statusMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabGroupLabels: [Swift.String]? = nil, tabGroupLabelsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabId: Swift.String? = nil, tabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabLabel: Swift.String? = nil, tabLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabOrder: Swift.String? = nil, tabOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabType: Swift.String? = nil, tabTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, templateLocked: Swift.Bool = false, templateLockedMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, templateRequired: Swift.Bool = false, templateRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tooltip: Swift.String? = nil, toolTipMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, underline: Swift.Bool = false, underlineMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, value: Swift.String? = nil, valueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, width: Swift.String? = nil, widthMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, xPosition: Swift.String? = nil, xPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, yPosition: Swift.String? = nil, yPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @objcMembers open class AccountsAPI : ObjectiveC.NSObject {
  open class func accountCustomFieldsDeleteAccountCustomFields(accountId: Swift.String, customFieldId: Swift.String, applyToTemplates: Swift.String? = nil, completion: @escaping ((_ data: Swift.Void?, _ error: Swift.Error?) -> Swift.Void))
  open class func accountCustomFieldsDeleteAccountCustomFieldsWithRequestBuilder(accountId: Swift.String, customFieldId: Swift.String, applyToTemplates: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<Swift.Void>
  @objc open class func accountCustomFieldsGetAccountCustomFields(accountId: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPICustomFields?, _ error: Swift.Error?) -> Swift.Void))
  open class func accountCustomFieldsGetAccountCustomFieldsWithRequestBuilder(accountId: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPICustomFields>
  open class func accountCustomFieldsPostAccountCustomFields(accountId: Swift.String, body: DocuSignAPI.DSAPICustomField? = nil, applyToTemplates: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPICustomFields?, _ error: Swift.Error?) -> Swift.Void))
  open class func accountCustomFieldsPostAccountCustomFieldsWithRequestBuilder(accountId: Swift.String, body: DocuSignAPI.DSAPICustomField? = nil, applyToTemplates: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPICustomFields>
  open class func accountCustomFieldsPutAccountCustomFields(accountId: Swift.String, customFieldId: Swift.String, body: DocuSignAPI.DSAPICustomField? = nil, applyToTemplates: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPICustomFields?, _ error: Swift.Error?) -> Swift.Void))
  open class func accountCustomFieldsPutAccountCustomFieldsWithRequestBuilder(accountId: Swift.String, customFieldId: Swift.String, body: DocuSignAPI.DSAPICustomField? = nil, applyToTemplates: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPICustomFields>
  open class func accountIdentityVerificationGetAccountIdentityVerification(accountId: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPIAccountIdentityVerificationResponse?, _ error: Swift.Error?) -> Swift.Void))
  open class func accountIdentityVerificationGetAccountIdentityVerificationWithRequestBuilder(accountId: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIAccountIdentityVerificationResponse>
  open class func accountPasswordRulesGetAccountPasswordRules(accountId: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPIAccountPasswordRules?, _ error: Swift.Error?) -> Swift.Void))
  open class func accountPasswordRulesGetAccountPasswordRulesWithRequestBuilder(accountId: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIAccountPasswordRules>
  open class func accountPasswordRulesPutAccountPasswordRules(accountId: Swift.String, body: DocuSignAPI.DSAPIAccountPasswordRules? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIAccountPasswordRules?, _ error: Swift.Error?) -> Swift.Void))
  open class func accountPasswordRulesPutAccountPasswordRulesWithRequestBuilder(accountId: Swift.String, body: DocuSignAPI.DSAPIAccountPasswordRules? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIAccountPasswordRules>
  open class func accountSignatureProvidersGetSignatureProviders(accountId: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPIAccountSignatureProviders?, _ error: Swift.Error?) -> Swift.Void))
  open class func accountSignatureProvidersGetSignatureProvidersWithRequestBuilder(accountId: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIAccountSignatureProviders>
  open class func accountSignaturesDeleteAccountSignature(accountId: Swift.String, signatureId: Swift.String, completion: @escaping ((_ data: Swift.Void?, _ error: Swift.Error?) -> Swift.Void))
  open class func accountSignaturesDeleteAccountSignatureWithRequestBuilder(accountId: Swift.String, signatureId: Swift.String) -> DocuSignAPI.RequestBuilder<Swift.Void>
  open class func accountSignaturesDeleteAccountSignatureImage(accountId: Swift.String, imageType: Swift.String, signatureId: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPIAccountSignature?, _ error: Swift.Error?) -> Swift.Void))
  open class func accountSignaturesDeleteAccountSignatureImageWithRequestBuilder(accountId: Swift.String, imageType: Swift.String, signatureId: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIAccountSignature>
  open class func accountSignaturesGetAccountSignature(accountId: Swift.String, signatureId: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPIAccountSignature?, _ error: Swift.Error?) -> Swift.Void))
  open class func accountSignaturesGetAccountSignatureWithRequestBuilder(accountId: Swift.String, signatureId: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIAccountSignature>
  @objc open class func accountSignaturesGetAccountSignatureImage(accountId: Swift.String, imageType: Swift.String, signatureId: Swift.String, includeChrome: Swift.String? = nil, completion: @escaping ((_ data: Foundation.Data?, _ error: Swift.Error?) -> Swift.Void))
  open class func accountSignaturesGetAccountSignatureImageWithRequestBuilder(accountId: Swift.String, imageType: Swift.String, signatureId: Swift.String, includeChrome: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<Foundation.Data>
  open class func accountSignaturesGetAccountSignatures(accountId: Swift.String, stampFormat: Swift.String? = nil, stampName: Swift.String? = nil, stampType: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIAccountSignaturesInformation?, _ error: Swift.Error?) -> Swift.Void))
  open class func accountSignaturesGetAccountSignaturesWithRequestBuilder(accountId: Swift.String, stampFormat: Swift.String? = nil, stampName: Swift.String? = nil, stampType: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIAccountSignaturesInformation>
  open class func accountSignaturesPostAccountSignatures(accountId: Swift.String, body: DocuSignAPI.DSAPIAccountSignaturesInformation? = nil, decodeOnly: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIAccountSignaturesInformation?, _ error: Swift.Error?) -> Swift.Void))
  open class func accountSignaturesPostAccountSignaturesWithRequestBuilder(accountId: Swift.String, body: DocuSignAPI.DSAPIAccountSignaturesInformation? = nil, decodeOnly: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIAccountSignaturesInformation>
  open class func accountSignaturesPutAccountSignature(accountId: Swift.String, body: DocuSignAPI.DSAPIAccountSignaturesInformation? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIAccountSignaturesInformation?, _ error: Swift.Error?) -> Swift.Void))
  open class func accountSignaturesPutAccountSignatureWithRequestBuilder(accountId: Swift.String, body: DocuSignAPI.DSAPIAccountSignaturesInformation? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIAccountSignaturesInformation>
  open class func accountSignaturesPutAccountSignatureById(accountId: Swift.String, signatureId: Swift.String, body: DocuSignAPI.DSAPIAccountSignatureDefinition? = nil, closeExistingSignature: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIAccountSignature?, _ error: Swift.Error?) -> Swift.Void))
  open class func accountSignaturesPutAccountSignatureByIdWithRequestBuilder(accountId: Swift.String, signatureId: Swift.String, body: DocuSignAPI.DSAPIAccountSignatureDefinition? = nil, closeExistingSignature: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIAccountSignature>
  open class func accountSignaturesPutAccountSignatureImage(accountId: Swift.String, imageType: Swift.String, signatureId: Swift.String, transparentPng: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIAccountSignature?, _ error: Swift.Error?) -> Swift.Void))
  open class func accountSignaturesPutAccountSignatureImageWithRequestBuilder(accountId: Swift.String, imageType: Swift.String, signatureId: Swift.String, transparentPng: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIAccountSignature>
  open class func accountsDeleteAccount(accountId: Swift.String, completion: @escaping ((_ data: Swift.Void?, _ error: Swift.Error?) -> Swift.Void))
  open class func accountsDeleteAccountWithRequestBuilder(accountId: Swift.String) -> DocuSignAPI.RequestBuilder<Swift.Void>
  @objc open class func accountsGetAccount(accountId: Swift.String, includeAccountSettings: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIAccountInformation?, _ error: Swift.Error?) -> Swift.Void))
  open class func accountsGetAccountWithRequestBuilder(accountId: Swift.String, includeAccountSettings: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIAccountInformation>
  open class func accountsGetProvisioning(completion: @escaping ((_ data: DocuSignAPI.DSAPIProvisioningInformation?, _ error: Swift.Error?) -> Swift.Void))
  open class func accountsGetProvisioningWithRequestBuilder() -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIProvisioningInformation>
  open class func accountsPostAccounts(body: DocuSignAPI.DSAPINewAccountDefinition? = nil, previewBillingPlan: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPINewAccountSummary?, _ error: Swift.Error?) -> Swift.Void))
  open class func accountsPostAccountsWithRequestBuilder(body: DocuSignAPI.DSAPINewAccountDefinition? = nil, previewBillingPlan: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPINewAccountSummary>
  open class func billingChargesGetAccountBillingCharges(accountId: Swift.String, includeCharges: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIBillingChargeResponse?, _ error: Swift.Error?) -> Swift.Void))
  open class func billingChargesGetAccountBillingChargesWithRequestBuilder(accountId: Swift.String, includeCharges: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIBillingChargeResponse>
  open class func brandDeleteBrand(accountId: Swift.String, brandId: Swift.String, completion: @escaping ((_ data: Swift.Void?, _ error: Swift.Error?) -> Swift.Void))
  open class func brandDeleteBrandWithRequestBuilder(accountId: Swift.String, brandId: Swift.String) -> DocuSignAPI.RequestBuilder<Swift.Void>
  open class func brandExportGetBrandExportFile(accountId: Swift.String, brandId: Swift.String, completion: @escaping ((_ data: Swift.Void?, _ error: Swift.Error?) -> Swift.Void))
  open class func brandExportGetBrandExportFileWithRequestBuilder(accountId: Swift.String, brandId: Swift.String) -> DocuSignAPI.RequestBuilder<Swift.Void>
  open class func brandGetBrand(accountId: Swift.String, brandId: Swift.String, includeExternalReferences: Swift.String? = nil, includeLogos: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIBrand?, _ error: Swift.Error?) -> Swift.Void))
  open class func brandGetBrandWithRequestBuilder(accountId: Swift.String, brandId: Swift.String, includeExternalReferences: Swift.String? = nil, includeLogos: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIBrand>
  open class func brandLogoDeleteBrandLogo(accountId: Swift.String, brandId: Swift.String, logoType: Swift.String, completion: @escaping ((_ data: Swift.Void?, _ error: Swift.Error?) -> Swift.Void))
  open class func brandLogoDeleteBrandLogoWithRequestBuilder(accountId: Swift.String, brandId: Swift.String, logoType: Swift.String) -> DocuSignAPI.RequestBuilder<Swift.Void>
  @objc open class func brandLogoGetBrandLogo(accountId: Swift.String, brandId: Swift.String, logoType: Swift.String, completion: @escaping ((_ data: Foundation.Data?, _ error: Swift.Error?) -> Swift.Void))
  open class func brandLogoGetBrandLogoWithRequestBuilder(accountId: Swift.String, brandId: Swift.String, logoType: Swift.String) -> DocuSignAPI.RequestBuilder<Foundation.Data>
  open class func brandLogoPutBrandLogo(body: Any, accountId: Swift.String, brandId: Swift.String, logoType: Swift.String, completion: @escaping ((_ data: Swift.Void?, _ error: Swift.Error?) -> Swift.Void))
  open class func brandLogoPutBrandLogoWithRequestBuilder(body: Any, accountId: Swift.String, brandId: Swift.String, logoType: Swift.String) -> DocuSignAPI.RequestBuilder<Swift.Void>
  open class func brandPutBrand(accountId: Swift.String, brandId: Swift.String, body: DocuSignAPI.DSAPIBrand? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIBrand?, _ error: Swift.Error?) -> Swift.Void))
  open class func brandPutBrandWithRequestBuilder(accountId: Swift.String, brandId: Swift.String, body: DocuSignAPI.DSAPIBrand? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIBrand>
  open class func brandResourcesGetBrandResources(accountId: Swift.String, brandId: Swift.String, resourceContentType: Swift.String, langcode: Swift.String? = nil, returnMaster: Swift.String? = nil, completion: @escaping ((_ data: Swift.Void?, _ error: Swift.Error?) -> Swift.Void))
  open class func brandResourcesGetBrandResourcesWithRequestBuilder(accountId: Swift.String, brandId: Swift.String, resourceContentType: Swift.String, langcode: Swift.String? = nil, returnMaster: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<Swift.Void>
  open class func brandResourcesGetBrandResourcesList(accountId: Swift.String, brandId: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPIBrandResourcesList?, _ error: Swift.Error?) -> Swift.Void))
  open class func brandResourcesGetBrandResourcesListWithRequestBuilder(accountId: Swift.String, brandId: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIBrandResourcesList>
  open class func brandResourcesPutBrandResources(fileXml: Foundation.Data, accountId: Swift.String, brandId: Swift.String, resourceContentType: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPIBrandResources?, _ error: Swift.Error?) -> Swift.Void))
  open class func brandResourcesPutBrandResourcesWithRequestBuilder(fileXml: Foundation.Data, accountId: Swift.String, brandId: Swift.String, resourceContentType: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIBrandResources>
  open class func brandsDeleteBrands(accountId: Swift.String, body: DocuSignAPI.DSAPIBrandsRequest? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIBrandsResponse?, _ error: Swift.Error?) -> Swift.Void))
  open class func brandsDeleteBrandsWithRequestBuilder(accountId: Swift.String, body: DocuSignAPI.DSAPIBrandsRequest? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIBrandsResponse>
  open class func brandsGetBrands(accountId: Swift.String, excludeDistributorBrand: Swift.String? = nil, includeLogos: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIBrandsResponse?, _ error: Swift.Error?) -> Swift.Void))
  open class func brandsGetBrandsWithRequestBuilder(accountId: Swift.String, excludeDistributorBrand: Swift.String? = nil, includeLogos: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIBrandsResponse>
  open class func brandsPostBrands(accountId: Swift.String, body: DocuSignAPI.DSAPIBrand? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIBrandsResponse?, _ error: Swift.Error?) -> Swift.Void))
  open class func brandsPostBrandsWithRequestBuilder(accountId: Swift.String, body: DocuSignAPI.DSAPIBrand? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIBrandsResponse>
  open class func captiveRecipientsDeleteCaptiveRecipientsPart(accountId: Swift.String, recipientPart: Swift.String, body: DocuSignAPI.DSAPICaptiveRecipientInformation? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPICaptiveRecipientInformation?, _ error: Swift.Error?) -> Swift.Void))
  open class func captiveRecipientsDeleteCaptiveRecipientsPartWithRequestBuilder(accountId: Swift.String, recipientPart: Swift.String, body: DocuSignAPI.DSAPICaptiveRecipientInformation? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPICaptiveRecipientInformation>
  @objc open class func consumerDisclosureGetConsumerDisclosure(accountId: Swift.String, langCode: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIConsumerDisclosure?, _ error: Swift.Error?) -> Swift.Void))
  open class func consumerDisclosureGetConsumerDisclosureWithRequestBuilder(accountId: Swift.String, langCode: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIConsumerDisclosure>
  @objc open class func consumerDisclosureGetConsumerDisclosureLangCode(accountId: Swift.String, langCode: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPIConsumerDisclosure?, _ error: Swift.Error?) -> Swift.Void))
  open class func consumerDisclosureGetConsumerDisclosureLangCodeWithRequestBuilder(accountId: Swift.String, langCode: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIConsumerDisclosure>
  @objc open class func consumerDisclosurePutConsumerDisclosure(accountId: Swift.String, langCode: Swift.String, body: DocuSignAPI.DSAPIConsumerDisclosure? = nil, includeMetadata: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIConsumerDisclosure?, _ error: Swift.Error?) -> Swift.Void))
  open class func consumerDisclosurePutConsumerDisclosureWithRequestBuilder(accountId: Swift.String, langCode: Swift.String, body: DocuSignAPI.DSAPIConsumerDisclosure? = nil, includeMetadata: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIConsumerDisclosure>
  open class func eNoteConfigurationDeleteENoteConfiguration(accountId: Swift.String, completion: @escaping ((_ data: Swift.Void?, _ error: Swift.Error?) -> Swift.Void))
  open class func eNoteConfigurationDeleteENoteConfigurationWithRequestBuilder(accountId: Swift.String) -> DocuSignAPI.RequestBuilder<Swift.Void>
  open class func eNoteConfigurationGetENoteConfiguration(accountId: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPIENoteConfiguration?, _ error: Swift.Error?) -> Swift.Void))
  open class func eNoteConfigurationGetENoteConfigurationWithRequestBuilder(accountId: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIENoteConfiguration>
  open class func eNoteConfigurationPutENoteConfiguration(accountId: Swift.String, body: DocuSignAPI.DSAPIENoteConfiguration? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIENoteConfiguration?, _ error: Swift.Error?) -> Swift.Void))
  open class func eNoteConfigurationPutENoteConfigurationWithRequestBuilder(accountId: Swift.String, body: DocuSignAPI.DSAPIENoteConfiguration? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIENoteConfiguration>
  open class func envelopePurgeConfigurationGetEnvelopePurgeConfiguration(accountId: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPIEnvelopePurgeConfiguration?, _ error: Swift.Error?) -> Swift.Void))
  open class func envelopePurgeConfigurationGetEnvelopePurgeConfigurationWithRequestBuilder(accountId: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIEnvelopePurgeConfiguration>
  open class func envelopePurgeConfigurationPutEnvelopePurgeConfiguration(accountId: Swift.String, body: DocuSignAPI.DSAPIEnvelopePurgeConfiguration? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIEnvelopePurgeConfiguration?, _ error: Swift.Error?) -> Swift.Void))
  open class func envelopePurgeConfigurationPutEnvelopePurgeConfigurationWithRequestBuilder(accountId: Swift.String, body: DocuSignAPI.DSAPIEnvelopePurgeConfiguration? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIEnvelopePurgeConfiguration>
  open class func favoriteTemplatesGetFavoriteTemplates(accountId: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPIFavoriteTemplatesInfo?, _ error: Swift.Error?) -> Swift.Void))
  open class func favoriteTemplatesGetFavoriteTemplatesWithRequestBuilder(accountId: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIFavoriteTemplatesInfo>
  open class func favoriteTemplatesPutFavoriteTemplate(accountId: Swift.String, body: DocuSignAPI.DSAPIFavoriteTemplatesInfo? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIFavoriteTemplatesInfo?, _ error: Swift.Error?) -> Swift.Void))
  open class func favoriteTemplatesPutFavoriteTemplateWithRequestBuilder(accountId: Swift.String, body: DocuSignAPI.DSAPIFavoriteTemplatesInfo? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIFavoriteTemplatesInfo>
  open class func favoriteTemplatesUnFavoriteTemplate(accountId: Swift.String, body: DocuSignAPI.DSAPIFavoriteTemplatesInfo? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIFavoriteTemplatesInfo?, _ error: Swift.Error?) -> Swift.Void))
  open class func favoriteTemplatesUnFavoriteTemplateWithRequestBuilder(accountId: Swift.String, body: DocuSignAPI.DSAPIFavoriteTemplatesInfo? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIFavoriteTemplatesInfo>
  open class func notificationDefaultsGetNotificationDefaults(accountId: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPINotificationDefaults?, _ error: Swift.Error?) -> Swift.Void))
  open class func notificationDefaultsGetNotificationDefaultsWithRequestBuilder(accountId: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPINotificationDefaults>
  open class func notificationDefaultsPutNotificationDefaults(accountId: Swift.String, body: DocuSignAPI.DSAPINotificationDefaults? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPINotificationDefaults?, _ error: Swift.Error?) -> Swift.Void))
  open class func notificationDefaultsPutNotificationDefaultsWithRequestBuilder(accountId: Swift.String, body: DocuSignAPI.DSAPINotificationDefaults? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPINotificationDefaults>
  open class func passwordRulesGetPasswordRules(completion: @escaping ((_ data: DocuSignAPI.DSAPIUserPasswordRules?, _ error: Swift.Error?) -> Swift.Void))
  open class func passwordRulesGetPasswordRulesWithRequestBuilder() -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIUserPasswordRules>
  open class func paymentGatewayAccountsGetAllPaymentGatewayAccounts(accountId: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPIPaymentGatewayAccountsInfo?, _ error: Swift.Error?) -> Swift.Void))
  open class func paymentGatewayAccountsGetAllPaymentGatewayAccountsWithRequestBuilder(accountId: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIPaymentGatewayAccountsInfo>
  open class func permissionProfilesDeletePermissionProfiles(accountId: Swift.String, permissionProfileId: Swift.String, moveUsersTo: Swift.String? = nil, completion: @escaping ((_ data: Swift.Void?, _ error: Swift.Error?) -> Swift.Void))
  open class func permissionProfilesDeletePermissionProfilesWithRequestBuilder(accountId: Swift.String, permissionProfileId: Swift.String, moveUsersTo: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<Swift.Void>
  open class func permissionProfilesGetPermissionProfile(accountId: Swift.String, permissionProfileId: Swift.String, include: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIPermissionProfile?, _ error: Swift.Error?) -> Swift.Void))
  open class func permissionProfilesGetPermissionProfileWithRequestBuilder(accountId: Swift.String, permissionProfileId: Swift.String, include: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIPermissionProfile>
  open class func permissionProfilesGetPermissionProfiles(accountId: Swift.String, include: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIPermissionProfileInformation?, _ error: Swift.Error?) -> Swift.Void))
  open class func permissionProfilesGetPermissionProfilesWithRequestBuilder(accountId: Swift.String, include: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIPermissionProfileInformation>
  open class func permissionProfilesPostPermissionProfiles(accountId: Swift.String, body: DocuSignAPI.DSAPIPermissionProfile? = nil, include: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIPermissionProfile?, _ error: Swift.Error?) -> Swift.Void))
  open class func permissionProfilesPostPermissionProfilesWithRequestBuilder(accountId: Swift.String, body: DocuSignAPI.DSAPIPermissionProfile? = nil, include: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIPermissionProfile>
  open class func permissionProfilesPutPermissionProfiles(accountId: Swift.String, permissionProfileId: Swift.String, body: DocuSignAPI.DSAPIPermissionProfile? = nil, include: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIPermissionProfile?, _ error: Swift.Error?) -> Swift.Void))
  open class func permissionProfilesPutPermissionProfilesWithRequestBuilder(accountId: Swift.String, permissionProfileId: Swift.String, body: DocuSignAPI.DSAPIPermissionProfile? = nil, include: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIPermissionProfile>
  open class func recipientNamesGetRecipientNames(accountId: Swift.String, email: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIRecipientNamesResponse?, _ error: Swift.Error?) -> Swift.Void))
  open class func recipientNamesGetRecipientNamesWithRequestBuilder(accountId: Swift.String, email: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIRecipientNamesResponse>
  open class func reservedDomainsGetReservedDomainExistence(accountId: Swift.String, emailDomain: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPIReservedDomainExistence?, _ error: Swift.Error?) -> Swift.Void))
  open class func reservedDomainsGetReservedDomainExistenceWithRequestBuilder(accountId: Swift.String, emailDomain: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIReservedDomainExistence>
  @objc open class func settingsGetSettings(accountId: Swift.String, completion: @escaping ((_ data: Foundation.Data?, _ error: Swift.Error?) -> Swift.Void))
  open class func settingsGetSettingsWithRequestBuilder(accountId: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIAccountSettingsInformation>
  open class func settingsPutSettings(accountId: Swift.String, body: DocuSignAPI.DSAPIAccountSettingsInformation? = nil, completion: @escaping ((_ data: Swift.Void?, _ error: Swift.Error?) -> Swift.Void))
  open class func settingsPutSettingsWithRequestBuilder(accountId: Swift.String, body: DocuSignAPI.DSAPIAccountSettingsInformation? = nil) -> DocuSignAPI.RequestBuilder<Swift.Void>
  open class func sharedAccessGetSharedAccess(accountId: Swift.String, count: Swift.String? = nil, envelopesNotSharedUserStatus: Swift.String? = nil, folderIds: Swift.String? = nil, itemType: Swift.String? = nil, searchText: Swift.String? = nil, shared: Swift.String? = nil, startPosition: Swift.String? = nil, userIds: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIAccountSharedAccess?, _ error: Swift.Error?) -> Swift.Void))
  open class func sharedAccessGetSharedAccessWithRequestBuilder(accountId: Swift.String, count: Swift.String? = nil, envelopesNotSharedUserStatus: Swift.String? = nil, folderIds: Swift.String? = nil, itemType: Swift.String? = nil, searchText: Swift.String? = nil, shared: Swift.String? = nil, startPosition: Swift.String? = nil, userIds: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIAccountSharedAccess>
  open class func sharedAccessPutSharedAccess(accountId: Swift.String, body: DocuSignAPI.DSAPIAccountSharedAccess? = nil, itemType: Swift.String? = nil, preserveExistingSharedAccess: Swift.String? = nil, userIds: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIAccountSharedAccess?, _ error: Swift.Error?) -> Swift.Void))
  open class func sharedAccessPutSharedAccessWithRequestBuilder(accountId: Swift.String, body: DocuSignAPI.DSAPIAccountSharedAccess? = nil, itemType: Swift.String? = nil, preserveExistingSharedAccess: Swift.String? = nil, userIds: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIAccountSharedAccess>
  open class func supportedLanguagesGetSupportedLanguages(accountId: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPISupportedLanguages?, _ error: Swift.Error?) -> Swift.Void))
  open class func supportedLanguagesGetSupportedLanguagesWithRequestBuilder(accountId: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPISupportedLanguages>
  open class func tabSettingsGetTabSettings(accountId: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPITabAccountSettings?, _ error: Swift.Error?) -> Swift.Void))
  open class func tabSettingsGetTabSettingsWithRequestBuilder(accountId: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPITabAccountSettings>
  open class func tabSettingsPutSettings(accountId: Swift.String, body: DocuSignAPI.DSAPITabAccountSettings? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPITabAccountSettings?, _ error: Swift.Error?) -> Swift.Void))
  open class func tabSettingsPutSettingsWithRequestBuilder(accountId: Swift.String, body: DocuSignAPI.DSAPITabAccountSettings? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPITabAccountSettings>
  open class func unsupportedFileTypesGetUnsupportedFileTypes(accountId: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPIFileTypeList?, _ error: Swift.Error?) -> Swift.Void))
  open class func unsupportedFileTypesGetUnsupportedFileTypesWithRequestBuilder(accountId: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIFileTypeList>
  open class func watermarkGetWatermark(accountId: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPIWatermark?, _ error: Swift.Error?) -> Swift.Void))
  open class func watermarkGetWatermarkWithRequestBuilder(accountId: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIWatermark>
  open class func watermarkPreviewPutWatermarkPreview(accountId: Swift.String, body: DocuSignAPI.DSAPIWatermark? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIWatermark?, _ error: Swift.Error?) -> Swift.Void))
  open class func watermarkPreviewPutWatermarkPreviewWithRequestBuilder(accountId: Swift.String, body: DocuSignAPI.DSAPIWatermark? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIWatermark>
  open class func watermarkPutWatermark(accountId: Swift.String, body: DocuSignAPI.DSAPIWatermark? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIWatermark?, _ error: Swift.Error?) -> Swift.Void))
  open class func watermarkPutWatermarkWithRequestBuilder(accountId: Swift.String, body: DocuSignAPI.DSAPIWatermark? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIWatermark>
  @objc override dynamic public init()
  @objc deinit
}
public struct DSAPIEnvelopeUpdateSummary : Swift.Codable {
  public var bulkEnvelopeStatus: DocuSignAPI.DSAPIBulkEnvelopeStatus?
  public var envelopeId: Swift.String?
  public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  public var listCustomFieldUpdateResults: [DocuSignAPI.DSAPIListCustomField]?
  public var lockInformation: DocuSignAPI.DSAPILockInformation?
  public var purgeState: Swift.String?
  public var recipientUpdateResults: [DocuSignAPI.DSAPIRecipientUpdateResponse]?
  public var tabUpdateResults: DocuSignAPI.DSAPITabs?
  public var textCustomFieldUpdateResults: [DocuSignAPI.DSAPITextCustomField]?
  public init(bulkEnvelopeStatus: DocuSignAPI.DSAPIBulkEnvelopeStatus? = nil, envelopeId: Swift.String? = nil, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, listCustomFieldUpdateResults: [DocuSignAPI.DSAPIListCustomField]? = nil, lockInformation: DocuSignAPI.DSAPILockInformation? = nil, purgeState: Swift.String? = nil, recipientUpdateResults: [DocuSignAPI.DSAPIRecipientUpdateResponse]? = nil, tabUpdateResults: DocuSignAPI.DSAPITabs? = nil, textCustomFieldUpdateResults: [DocuSignAPI.DSAPITextCustomField]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIExternalPrimaryAccountRecipientAuthRequirements : Swift.Codable {
  public var accessCode: Swift.String?
  public var idVerification: Swift.String?
  public var kba: Swift.String?
  public var phone: Swift.String?
  public init(accessCode: Swift.String? = nil, idVerification: Swift.String? = nil, kba: Swift.String? = nil, phone: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct RequestBody {
}
public struct DSAPINotaryJournalMetaData : Swift.Codable {
  public var comment: Swift.String?
  public var credibleWitnesses: [DocuSignAPI.DSAPINotaryJournalCredibleWitness]?
  public var signatureImage: Swift.String?
  public var signerIdType: Swift.String?
  public init(comment: Swift.String? = nil, credibleWitnesses: [DocuSignAPI.DSAPINotaryJournalCredibleWitness]? = nil, signatureImage: Swift.String? = nil, signerIdType: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIFolderItemV2 : Swift.Codable {
  public var completedDateTime: Foundation.Date?
  public var createdDateTime: Foundation.Date?
  public var envelopeId: Swift.String?
  public var envelopeUri: Foundation.URL?
  public var expireDateTime: Foundation.Date?
  public var folderId: Swift.String?
  public var folderUri: Foundation.URL?
  @DocuSignAPI.BoolFromString public var is21CFRPart11: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var lastModifiedDateTime: Foundation.Date?
  public var ownerName: Swift.String?
  public var recipients: DocuSignAPI.DSAPIRecipients?
  public var recipientsUri: Foundation.URL?
  public var senderCompany: Swift.String?
  public var senderEmail: Swift.String?
  public var senderName: Swift.String?
  public var senderUserId: Swift.String?
  public var sentDateTime: Foundation.Date?
  public var status: Swift.String?
  public var subject: Swift.String?
  public var templateId: Swift.String?
  public var templateUri: Foundation.URL?
  public init(completedDateTime: Foundation.Date? = nil, createdDateTime: Foundation.Date? = nil, envelopeId: Swift.String? = nil, envelopeUri: Foundation.URL? = nil, expireDateTime: Foundation.Date? = nil, folderId: Swift.String? = nil, folderUri: Foundation.URL? = nil, is21CFRPart11: Swift.Bool = false, lastModifiedDateTime: Foundation.Date? = nil, ownerName: Swift.String? = nil, recipients: DocuSignAPI.DSAPIRecipients? = nil, recipientsUri: Foundation.URL? = nil, senderCompany: Swift.String? = nil, senderEmail: Swift.String? = nil, senderName: Swift.String? = nil, senderUserId: Swift.String? = nil, sentDateTime: Foundation.Date? = nil, status: Swift.String? = nil, subject: Swift.String? = nil, templateId: Swift.String? = nil, templateUri: Foundation.URL? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @objcMembers public class DSAPICheckbox : ObjectiveC.NSObject, Swift.Codable {
  @objc @DocuSignAPI.BoolFromString public var anchorAllowWhiteSpaceInCharacters: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorAllowWhiteSpaceInCharactersMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var anchorCaseSensitive: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorCaseSensitiveMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorHorizontalAlignment: Swift.String?
  @objc public var anchorHorizontalAlignmentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var anchorIgnoreIfNotPresent: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorIgnoreIfNotPresentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var anchorMatchWholeWord: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorMatchWholeWordMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorString: Swift.String?
  @objc public var anchorStringMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorTabProcessorVersion: Swift.String?
  @objc public var anchorTabProcessorVersionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorUnits: Swift.String?
  @objc public var anchorUnitsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorXOffset: Swift.String?
  @objc public var anchorXOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorYOffset: Swift.String?
  @objc public var anchorYOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var bold: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var boldMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var conditionalParentLabel: Swift.String?
  @objc public var conditionalParentLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var conditionalParentValue: Swift.String?
  @objc public var conditionalParentValueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var customTabId: Swift.String?
  @objc public var customTabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var documentId: Swift.String?
  @objc public var documentIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  @objc public var font: Swift.String?
  @objc public var fontColor: Swift.String?
  @objc public var fontColorMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var fontMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var fontSize: Swift.String?
  @objc public var fontSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var formOrder: Swift.String?
  @objc public var formOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var formPageLabel: Swift.String?
  @objc public var formPageLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var formPageNumber: Swift.String?
  @objc public var formPageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var height: Swift.String?
  @objc public var heightMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var italic: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var italicMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var locked: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var lockedMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var mergeField: DocuSignAPI.DSAPIMergeField?
  @objc public var mergeFieldXml: Swift.String?
  @objc public var name: Swift.String?
  @objc public var nameMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var originalValue: Swift.String?
  @objc public var originalValueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var pageNumber: Swift.String?
  @objc public var pageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var recipientId: Swift.String?
  @objc public var recipientIdGuid: Swift.String?
  @objc public var recipientIdGuidMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var recipientIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var required: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var requiredMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var requireInitialOnSharedChange: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var requireInitialOnSharedChangeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var selected: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var selectedMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var selectedOriginal: Swift.String?
  @objc public var selectedOriginalMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var shared: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var sharedMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var shareToRecipients: Swift.String?
  @objc public var shareToRecipientsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var smartContractInformation: DocuSignAPI.DSAPISmartContractInformation?
  @objc public var source: Swift.String?
  @objc public var status: Swift.String?
  @objc public var statusMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabGroupLabels: [Swift.String]?
  @objc public var tabGroupLabelsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabId: Swift.String?
  @objc public var tabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabLabel: Swift.String?
  @objc public var tabLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabOrder: Swift.String?
  @objc public var tabOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabType: Swift.String?
  @objc public var tabTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var templateLocked: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var templateLockedMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var templateRequired: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var templateRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tooltip: Swift.String?
  @objc public var toolTipMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var underline: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var underlineMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var value: Swift.String?
  @objc public var valueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var width: Swift.String?
  @objc public var widthMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var xPosition: Swift.String?
  @objc public var xPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var yPosition: Swift.String?
  @objc public var yPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc override dynamic public init()
  public init(anchorAllowWhiteSpaceInCharacters: Swift.Bool = false, anchorAllowWhiteSpaceInCharactersMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorCaseSensitive: Swift.Bool = false, anchorCaseSensitiveMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorHorizontalAlignment: Swift.String? = nil, anchorHorizontalAlignmentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorIgnoreIfNotPresent: Swift.Bool = false, anchorIgnoreIfNotPresentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorMatchWholeWord: Swift.Bool = false, anchorMatchWholeWordMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorString: Swift.String? = nil, anchorStringMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorTabProcessorVersion: Swift.String? = nil, anchorTabProcessorVersionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorUnits: Swift.String? = nil, anchorUnitsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorXOffset: Swift.String? = nil, anchorXOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorYOffset: Swift.String? = nil, anchorYOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, bold: Swift.Bool = false, boldMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, conditionalParentLabel: Swift.String? = nil, conditionalParentLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, conditionalParentValue: Swift.String? = nil, conditionalParentValueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, customTabId: Swift.String? = nil, customTabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, documentId: Swift.String? = nil, documentIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, font: Swift.String? = nil, fontColor: Swift.String? = nil, fontColorMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, fontMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, fontSize: Swift.String? = nil, fontSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formOrder: Swift.String? = nil, formOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formPageLabel: Swift.String? = nil, formPageLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formPageNumber: Swift.String? = nil, formPageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, height: Swift.String? = nil, heightMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, italic: Swift.Bool = false, italicMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, locked: Swift.Bool = false, lockedMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, mergeField: DocuSignAPI.DSAPIMergeField? = nil, mergeFieldXml: Swift.String? = nil, name: Swift.String? = nil, nameMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, originalValue: Swift.String? = nil, originalValueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, pageNumber: Swift.String? = nil, pageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, recipientId: Swift.String? = nil, recipientIdGuid: Swift.String? = nil, recipientIdGuidMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, recipientIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, required: Swift.Bool = false, requiredMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, requireInitialOnSharedChange: Swift.Bool = false, requireInitialOnSharedChangeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, selected: Swift.Bool = false, selectedMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, selectedOriginal: Swift.String? = nil, selectedOriginalMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, shared: Swift.Bool = false, sharedMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, shareToRecipients: Swift.String? = nil, shareToRecipientsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, smartContractInformation: DocuSignAPI.DSAPISmartContractInformation? = nil, source: Swift.String? = nil, status: Swift.String? = nil, statusMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabGroupLabels: [Swift.String]? = nil, tabGroupLabelsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabId: Swift.String? = nil, tabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabLabel: Swift.String? = nil, tabLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabOrder: Swift.String? = nil, tabOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabType: Swift.String? = nil, tabTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, templateLocked: Swift.Bool = false, templateLockedMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, templateRequired: Swift.Bool = false, templateRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tooltip: Swift.String? = nil, toolTipMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, underline: Swift.Bool = false, underlineMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, value: Swift.String? = nil, valueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, width: Swift.String? = nil, widthMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, xPosition: Swift.String? = nil, xPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, yPosition: Swift.String? = nil, yPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @objcMembers public class DSAPIText : ObjectiveC.NSObject, Swift.Codable {
  @objc @DocuSignAPI.BoolFromString public var anchorAllowWhiteSpaceInCharacters: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorAllowWhiteSpaceInCharactersMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var anchorCaseSensitive: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorCaseSensitiveMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorHorizontalAlignment: Swift.String?
  @objc public var anchorHorizontalAlignmentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var anchorIgnoreIfNotPresent: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorIgnoreIfNotPresentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var anchorMatchWholeWord: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorMatchWholeWordMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorString: Swift.String?
  @objc public var anchorStringMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorTabProcessorVersion: Swift.String?
  @objc public var anchorTabProcessorVersionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorUnits: Swift.String?
  @objc public var anchorUnitsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorXOffset: Swift.String?
  @objc public var anchorXOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorYOffset: Swift.String?
  @objc public var anchorYOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var bold: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var boldMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var concealValueOnDocument: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var concealValueOnDocumentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var conditionalParentLabel: Swift.String?
  @objc public var conditionalParentLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var conditionalParentValue: Swift.String?
  @objc public var conditionalParentValueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var customTabId: Swift.String?
  @objc public var customTabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var disableAutoSize: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var disableAutoSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var documentId: Swift.String?
  @objc public var documentIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  @objc public var font: Swift.String?
  @objc public var fontColor: Swift.String?
  @objc public var fontColorMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var fontMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var fontSize: Swift.String?
  @objc public var fontSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var formOrder: Swift.String?
  @objc public var formOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var formPageLabel: Swift.String?
  @objc public var formPageLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var formPageNumber: Swift.String?
  @objc public var formPageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var formula: Swift.String?
  @objc public var formulaMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var height: Swift.String?
  @objc public var heightMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var isPaymentAmount: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var isPaymentAmountMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var italic: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var italicMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var localePolicy: DocuSignAPI.DSAPILocalePolicyTab?
  @objc @DocuSignAPI.BoolFromString public var locked: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var lockedMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var maxLength: Swift.String?
  @objc public var maxLengthMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var mergeField: DocuSignAPI.DSAPIMergeField?
  @objc public var mergeFieldXml: Swift.String?
  @objc public var name: Swift.String?
  @objc public var nameMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var originalValue: Swift.String?
  @objc public var originalValueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var pageNumber: Swift.String?
  @objc public var pageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var recipientId: Swift.String?
  @objc public var recipientIdGuid: Swift.String?
  @objc public var recipientIdGuidMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var recipientIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var requireAll: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var requireAllMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var required: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var requiredMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var requireInitialOnSharedChange: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var requireInitialOnSharedChangeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var senderRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var shared: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var sharedMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var shareToRecipients: Swift.String?
  @objc public var shareToRecipientsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var smartContractInformation: DocuSignAPI.DSAPISmartContractInformation?
  @objc public var source: Swift.String?
  @objc public var status: Swift.String?
  @objc public var statusMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabGroupLabels: [Swift.String]?
  @objc public var tabGroupLabelsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabId: Swift.String?
  @objc public var tabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabLabel: Swift.String?
  @objc public var tabLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabOrder: Swift.String?
  @objc public var tabOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabType: Swift.String?
  @objc public var tabTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var templateLocked: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var templateLockedMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var templateRequired: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var templateRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tooltip: Swift.String?
  @objc public var toolTipMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var underline: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var underlineMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var validationMessage: Swift.String?
  @objc public var validationMessageMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var validationPattern: Swift.String?
  @objc public var validationPatternMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var value: Swift.String?
  @objc public var valueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var width: Swift.String?
  @objc public var widthMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var xPosition: Swift.String?
  @objc public var xPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var yPosition: Swift.String?
  @objc public var yPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc override dynamic public init()
  public init(anchorAllowWhiteSpaceInCharacters: Swift.Bool = false, anchorAllowWhiteSpaceInCharactersMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorCaseSensitive: Swift.Bool = false, anchorCaseSensitiveMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorHorizontalAlignment: Swift.String? = nil, anchorHorizontalAlignmentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorIgnoreIfNotPresent: Swift.Bool = false, anchorIgnoreIfNotPresentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorMatchWholeWord: Swift.Bool = false, anchorMatchWholeWordMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorString: Swift.String? = nil, anchorStringMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorTabProcessorVersion: Swift.String? = nil, anchorTabProcessorVersionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorUnits: Swift.String? = nil, anchorUnitsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorXOffset: Swift.String? = nil, anchorXOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorYOffset: Swift.String? = nil, anchorYOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, bold: Swift.Bool = false, boldMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, concealValueOnDocument: Swift.Bool = false, concealValueOnDocumentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, conditionalParentLabel: Swift.String? = nil, conditionalParentLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, conditionalParentValue: Swift.String? = nil, conditionalParentValueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, customTabId: Swift.String? = nil, customTabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, disableAutoSize: Swift.Bool = false, disableAutoSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, documentId: Swift.String? = nil, documentIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, font: Swift.String? = nil, fontColor: Swift.String? = nil, fontColorMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, fontMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, fontSize: Swift.String? = nil, fontSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formOrder: Swift.String? = nil, formOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formPageLabel: Swift.String? = nil, formPageLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formPageNumber: Swift.String? = nil, formPageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formula: Swift.String? = nil, formulaMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, height: Swift.String? = nil, heightMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, isPaymentAmount: Swift.Bool = false, isPaymentAmountMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, italic: Swift.Bool = false, italicMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, localePolicy: DocuSignAPI.DSAPILocalePolicyTab? = nil, locked: Swift.Bool = false, lockedMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, maxLength: Swift.String? = nil, maxLengthMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, mergeField: DocuSignAPI.DSAPIMergeField? = nil, mergeFieldXml: Swift.String? = nil, name: Swift.String? = nil, nameMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, originalValue: Swift.String? = nil, originalValueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, pageNumber: Swift.String? = nil, pageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, recipientId: Swift.String? = nil, recipientIdGuid: Swift.String? = nil, recipientIdGuidMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, recipientIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, requireAll: Swift.Bool = false, requireAllMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, required: Swift.Bool = false, requiredMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, requireInitialOnSharedChange: Swift.Bool = false, requireInitialOnSharedChangeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, senderRequired: Swift.Bool = false, senderRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, shared: Swift.Bool = false, sharedMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, shareToRecipients: Swift.String? = nil, shareToRecipientsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, smartContractInformation: DocuSignAPI.DSAPISmartContractInformation? = nil, source: Swift.String? = nil, status: Swift.String? = nil, statusMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabGroupLabels: [Swift.String]? = nil, tabGroupLabelsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabId: Swift.String? = nil, tabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabLabel: Swift.String? = nil, tabLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabOrder: Swift.String? = nil, tabOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabType: Swift.String? = nil, tabTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, templateLocked: Swift.Bool = false, templateLockedMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, templateRequired: Swift.Bool = false, templateRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tooltip: Swift.String? = nil, toolTipMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, underline: Swift.Bool = false, underlineMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, validationMessage: Swift.String? = nil, validationMessageMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, validationPattern: Swift.String? = nil, validationPatternMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, value: Swift.String? = nil, valueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, width: Swift.String? = nil, widthMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, xPosition: Swift.String? = nil, xPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, yPosition: Swift.String? = nil, yPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIFormDataItem : Swift.Codable {
  public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  public var listSelectedValue: Swift.String?
  public var name: Swift.String?
  public var numericalValue: Swift.String?
  public var originalValue: Swift.String?
  public var value: Swift.String?
  public init(errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, listSelectedValue: Swift.String? = nil, name: Swift.String? = nil, numericalValue: Swift.String? = nil, originalValue: Swift.String? = nil, value: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIMemberGroupSharedItem : Swift.Codable {
  public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  public var group: DocuSignAPI.DSAPIGroup?
  public var shared: Swift.String?
  public init(errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, group: DocuSignAPI.DSAPIGroup? = nil, shared: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIProvince : Swift.Codable {
  public var isoCode: Swift.String?
  public var name: Swift.String?
  public init(isoCode: Swift.String? = nil, name: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPISeatDiscount : Swift.Codable {
  public var beginSeatCount: Swift.String?
  public var discountPercent: Swift.String?
  public var endSeatCount: Swift.String?
  public init(beginSeatCount: Swift.String? = nil, discountPercent: Swift.String? = nil, endSeatCount: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @objcMembers public class DSAPIUserSignaturesInformation : ObjectiveC.NSObject, Swift.Codable {
  @objc public var userSignatures: [DocuSignAPI.DSAPIUserSignature]?
  @objc public init(userSignatures: [DocuSignAPI.DSAPIUserSignature]? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIPrefillTabs : Swift.Codable {
  public var checkboxTabs: [DocuSignAPI.DSAPICheckbox]?
  public var radioGroupTabs: [DocuSignAPI.DSAPIRadioGroup]?
  public var senderCompanyTabs: [DocuSignAPI.DSAPISenderCompany]?
  public var senderNameTabs: [DocuSignAPI.DSAPISenderName]?
  public var tabGroups: [DocuSignAPI.DSAPITabGroup]?
  public var textTabs: [DocuSignAPI.DSAPIText]?
  public init(checkboxTabs: [DocuSignAPI.DSAPICheckbox]? = nil, radioGroupTabs: [DocuSignAPI.DSAPIRadioGroup]? = nil, senderCompanyTabs: [DocuSignAPI.DSAPISenderCompany]? = nil, senderNameTabs: [DocuSignAPI.DSAPISenderName]? = nil, tabGroups: [DocuSignAPI.DSAPITabGroup]? = nil, textTabs: [DocuSignAPI.DSAPIText]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIRecipientSignatureProvider : Swift.Codable {
  public var sealDocumentsWithTabsOnly: Swift.String?
  public var sealName: Swift.String?
  public var signatureProviderName: Swift.String?
  public var signatureProviderNameMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var signatureProviderOptions: DocuSignAPI.DSAPIRecipientSignatureProviderOptions?
  public init(sealDocumentsWithTabsOnly: Swift.String? = nil, sealName: Swift.String? = nil, signatureProviderName: Swift.String? = nil, signatureProviderNameMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, signatureProviderOptions: DocuSignAPI.DSAPIRecipientSignatureProviderOptions? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIEnvelopeAttachmentsResult : Swift.Codable {
  public var attachments: [DocuSignAPI.DSAPIEnvelopeAttachment]?
  public init(attachments: [DocuSignAPI.DSAPIEnvelopeAttachment]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers open class CustomTabsAPI {
  open class func tabDeleteCustomTab(accountId: Swift.String, customTabId: Swift.String, completion: @escaping ((_ data: Swift.Void?, _ error: Swift.Error?) -> Swift.Void))
  open class func tabDeleteCustomTabWithRequestBuilder(accountId: Swift.String, customTabId: Swift.String) -> DocuSignAPI.RequestBuilder<Swift.Void>
  open class func tabGetCustomTab(accountId: Swift.String, customTabId: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPITabMetadata?, _ error: Swift.Error?) -> Swift.Void))
  open class func tabGetCustomTabWithRequestBuilder(accountId: Swift.String, customTabId: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPITabMetadata>
  open class func tabPutCustomTab(accountId: Swift.String, customTabId: Swift.String, body: DocuSignAPI.DSAPITabMetadata? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPITabMetadata?, _ error: Swift.Error?) -> Swift.Void))
  open class func tabPutCustomTabWithRequestBuilder(accountId: Swift.String, customTabId: Swift.String, body: DocuSignAPI.DSAPITabMetadata? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPITabMetadata>
  open class func tabsGetTabDefinitions(accountId: Swift.String, customTabOnly: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPITabMetadataList?, _ error: Swift.Error?) -> Swift.Void))
  open class func tabsGetTabDefinitionsWithRequestBuilder(accountId: Swift.String, customTabOnly: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPITabMetadataList>
  open class func tabsPostTabDefinitions(accountId: Swift.String, body: DocuSignAPI.DSAPITabMetadata? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPITabMetadata?, _ error: Swift.Error?) -> Swift.Void))
  open class func tabsPostTabDefinitionsWithRequestBuilder(accountId: Swift.String, body: DocuSignAPI.DSAPITabMetadata? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPITabMetadata>
  @objc deinit
}
public struct DSAPIProvisioningInformation : Swift.Codable {
  public var defaultConnectionId: Swift.String?
  public var defaultPlanId: Swift.String?
  public var distributorCode: Swift.String?
  public var distributorPassword: Swift.String?
  public var passwordRuleText: Swift.String?
  public var planPromotionText: Swift.String?
  public var purchaseOrderOrPromAllowed: Swift.String?
  public init(defaultConnectionId: Swift.String? = nil, defaultPlanId: Swift.String? = nil, distributorCode: Swift.String? = nil, distributorPassword: Swift.String? = nil, passwordRuleText: Swift.String? = nil, planPromotionText: Swift.String? = nil, purchaseOrderOrPromAllowed: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIBrand : Swift.Codable {
  public var brandCompany: Swift.String?
  public var brandId: Swift.String?
  public var brandLanguages: [Swift.String]?
  public var brandName: Swift.String?
  public var colors: [DocuSignAPI.DSAPINameValue]?
  public var defaultBrandLanguage: Swift.String?
  public var emailContent: [DocuSignAPI.DSAPIBrandEmailContent]?
  public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  public var isOverridingCompanyName: Swift.Bool
  public var isSendingDefault: Swift.Bool
  public var isSigningDefault: Swift.Bool
  public var landingPages: [DocuSignAPI.DSAPINameValue]?
  public var links: [DocuSignAPI.DSAPIBrandLink]?
  public var logos: DocuSignAPI.DSAPIBrandLogos?
  public var resources: DocuSignAPI.DSAPIBrandResourceUrls?
  public init(brandCompany: Swift.String? = nil, brandId: Swift.String? = nil, brandLanguages: [Swift.String]? = nil, brandName: Swift.String? = nil, colors: [DocuSignAPI.DSAPINameValue]? = nil, defaultBrandLanguage: Swift.String? = nil, emailContent: [DocuSignAPI.DSAPIBrandEmailContent]? = nil, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, isOverridingCompanyName: Swift.Bool = false, isSendingDefault: Swift.Bool = false, isSigningDefault: Swift.Bool = false, landingPages: [DocuSignAPI.DSAPINameValue]? = nil, links: [DocuSignAPI.DSAPIBrandLink]? = nil, logos: DocuSignAPI.DSAPIBrandLogos? = nil, resources: DocuSignAPI.DSAPIBrandResourceUrls? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIConnectDebugLog : Swift.Codable {
  public var connectConfig: Swift.String?
  public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  public var eventDateTime: Foundation.Date?
  public var eventDescription: Swift.String?
  public var payload: Swift.String?
  public init(connectConfig: Swift.String? = nil, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, eventDateTime: Foundation.Date? = nil, eventDescription: Swift.String? = nil, payload: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIBccEmailArchiveHistoryList : Swift.Codable {
  public var bccEmailArchiveHistory: [DocuSignAPI.DSAPIBccEmailArchiveHistory]?
  public var endPosition: Swift.String?
  public var nextUri: Foundation.URL?
  public var previousUri: Foundation.URL?
  public var resultSetSize: Swift.String?
  public var startPosition: Swift.String?
  public var totalSetSize: Swift.String?
  public init(bccEmailArchiveHistory: [DocuSignAPI.DSAPIBccEmailArchiveHistory]? = nil, endPosition: Swift.String? = nil, nextUri: Foundation.URL? = nil, previousUri: Foundation.URL? = nil, resultSetSize: Swift.String? = nil, startPosition: Swift.String? = nil, totalSetSize: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @objcMembers public class DSAPILastName : ObjectiveC.NSObject, Swift.Codable {
  @objc @DocuSignAPI.BoolFromString public var anchorAllowWhiteSpaceInCharacters: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorAllowWhiteSpaceInCharactersMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var anchorCaseSensitive: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorCaseSensitiveMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorHorizontalAlignment: Swift.String?
  @objc public var anchorHorizontalAlignmentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var anchorIgnoreIfNotPresent: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorIgnoreIfNotPresentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var anchorMatchWholeWord: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorMatchWholeWordMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorString: Swift.String?
  @objc public var anchorStringMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorTabProcessorVersion: Swift.String?
  @objc public var anchorTabProcessorVersionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorUnits: Swift.String?
  @objc public var anchorUnitsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorXOffset: Swift.String?
  @objc public var anchorXOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorYOffset: Swift.String?
  @objc public var anchorYOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var bold: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var boldMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var conditionalParentLabel: Swift.String?
  @objc public var conditionalParentLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var conditionalParentValue: Swift.String?
  @objc public var conditionalParentValueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var customTabId: Swift.String?
  @objc public var customTabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var documentId: Swift.String?
  @objc public var documentIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  @objc public var font: Swift.String?
  @objc public var fontColor: Swift.String?
  @objc public var fontColorMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var fontMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var fontSize: Swift.String?
  @objc public var fontSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var formOrder: Swift.String?
  @objc public var formOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var formPageLabel: Swift.String?
  @objc public var formPageLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var formPageNumber: Swift.String?
  @objc public var formPageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var height: Swift.String?
  @objc public var heightMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var italic: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var italicMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var localePolicy: DocuSignAPI.DSAPILocalePolicyTab?
  @objc public var mergeField: DocuSignAPI.DSAPIMergeField?
  @objc public var mergeFieldXml: Swift.String?
  @objc public var name: Swift.String?
  @objc public var nameMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var pageNumber: Swift.String?
  @objc public var pageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var recipientId: Swift.String?
  @objc public var recipientIdGuid: Swift.String?
  @objc public var recipientIdGuidMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var recipientIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var smartContractInformation: DocuSignAPI.DSAPISmartContractInformation?
  @objc public var source: Swift.String?
  @objc public var status: Swift.String?
  @objc public var statusMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabGroupLabels: [Swift.String]?
  @objc public var tabGroupLabelsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabId: Swift.String?
  @objc public var tabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabLabel: Swift.String?
  @objc public var tabLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabOrder: Swift.String?
  @objc public var tabOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabType: Swift.String?
  @objc public var tabTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var templateLocked: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var templateLockedMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var templateRequired: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var templateRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tooltip: Swift.String?
  @objc public var toolTipMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var underline: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var underlineMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var value: Swift.String?
  @objc public var valueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var width: Swift.String?
  @objc public var widthMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var xPosition: Swift.String?
  @objc public var xPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var yPosition: Swift.String?
  @objc public var yPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public init(anchorAllowWhiteSpaceInCharacters: Swift.Bool = false, anchorAllowWhiteSpaceInCharactersMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorCaseSensitive: Swift.Bool = false, anchorCaseSensitiveMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorHorizontalAlignment: Swift.String? = nil, anchorHorizontalAlignmentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorIgnoreIfNotPresent: Swift.Bool = false, anchorIgnoreIfNotPresentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorMatchWholeWord: Swift.Bool = false, anchorMatchWholeWordMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorString: Swift.String? = nil, anchorStringMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorTabProcessorVersion: Swift.String? = nil, anchorTabProcessorVersionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorUnits: Swift.String? = nil, anchorUnitsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorXOffset: Swift.String? = nil, anchorXOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorYOffset: Swift.String? = nil, anchorYOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, bold: Swift.Bool = false, boldMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, conditionalParentLabel: Swift.String? = nil, conditionalParentLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, conditionalParentValue: Swift.String? = nil, conditionalParentValueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, customTabId: Swift.String? = nil, customTabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, documentId: Swift.String? = nil, documentIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, font: Swift.String? = nil, fontColor: Swift.String? = nil, fontColorMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, fontMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, fontSize: Swift.String? = nil, fontSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formOrder: Swift.String? = nil, formOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formPageLabel: Swift.String? = nil, formPageLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formPageNumber: Swift.String? = nil, formPageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, height: Swift.String? = nil, heightMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, italic: Swift.Bool = false, italicMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, localePolicy: DocuSignAPI.DSAPILocalePolicyTab? = nil, mergeField: DocuSignAPI.DSAPIMergeField? = nil, mergeFieldXml: Swift.String? = nil, name: Swift.String? = nil, nameMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, pageNumber: Swift.String? = nil, pageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, recipientId: Swift.String? = nil, recipientIdGuid: Swift.String? = nil, recipientIdGuidMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, recipientIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, smartContractInformation: DocuSignAPI.DSAPISmartContractInformation? = nil, source: Swift.String? = nil, status: Swift.String? = nil, statusMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabGroupLabels: [Swift.String]? = nil, tabGroupLabelsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabId: Swift.String? = nil, tabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabLabel: Swift.String? = nil, tabLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabOrder: Swift.String? = nil, tabOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabType: Swift.String? = nil, tabTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, templateLocked: Swift.Bool = false, templateLockedMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, templateRequired: Swift.Bool = false, templateRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tooltip: Swift.String? = nil, toolTipMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, underline: Swift.Bool = false, underlineMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, value: Swift.String? = nil, valueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, width: Swift.String? = nil, widthMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, xPosition: Swift.String? = nil, xPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, yPosition: Swift.String? = nil, yPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIBulkRecipientsRequest : Swift.Codable {
  public var bulkRecipients: [DocuSignAPI.DSAPIBulkRecipient]?
  public init(bulkRecipients: [DocuSignAPI.DSAPIBulkRecipient]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIDobInformationInput : Swift.Codable {
  public var dateOfBirth: Swift.String?
  public var displayLevelCode: Swift.String?
  @DocuSignAPI.BoolFromString public var receiveInResponse: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public init(dateOfBirth: Swift.String? = nil, displayLevelCode: Swift.String? = nil, receiveInResponse: Swift.Bool = false)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIEnvelopeMetadata : Swift.Codable {
  @DocuSignAPI.BoolFromString public var allowAdvancedCorrect: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  @DocuSignAPI.BoolFromString public var allowCorrect: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  @DocuSignAPI.BoolFromString public var enableSignWithNotary: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public init(allowAdvancedCorrect: Swift.Bool = false, allowCorrect: Swift.Bool = false, enableSignWithNotary: Swift.Bool = false)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIConnectConfigResults : Swift.Codable {
  public var configurations: [DocuSignAPI.DSAPIConnectCustomConfiguration]?
  public var totalRecords: Swift.String?
  public init(configurations: [DocuSignAPI.DSAPIConnectCustomConfiguration]? = nil, totalRecords: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers open class WorkspacesAPI {
  open class func workspaceDeleteWorkspace(accountId: Swift.String, workspaceId: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPIWorkspace?, _ error: Swift.Error?) -> Swift.Void))
  open class func workspaceDeleteWorkspaceWithRequestBuilder(accountId: Swift.String, workspaceId: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIWorkspace>
  open class func workspaceFileGetWorkspaceFile(accountId: Swift.String, fileId: Swift.String, folderId: Swift.String, workspaceId: Swift.String, isDownload: Swift.String? = nil, pdfVersion: Swift.String? = nil, completion: @escaping ((_ data: Swift.Void?, _ error: Swift.Error?) -> Swift.Void))
  open class func workspaceFileGetWorkspaceFileWithRequestBuilder(accountId: Swift.String, fileId: Swift.String, folderId: Swift.String, workspaceId: Swift.String, isDownload: Swift.String? = nil, pdfVersion: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<Swift.Void>
  open class func workspaceFilePagesGetWorkspaceFilePages(accountId: Swift.String, fileId: Swift.String, folderId: Swift.String, workspaceId: Swift.String, count: Swift.String? = nil, dpi: Swift.String? = nil, maxHeight: Swift.String? = nil, maxWidth: Swift.String? = nil, startPosition: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIPageImages?, _ error: Swift.Error?) -> Swift.Void))
  open class func workspaceFilePagesGetWorkspaceFilePagesWithRequestBuilder(accountId: Swift.String, fileId: Swift.String, folderId: Swift.String, workspaceId: Swift.String, count: Swift.String? = nil, dpi: Swift.String? = nil, maxHeight: Swift.String? = nil, maxWidth: Swift.String? = nil, startPosition: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIPageImages>
  open class func workspaceFilePostWorkspaceFiles(accountId: Swift.String, folderId: Swift.String, workspaceId: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPIWorkspaceItem?, _ error: Swift.Error?) -> Swift.Void))
  open class func workspaceFilePostWorkspaceFilesWithRequestBuilder(accountId: Swift.String, folderId: Swift.String, workspaceId: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIWorkspaceItem>
  open class func workspaceFilePutWorkspaceFile(accountId: Swift.String, fileId: Swift.String, folderId: Swift.String, workspaceId: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPIWorkspaceItem?, _ error: Swift.Error?) -> Swift.Void))
  open class func workspaceFilePutWorkspaceFileWithRequestBuilder(accountId: Swift.String, fileId: Swift.String, folderId: Swift.String, workspaceId: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIWorkspaceItem>
  open class func workspaceFolderDeleteWorkspaceItems(accountId: Swift.String, folderId: Swift.String, workspaceId: Swift.String, body: DocuSignAPI.DSAPIWorkspaceItemList? = nil, completion: @escaping ((_ data: Swift.Void?, _ error: Swift.Error?) -> Swift.Void))
  open class func workspaceFolderDeleteWorkspaceItemsWithRequestBuilder(accountId: Swift.String, folderId: Swift.String, workspaceId: Swift.String, body: DocuSignAPI.DSAPIWorkspaceItemList? = nil) -> DocuSignAPI.RequestBuilder<Swift.Void>
  open class func workspaceFolderGetWorkspaceFolder(accountId: Swift.String, folderId: Swift.String, workspaceId: Swift.String, count: Swift.String? = nil, includeFiles: Swift.String? = nil, includeSubFolders: Swift.String? = nil, includeThumbnails: Swift.String? = nil, includeUserDetail: Swift.String? = nil, startPosition: Swift.String? = nil, workspaceUserId: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIWorkspaceFolderContents?, _ error: Swift.Error?) -> Swift.Void))
  open class func workspaceFolderGetWorkspaceFolderWithRequestBuilder(accountId: Swift.String, folderId: Swift.String, workspaceId: Swift.String, count: Swift.String? = nil, includeFiles: Swift.String? = nil, includeSubFolders: Swift.String? = nil, includeThumbnails: Swift.String? = nil, includeUserDetail: Swift.String? = nil, startPosition: Swift.String? = nil, workspaceUserId: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIWorkspaceFolderContents>
  open class func workspaceGetWorkspace(accountId: Swift.String, workspaceId: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPIWorkspace?, _ error: Swift.Error?) -> Swift.Void))
  open class func workspaceGetWorkspaceWithRequestBuilder(accountId: Swift.String, workspaceId: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIWorkspace>
  open class func workspaceGetWorkspaces(accountId: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPIWorkspaceList?, _ error: Swift.Error?) -> Swift.Void))
  open class func workspaceGetWorkspacesWithRequestBuilder(accountId: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIWorkspaceList>
  open class func workspacePostWorkspace(accountId: Swift.String, body: DocuSignAPI.DSAPIWorkspace? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIWorkspace?, _ error: Swift.Error?) -> Swift.Void))
  open class func workspacePostWorkspaceWithRequestBuilder(accountId: Swift.String, body: DocuSignAPI.DSAPIWorkspace? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIWorkspace>
  open class func workspacePutWorkspace(accountId: Swift.String, workspaceId: Swift.String, body: DocuSignAPI.DSAPIWorkspace? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIWorkspace?, _ error: Swift.Error?) -> Swift.Void))
  open class func workspacePutWorkspaceWithRequestBuilder(accountId: Swift.String, workspaceId: Swift.String, body: DocuSignAPI.DSAPIWorkspace? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIWorkspace>
  @objc deinit
}
public struct DSAPIEnvelopeCustomMetadata : Swift.Codable {
  public var envelopeCustomMetadataDetails: [DocuSignAPI.DSAPINameValue]?
  public init(envelopeCustomMetadataDetails: [DocuSignAPI.DSAPINameValue]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIBillingPaymentRequest : Swift.Codable {
  public var paymentAmount: Swift.String?
  public init(paymentAmount: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIDraw : Swift.Codable {
  @DocuSignAPI.BoolFromString public var allowSignerUpload: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  @DocuSignAPI.BoolFromString public var anchorAllowWhiteSpaceInCharacters: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var anchorAllowWhiteSpaceInCharactersMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var anchorCaseSensitive: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var anchorCaseSensitiveMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorHorizontalAlignment: Swift.String?
  public var anchorHorizontalAlignmentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var anchorIgnoreIfNotPresent: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var anchorIgnoreIfNotPresentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var anchorMatchWholeWord: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var anchorMatchWholeWordMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorString: Swift.String?
  public var anchorStringMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorTabProcessorVersion: Swift.String?
  public var anchorTabProcessorVersionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorUnits: Swift.String?
  public var anchorUnitsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorXOffset: Swift.String?
  public var anchorXOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var anchorYOffset: Swift.String?
  public var anchorYOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var conditionalParentLabel: Swift.String?
  public var conditionalParentLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var conditionalParentValue: Swift.String?
  public var conditionalParentValueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var customTabId: Swift.String?
  public var customTabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var documentId: Swift.String?
  public var documentIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  public var formOrder: Swift.String?
  public var formOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var formPageLabel: Swift.String?
  public var formPageLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var formPageNumber: Swift.String?
  public var formPageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var height: Swift.String?
  public var heightMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var locked: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var lockedMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var mergeField: DocuSignAPI.DSAPIMergeField?
  public var mergeFieldXml: Swift.String?
  public var pageNumber: Swift.String?
  public var pageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var recipientId: Swift.String?
  public var recipientIdGuid: Swift.String?
  public var recipientIdGuidMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var recipientIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var required: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var requiredMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var shared: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var sharedMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var smartContractInformation: DocuSignAPI.DSAPISmartContractInformation?
  public var source: Swift.String?
  public var status: Swift.String?
  public var statusMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var tabGroupLabels: [Swift.String]?
  public var tabGroupLabelsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var tabId: Swift.String?
  public var tabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var tabLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var tabOrder: Swift.String?
  public var tabOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var tabType: Swift.String?
  public var tabTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var templateLocked: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var templateLockedMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var templateRequired: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var templateRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var tooltip: Swift.String?
  public var toolTipMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var useBackgroundAsCanvas: Swift.String?
  public var width: Swift.String?
  public var widthMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var xPosition: Swift.String?
  public var xPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var yPosition: Swift.String?
  public var yPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public init(allowSignerUpload: Swift.Bool = false, anchorAllowWhiteSpaceInCharacters: Swift.Bool = false, anchorAllowWhiteSpaceInCharactersMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorCaseSensitive: Swift.Bool = false, anchorCaseSensitiveMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorHorizontalAlignment: Swift.String? = nil, anchorHorizontalAlignmentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorIgnoreIfNotPresent: Swift.Bool = false, anchorIgnoreIfNotPresentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorMatchWholeWord: Swift.Bool = false, anchorMatchWholeWordMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorString: Swift.String? = nil, anchorStringMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorTabProcessorVersion: Swift.String? = nil, anchorTabProcessorVersionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorUnits: Swift.String? = nil, anchorUnitsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorXOffset: Swift.String? = nil, anchorXOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorYOffset: Swift.String? = nil, anchorYOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, conditionalParentLabel: Swift.String? = nil, conditionalParentLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, conditionalParentValue: Swift.String? = nil, conditionalParentValueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, customTabId: Swift.String? = nil, customTabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, documentId: Swift.String? = nil, documentIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, formOrder: Swift.String? = nil, formOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formPageLabel: Swift.String? = nil, formPageLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formPageNumber: Swift.String? = nil, formPageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, height: Swift.String? = nil, heightMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, locked: Swift.Bool = false, lockedMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, mergeField: DocuSignAPI.DSAPIMergeField? = nil, mergeFieldXml: Swift.String? = nil, pageNumber: Swift.String? = nil, pageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, recipientId: Swift.String? = nil, recipientIdGuid: Swift.String? = nil, recipientIdGuidMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, recipientIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, required: Swift.Bool = false, requiredMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, shared: Swift.Bool = false, sharedMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, smartContractInformation: DocuSignAPI.DSAPISmartContractInformation? = nil, source: Swift.String? = nil, status: Swift.String? = nil, statusMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabGroupLabels: [Swift.String]? = nil, tabGroupLabelsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabId: Swift.String? = nil, tabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabOrder: Swift.String? = nil, tabOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabType: Swift.String? = nil, tabTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, templateLocked: Swift.Bool = false, templateLockedMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, templateRequired: Swift.Bool = false, templateRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tooltip: Swift.String? = nil, toolTipMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, useBackgroundAsCanvas: Swift.String? = nil, width: Swift.String? = nil, widthMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, xPosition: Swift.String? = nil, xPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, yPosition: Swift.String? = nil, yPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIEnvelopeTransferRule : Swift.Codable {
  @DocuSignAPI.BoolFromString public var carbonCopyOriginalOwner: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  @DocuSignAPI.BoolFromString public var enabled: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var envelopeTransferRuleId: Swift.String?
  public var eventType: Swift.String?
  public var fromGroup: DocuSignAPI.DSAPIGroup?
  public var fromUser: DocuSignAPI.DSAPIUserInformation?
  public var modifiedDate: Foundation.Date?
  public var modifiedUser: DocuSignAPI.DSAPIUserInformation?
  public var toFolder: DocuSignAPI.DSAPIFolder?
  public var toUser: DocuSignAPI.DSAPIUserInformation?
  public init(carbonCopyOriginalOwner: Swift.Bool = false, enabled: Swift.Bool = false, envelopeTransferRuleId: Swift.String? = nil, eventType: Swift.String? = nil, fromGroup: DocuSignAPI.DSAPIGroup? = nil, fromUser: DocuSignAPI.DSAPIUserInformation? = nil, modifiedDate: Foundation.Date? = nil, modifiedUser: DocuSignAPI.DSAPIUserInformation? = nil, toFolder: DocuSignAPI.DSAPIFolder? = nil, toUser: DocuSignAPI.DSAPIUserInformation? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @objcMembers public class DSAPISignerAttachment : ObjectiveC.NSObject, Swift.Codable {
  @objc @DocuSignAPI.BoolFromString public var anchorAllowWhiteSpaceInCharacters: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorAllowWhiteSpaceInCharactersMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var anchorCaseSensitive: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorCaseSensitiveMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorHorizontalAlignment: Swift.String?
  @objc public var anchorHorizontalAlignmentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var anchorIgnoreIfNotPresent: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorIgnoreIfNotPresentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var anchorMatchWholeWord: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorMatchWholeWordMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorString: Swift.String?
  @objc public var anchorStringMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorTabProcessorVersion: Swift.String?
  @objc public var anchorTabProcessorVersionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorUnits: Swift.String?
  @objc public var anchorUnitsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorXOffset: Swift.String?
  @objc public var anchorXOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorYOffset: Swift.String?
  @objc public var anchorYOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var conditionalParentLabel: Swift.String?
  @objc public var conditionalParentLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var conditionalParentValue: Swift.String?
  @objc public var conditionalParentValueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var customTabId: Swift.String?
  @objc public var customTabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var documentId: Swift.String?
  @objc public var documentIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  @objc public var formOrder: Swift.String?
  @objc public var formOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var formPageLabel: Swift.String?
  @objc public var formPageLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var formPageNumber: Swift.String?
  @objc public var formPageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var handDrawRequired: Swift.String?
  @objc public var height: Swift.String?
  @objc public var heightMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var mergeField: DocuSignAPI.DSAPIMergeField?
  @objc public var mergeFieldXml: Swift.String?
  @objc public var name: Swift.String?
  @objc public var nameMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var optional: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var optionalMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var pageNumber: Swift.String?
  @objc public var pageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var recipientId: Swift.String?
  @objc public var recipientIdGuid: Swift.String?
  @objc public var recipientIdGuidMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var recipientIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var scaleValue: Swift.String?
  @objc public var scaleValueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var smartContractInformation: DocuSignAPI.DSAPISmartContractInformation?
  @objc public var source: Swift.String?
  @objc public var status: Swift.String?
  @objc public var statusMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabGroupLabels: [Swift.String]?
  @objc public var tabGroupLabelsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabId: Swift.String?
  @objc public var tabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabLabel: Swift.String?
  @objc public var tabLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabOrder: Swift.String?
  @objc public var tabOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabType: Swift.String?
  @objc public var tabTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var templateLocked: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var templateLockedMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var templateRequired: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var templateRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tooltip: Swift.String?
  @objc public var toolTipMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var width: Swift.String?
  @objc public var widthMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var xPosition: Swift.String?
  @objc public var xPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var yPosition: Swift.String?
  @objc public var yPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public init(anchorAllowWhiteSpaceInCharacters: Swift.Bool = false, anchorAllowWhiteSpaceInCharactersMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorCaseSensitive: Swift.Bool = false, anchorCaseSensitiveMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorHorizontalAlignment: Swift.String? = nil, anchorHorizontalAlignmentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorIgnoreIfNotPresent: Swift.Bool = false, anchorIgnoreIfNotPresentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorMatchWholeWord: Swift.Bool = false, anchorMatchWholeWordMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorString: Swift.String? = nil, anchorStringMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorTabProcessorVersion: Swift.String? = nil, anchorTabProcessorVersionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorUnits: Swift.String? = nil, anchorUnitsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorXOffset: Swift.String? = nil, anchorXOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorYOffset: Swift.String? = nil, anchorYOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, conditionalParentLabel: Swift.String? = nil, conditionalParentLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, conditionalParentValue: Swift.String? = nil, conditionalParentValueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, customTabId: Swift.String? = nil, customTabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, documentId: Swift.String? = nil, documentIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, formOrder: Swift.String? = nil, formOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formPageLabel: Swift.String? = nil, formPageLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formPageNumber: Swift.String? = nil, formPageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, handDrawRequired: Swift.String? = nil, height: Swift.String? = nil, heightMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, mergeField: DocuSignAPI.DSAPIMergeField? = nil, mergeFieldXml: Swift.String? = nil, name: Swift.String? = nil, nameMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, optional: Swift.Bool = false, optionalMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, pageNumber: Swift.String? = nil, pageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, recipientId: Swift.String? = nil, recipientIdGuid: Swift.String? = nil, recipientIdGuidMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, recipientIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, scaleValue: Swift.String? = nil, scaleValueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, smartContractInformation: DocuSignAPI.DSAPISmartContractInformation? = nil, source: Swift.String? = nil, status: Swift.String? = nil, statusMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabGroupLabels: [Swift.String]? = nil, tabGroupLabelsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabId: Swift.String? = nil, tabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabLabel: Swift.String? = nil, tabLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabOrder: Swift.String? = nil, tabOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabType: Swift.String? = nil, tabTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, templateLocked: Swift.Bool = false, templateLockedMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, templateRequired: Swift.Bool = false, templateRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tooltip: Swift.String? = nil, toolTipMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, width: Swift.String? = nil, widthMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, xPosition: Swift.String? = nil, xPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, yPosition: Swift.String? = nil, yPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIRecipientFormData : Swift.Codable {
  public var declinedTime: Swift.String?
  public var deliveredTime: Swift.String?
  public var email: Swift.String?
  public var formData: [DocuSignAPI.DSAPIFormDataItem]?
  public var name: Swift.String?
  public var recipientId: Swift.String?
  public var sentTime: Swift.String?
  public var signedTime: Swift.String?
  public init(declinedTime: Swift.String? = nil, deliveredTime: Swift.String? = nil, email: Swift.String? = nil, formData: [DocuSignAPI.DSAPIFormDataItem]? = nil, name: Swift.String? = nil, recipientId: Swift.String? = nil, sentTime: Swift.String? = nil, signedTime: Swift.String? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case declinedTime
    case deliveredTime
    case email
    case formData
    case name
    case recipientId
    case sentTime
    case signedTime
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPITabAccountSettings : Swift.Codable {
  @DocuSignAPI.BoolFromString public var allowTabOrder: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var allowTabOrderMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @DocuSignAPI.BoolFromString public var approveDeclineTabsEnabled: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var approveDeclineTabsMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @DocuSignAPI.BoolFromString public var calculatedFieldsEnabled: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var calculatedFieldsMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @DocuSignAPI.BoolFromString public var checkboxTabsEnabled: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var checkBoxTabsMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @DocuSignAPI.BoolFromString public var currencyTabsEnabled: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var currencyTabsMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @DocuSignAPI.BoolFromString public var dataFieldRegexEnabled: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var dataFieldRegexMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @DocuSignAPI.BoolFromString public var dataFieldSizeEnabled: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var dataFieldSizeMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @DocuSignAPI.BoolFromString public var drawTabsEnabled: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var drawTabsMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @DocuSignAPI.BoolFromString public var firstLastEmailTabsEnabled: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var firstLastEmailTabsMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @DocuSignAPI.BoolFromString public var listTabsEnabled: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var listTabsMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @DocuSignAPI.BoolFromString public var noteTabsEnabled: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var noteTabsMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @DocuSignAPI.BoolFromString public var prefillTabsEnabled: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var prefillTabsMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @DocuSignAPI.BoolFromString public var radioTabsEnabled: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var radioTabsMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @DocuSignAPI.BoolFromString public var savingCustomTabsEnabled: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var savingCustomTabsMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @DocuSignAPI.BoolFromString public var senderToChangeTabAssignmentsEnabled: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var senderToChangeTabAssignmentsMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @DocuSignAPI.BoolFromString public var sharedCustomTabsEnabled: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var sharedCustomTabsMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @DocuSignAPI.BoolFromString public var tabDataLabelEnabled: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var tabDataLabelMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @DocuSignAPI.BoolFromString public var tabLocationEnabled: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var tabLocationMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @DocuSignAPI.BoolFromString public var tabLockingEnabled: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var tabLockingMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @DocuSignAPI.BoolFromString public var tabScaleEnabled: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var tabScaleMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @DocuSignAPI.BoolFromString public var tabTextFormattingEnabled: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var tabTextFormattingMetadata: DocuSignAPI.DSAPISettingsMetadata?
  @DocuSignAPI.BoolFromString public var textTabsEnabled: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var textTabsMetadata: DocuSignAPI.DSAPISettingsMetadata?
  public init(allowTabOrder: Swift.Bool = false, allowTabOrderMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, approveDeclineTabsEnabled: Swift.Bool = false, approveDeclineTabsMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, calculatedFieldsEnabled: Swift.Bool = false, calculatedFieldsMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, checkboxTabsEnabled: Swift.Bool = false, checkBoxTabsMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, currencyTabsEnabled: Swift.Bool = false, currencyTabsMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, dataFieldRegexEnabled: Swift.Bool = false, dataFieldRegexMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, dataFieldSizeEnabled: Swift.Bool = false, dataFieldSizeMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, drawTabsEnabled: Swift.Bool = false, drawTabsMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, firstLastEmailTabsEnabled: Swift.Bool = false, firstLastEmailTabsMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, listTabsEnabled: Swift.Bool = false, listTabsMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, noteTabsEnabled: Swift.Bool = false, noteTabsMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, prefillTabsEnabled: Swift.Bool = false, prefillTabsMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, radioTabsEnabled: Swift.Bool = false, radioTabsMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, savingCustomTabsEnabled: Swift.Bool = false, savingCustomTabsMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, senderToChangeTabAssignmentsEnabled: Swift.Bool = false, senderToChangeTabAssignmentsMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, sharedCustomTabsEnabled: Swift.Bool = false, sharedCustomTabsMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, tabDataLabelEnabled: Swift.Bool = false, tabDataLabelMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, tabLocationEnabled: Swift.Bool = false, tabLocationMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, tabLockingEnabled: Swift.Bool = false, tabLockingMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, tabScaleEnabled: Swift.Bool = false, tabScaleMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, tabTextFormattingEnabled: Swift.Bool = false, tabTextFormattingMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil, textTabsEnabled: Swift.Bool = false, textTabsMetadata: DocuSignAPI.DSAPISettingsMetadata? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIAccountSignatureProvider : Swift.Codable {
  @DocuSignAPI.BoolFromString public var isRequired: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var priority: Swift.String?
  public var signatureProviderDisplayName: Swift.String?
  public var signatureProviderId: Swift.String?
  public var signatureProviderName: Swift.String?
  public var signatureProviderOptionsMetadata: [DocuSignAPI.DSAPIAccountSignatureProviderOption]?
  public var signatureProviderRequiredOptions: [DocuSignAPI.DSAPISignatureProviderRequiredOption]?
  public init(isRequired: Swift.Bool = false, priority: Swift.String? = nil, signatureProviderDisplayName: Swift.String? = nil, signatureProviderId: Swift.String? = nil, signatureProviderName: Swift.String? = nil, signatureProviderOptionsMetadata: [DocuSignAPI.DSAPIAccountSignatureProviderOption]? = nil, signatureProviderRequiredOptions: [DocuSignAPI.DSAPISignatureProviderRequiredOption]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public typealias ParametersDict = [Swift.String : Any?]
@_hasMissingDesignatedInitializers public class Request {
  @objc deinit
}
@_hasMissingDesignatedInitializers open class BillingAPI {
  open class func billingInvoicesGetBillingInvoice(accountId: Swift.String, invoiceId: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPIBillingInvoice?, _ error: Swift.Error?) -> Swift.Void))
  open class func billingInvoicesGetBillingInvoiceWithRequestBuilder(accountId: Swift.String, invoiceId: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIBillingInvoice>
  open class func billingInvoicesGetBillingInvoices(accountId: Swift.String, fromDate: Swift.String? = nil, toDate: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIBillingInvoicesResponse?, _ error: Swift.Error?) -> Swift.Void))
  open class func billingInvoicesGetBillingInvoicesWithRequestBuilder(accountId: Swift.String, fromDate: Swift.String? = nil, toDate: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIBillingInvoicesResponse>
  open class func billingInvoicesGetBillingInvoicesPastDue(accountId: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPIBillingInvoicesSummary?, _ error: Swift.Error?) -> Swift.Void))
  open class func billingInvoicesGetBillingInvoicesPastDueWithRequestBuilder(accountId: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIBillingInvoicesSummary>
  open class func billingPaymentsGetPayment(accountId: Swift.String, paymentId: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPIBillingPaymentItem?, _ error: Swift.Error?) -> Swift.Void))
  open class func billingPaymentsGetPaymentWithRequestBuilder(accountId: Swift.String, paymentId: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIBillingPaymentItem>
  open class func billingPaymentsGetPaymentList(accountId: Swift.String, fromDate: Swift.String? = nil, toDate: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIBillingPaymentsResponse?, _ error: Swift.Error?) -> Swift.Void))
  open class func billingPaymentsGetPaymentListWithRequestBuilder(accountId: Swift.String, fromDate: Swift.String? = nil, toDate: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIBillingPaymentsResponse>
  open class func billingPaymentsPostPayment(accountId: Swift.String, body: DocuSignAPI.DSAPIBillingPaymentRequest? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIBillingPaymentResponse?, _ error: Swift.Error?) -> Swift.Void))
  open class func billingPaymentsPostPaymentWithRequestBuilder(accountId: Swift.String, body: DocuSignAPI.DSAPIBillingPaymentRequest? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIBillingPaymentResponse>
  open class func billingPlanGetBillingPlan(accountId: Swift.String, includeCreditCardInformation: Swift.String? = nil, includeDowngradeInformation: Swift.String? = nil, includeMetadata: Swift.String? = nil, includeSuccessorPlans: Swift.String? = nil, includeTaxExemptId: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIAccountBillingPlanResponse?, _ error: Swift.Error?) -> Swift.Void))
  open class func billingPlanGetBillingPlanWithRequestBuilder(accountId: Swift.String, includeCreditCardInformation: Swift.String? = nil, includeDowngradeInformation: Swift.String? = nil, includeMetadata: Swift.String? = nil, includeSuccessorPlans: Swift.String? = nil, includeTaxExemptId: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIAccountBillingPlanResponse>
  open class func billingPlanGetCreditCardInfo(accountId: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPICreditCardInformation?, _ error: Swift.Error?) -> Swift.Void))
  open class func billingPlanGetCreditCardInfoWithRequestBuilder(accountId: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPICreditCardInformation>
  open class func billingPlanGetDowngradeRequestBillingInfo(accountId: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPIDowngradRequestBillingInfoResponse?, _ error: Swift.Error?) -> Swift.Void))
  open class func billingPlanGetDowngradeRequestBillingInfoWithRequestBuilder(accountId: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIDowngradRequestBillingInfoResponse>
  open class func billingPlanPutBillingPlan(accountId: Swift.String, body: DocuSignAPI.DSAPIBillingPlanInformation? = nil, previewBillingPlan: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIBillingPlanUpdateResponse?, _ error: Swift.Error?) -> Swift.Void))
  open class func billingPlanPutBillingPlanWithRequestBuilder(accountId: Swift.String, body: DocuSignAPI.DSAPIBillingPlanInformation? = nil, previewBillingPlan: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIBillingPlanUpdateResponse>
  open class func billingPlanPutDowngradeAccountBillingPlan(accountId: Swift.String, body: DocuSignAPI.DSAPIDowngradeBillingPlanInformation? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPIDowngradePlanUpdateResponse?, _ error: Swift.Error?) -> Swift.Void))
  open class func billingPlanPutDowngradeAccountBillingPlanWithRequestBuilder(accountId: Swift.String, body: DocuSignAPI.DSAPIDowngradeBillingPlanInformation? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIDowngradePlanUpdateResponse>
  open class func billingPlansGetBillingPlan(billingPlanId: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPIBillingPlanResponse?, _ error: Swift.Error?) -> Swift.Void))
  open class func billingPlansGetBillingPlanWithRequestBuilder(billingPlanId: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIBillingPlanResponse>
  open class func billingPlansGetBillingPlans(completion: @escaping ((_ data: DocuSignAPI.DSAPIBillingPlansResponse?, _ error: Swift.Error?) -> Swift.Void))
  open class func billingPlansGetBillingPlansWithRequestBuilder() -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIBillingPlansResponse>
  open class func purchasedEnvelopesPutPurchasedEnvelopes(accountId: Swift.String, body: DocuSignAPI.DSAPIPurchasedEnvelopesInformation? = nil, completion: @escaping ((_ data: Swift.Void?, _ error: Swift.Error?) -> Swift.Void))
  open class func purchasedEnvelopesPutPurchasedEnvelopesWithRequestBuilder(accountId: Swift.String, body: DocuSignAPI.DSAPIPurchasedEnvelopesInformation? = nil) -> DocuSignAPI.RequestBuilder<Swift.Void>
  @objc deinit
}
public struct DSAPISigningGroupUser : Swift.Codable {
  public var email: Swift.String?
  public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  public var userName: Swift.String?
  public init(email: Swift.String? = nil, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, userName: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @objcMembers public class DSAPIApprove : ObjectiveC.NSObject, Swift.Codable {
  @objc @DocuSignAPI.BoolFromString public var anchorAllowWhiteSpaceInCharacters: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorAllowWhiteSpaceInCharactersMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var anchorCaseSensitive: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorCaseSensitiveMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorHorizontalAlignment: Swift.String?
  @objc public var anchorHorizontalAlignmentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var anchorIgnoreIfNotPresent: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorIgnoreIfNotPresentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var anchorMatchWholeWord: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorMatchWholeWordMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorString: Swift.String?
  @objc public var anchorStringMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorTabProcessorVersion: Swift.String?
  @objc public var anchorTabProcessorVersionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorUnits: Swift.String?
  @objc public var anchorUnitsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorXOffset: Swift.String?
  @objc public var anchorXOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorYOffset: Swift.String?
  @objc public var anchorYOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var bold: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var boldMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var buttonText: Swift.String?
  @objc public var buttonTextMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var conditionalParentLabel: Swift.String?
  @objc public var conditionalParentLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var conditionalParentValue: Swift.String?
  @objc public var conditionalParentValueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var customTabId: Swift.String?
  @objc public var customTabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var documentId: Swift.String?
  @objc public var documentIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  @objc public var font: Swift.String?
  @objc public var fontColor: Swift.String?
  @objc public var fontColorMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var fontMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var fontSize: Swift.String?
  @objc public var fontSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var formOrder: Swift.String?
  @objc public var formOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var formPageLabel: Swift.String?
  @objc public var formPageLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var formPageNumber: Swift.String?
  @objc public var formPageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var height: Swift.String?
  @objc public var heightMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var italic: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var italicMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var localePolicy: DocuSignAPI.DSAPILocalePolicyTab?
  @objc public var mergeField: DocuSignAPI.DSAPIMergeField?
  @objc public var mergeFieldXml: Swift.String?
  @objc public var pageNumber: Swift.String?
  @objc public var pageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var recipientId: Swift.String?
  @objc public var recipientIdGuid: Swift.String?
  @objc public var recipientIdGuidMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var recipientIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var smartContractInformation: DocuSignAPI.DSAPISmartContractInformation?
  @objc public var source: Swift.String?
  @objc public var status: Swift.String?
  @objc public var statusMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabGroupLabels: [Swift.String]?
  @objc public var tabGroupLabelsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabId: Swift.String?
  @objc public var tabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabLabel: Swift.String?
  @objc public var tabLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabOrder: Swift.String?
  @objc public var tabOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabType: Swift.String?
  @objc public var tabTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var templateLocked: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var templateLockedMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var templateRequired: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var templateRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tooltip: Swift.String?
  @objc public var toolTipMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var underline: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var underlineMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var width: Swift.String?
  @objc public var widthMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var xPosition: Swift.String?
  @objc public var xPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var yPosition: Swift.String?
  @objc public var yPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public init(anchorAllowWhiteSpaceInCharacters: Swift.Bool = false, anchorAllowWhiteSpaceInCharactersMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorCaseSensitive: Swift.Bool = false, anchorCaseSensitiveMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorHorizontalAlignment: Swift.String? = nil, anchorHorizontalAlignmentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorIgnoreIfNotPresent: Swift.Bool = false, anchorIgnoreIfNotPresentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorMatchWholeWord: Swift.Bool = false, anchorMatchWholeWordMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorString: Swift.String? = nil, anchorStringMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorTabProcessorVersion: Swift.String? = nil, anchorTabProcessorVersionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorUnits: Swift.String? = nil, anchorUnitsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorXOffset: Swift.String? = nil, anchorXOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorYOffset: Swift.String? = nil, anchorYOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, bold: Swift.Bool = false, boldMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, buttonText: Swift.String? = nil, buttonTextMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, conditionalParentLabel: Swift.String? = nil, conditionalParentLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, conditionalParentValue: Swift.String? = nil, conditionalParentValueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, customTabId: Swift.String? = nil, customTabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, documentId: Swift.String? = nil, documentIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, font: Swift.String? = nil, fontColor: Swift.String? = nil, fontColorMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, fontMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, fontSize: Swift.String? = nil, fontSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formOrder: Swift.String? = nil, formOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formPageLabel: Swift.String? = nil, formPageLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formPageNumber: Swift.String? = nil, formPageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, height: Swift.String? = nil, heightMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, italic: Swift.Bool = false, italicMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, localePolicy: DocuSignAPI.DSAPILocalePolicyTab? = nil, mergeField: DocuSignAPI.DSAPIMergeField? = nil, mergeFieldXml: Swift.String? = nil, pageNumber: Swift.String? = nil, pageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, recipientId: Swift.String? = nil, recipientIdGuid: Swift.String? = nil, recipientIdGuidMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, recipientIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, smartContractInformation: DocuSignAPI.DSAPISmartContractInformation? = nil, source: Swift.String? = nil, status: Swift.String? = nil, statusMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabGroupLabels: [Swift.String]? = nil, tabGroupLabelsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabId: Swift.String? = nil, tabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabLabel: Swift.String? = nil, tabLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabOrder: Swift.String? = nil, tabOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabType: Swift.String? = nil, tabTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, templateLocked: Swift.Bool = false, templateLockedMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, templateRequired: Swift.Bool = false, templateRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tooltip: Swift.String? = nil, toolTipMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, underline: Swift.Bool = false, underlineMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, width: Swift.String? = nil, widthMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, xPosition: Swift.String? = nil, xPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, yPosition: Swift.String? = nil, yPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct DSAPINotaryJournalList : Swift.Codable {
  public var endPosition: Swift.String?
  public var nextUri: Foundation.URL?
  public var notaryJournals: [DocuSignAPI.DSAPINotaryJournal]?
  public var previousUri: Foundation.URL?
  public var resultSetSize: Swift.String?
  public var startPosition: Swift.String?
  public var totalSetSize: Swift.String?
  public init(endPosition: Swift.String? = nil, nextUri: Foundation.URL? = nil, notaryJournals: [DocuSignAPI.DSAPINotaryJournal]? = nil, previousUri: Foundation.URL? = nil, resultSetSize: Swift.String? = nil, startPosition: Swift.String? = nil, totalSetSize: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIRecipientIdentityInputOption : Swift.Codable {
  public var name: Swift.String?
  public var phoneNumberList: [DocuSignAPI.DSAPIRecipientIdentityPhoneNumber]?
  public var valueType: Swift.String?
  public init(name: Swift.String? = nil, phoneNumberList: [DocuSignAPI.DSAPIRecipientIdentityPhoneNumber]? = nil, valueType: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIBrandRequest : Swift.Codable {
  public var brandId: Swift.String?
  public init(brandId: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIRecipientTokenClientURLs : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPITabMetadataList : Swift.Codable {
  public var tabs: [DocuSignAPI.DSAPITabMetadata]?
  public init(tabs: [DocuSignAPI.DSAPITabMetadata]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIAccountSeals : Swift.Codable {
  public var seals: [DocuSignAPI.DSAPISealIdentifier]?
  public init(seals: [DocuSignAPI.DSAPISealIdentifier]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPICompositeTemplate : Swift.Codable {
  public var compositeTemplateId: Swift.String?
  public var document: DocuSignAPI.DSAPIDocument?
  public var inlineTemplates: [DocuSignAPI.DSAPIInlineTemplate]?
  public var pdfMetaDataTemplateSequence: Swift.String?
  public var serverTemplates: [DocuSignAPI.DSAPIServerTemplate]?
  public init(compositeTemplateId: Swift.String? = nil, document: DocuSignAPI.DSAPIDocument? = nil, inlineTemplates: [DocuSignAPI.DSAPIInlineTemplate]? = nil, pdfMetaDataTemplateSequence: Swift.String? = nil, serverTemplates: [DocuSignAPI.DSAPIServerTemplate]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @objcMembers public class DSAPIRecipientAdditionalNotification : ObjectiveC.NSObject, Swift.Codable {
  public var phoneNumber: DocuSignAPI.DSAPIRecipientPhoneNumber?
  @objc public var secondaryDeliveryMethod: Swift.String?
  @objc public var secondaryDeliveryMethodMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var secondaryDeliveryStatus: Swift.String?
  public init(phoneNumber: DocuSignAPI.DSAPIRecipientPhoneNumber? = nil, secondaryDeliveryMethod: Swift.String? = nil, secondaryDeliveryMethodMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, secondaryDeliveryStatus: Swift.String? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIUserInformationList : Swift.Codable {
  public var endPosition: Swift.String?
  public var nextUri: Foundation.URL?
  public var previousUri: Foundation.URL?
  public var resultSetSize: Swift.String?
  public var startPosition: Swift.String?
  public var totalSetSize: Swift.String?
  public var users: [DocuSignAPI.DSAPIUserInformation]?
  public init(endPosition: Swift.String? = nil, nextUri: Foundation.URL? = nil, previousUri: Foundation.URL? = nil, resultSetSize: Swift.String? = nil, startPosition: Swift.String? = nil, totalSetSize: Swift.String? = nil, users: [DocuSignAPI.DSAPIUserInformation]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIReferralInformation : Swift.Codable {
  public var advertisementId: Swift.String?
  @DocuSignAPI.BoolFromString public var enableSupport: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var externalOrgId: Swift.String?
  public var groupMemberId: Swift.String?
  public var idType: Swift.String?
  public var includedSeats: Swift.String?
  public var industry: Swift.String?
  public var planStartMonth: Swift.String?
  public var promoCode: Swift.String?
  public var publisherId: Swift.String?
  public var referralCode: Swift.String?
  public var referrerName: Swift.String?
  public var saleDiscountAmount: Swift.String?
  public var saleDiscountFixedAmount: Swift.String?
  public var saleDiscountPercent: Swift.String?
  public var saleDiscountPeriods: Swift.String?
  public var saleDiscountSeatPriceOverride: Swift.String?
  public var shopperId: Swift.String?
  public init(advertisementId: Swift.String? = nil, enableSupport: Swift.Bool = false, externalOrgId: Swift.String? = nil, groupMemberId: Swift.String? = nil, idType: Swift.String? = nil, includedSeats: Swift.String? = nil, industry: Swift.String? = nil, planStartMonth: Swift.String? = nil, promoCode: Swift.String? = nil, publisherId: Swift.String? = nil, referralCode: Swift.String? = nil, referrerName: Swift.String? = nil, saleDiscountAmount: Swift.String? = nil, saleDiscountFixedAmount: Swift.String? = nil, saleDiscountPercent: Swift.String? = nil, saleDiscountPeriods: Swift.String? = nil, saleDiscountSeatPriceOverride: Swift.String? = nil, shopperId: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPINotaryHost : Swift.Codable {
  public var accessCode: Swift.String?
  public var accessCodeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var addAccessCodeToEmail: Swift.String?
  @DocuSignAPI.BoolFromString public var allowSystemOverrideForLockedRecipient: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var autoRespondedReason: Swift.String?
  public var clientUserId: Swift.String?
  public var completedCount: Swift.String?
  public var customFields: [Swift.String]?
  public var declinedDateTime: Foundation.Date?
  public var declinedReason: Swift.String?
  public var deliveredDateTime: Foundation.Date?
  public var deliveryMethod: Swift.String?
  public var deliveryMethodMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var designatorId: Swift.String?
  public var designatorIdGuid: Swift.String?
  public var documentVisibility: [DocuSignAPI.DSAPIDocumentVisibility]?
  public var email: Swift.String?
  public var emailMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var emailNotification: DocuSignAPI.DSAPIRecipientEmailNotification?
  public var embeddedRecipientStartURL: Swift.String?
  public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  public var faxNumber: Swift.String?
  public var faxNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var hostRecipientId: Swift.String?
  public var idCheckConfigurationName: Swift.String?
  public var idCheckConfigurationNameMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var idCheckInformationInput: DocuSignAPI.DSAPIIdCheckInformationInput?
  public var identityVerification: DocuSignAPI.DSAPIRecipientIdentityVerification?
  public var inheritEmailNotificationConfiguration: Swift.String?
  public var lockedRecipientPhoneAuthEditable: Swift.String?
  public var lockedRecipientSmsEditable: Swift.String?
  public var name: Swift.String?
  public var nameMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var note: Swift.String?
  public var noteMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var phoneAuthentication: DocuSignAPI.DSAPIRecipientPhoneAuthentication?
  public var recipientAttachments: [DocuSignAPI.DSAPIRecipientAttachment]?
  public var recipientAuthenticationStatus: DocuSignAPI.DSAPIAuthenticationStatus?
  public var recipientFeatureMetadata: [DocuSignAPI.DSAPIFeatureAvailableMetadata]?
  public var recipientId: Swift.String?
  public var recipientIdGuid: Swift.String?
  public var recipientType: Swift.String?
  public var recipientTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @DocuSignAPI.BoolFromString public var requireIdLookup: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var requireIdLookupMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var roleName: Swift.String?
  public var routingOrder: Swift.String?
  public var routingOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var sentDateTime: Foundation.Date?
  public var signedDateTime: Foundation.Date?
  public var signingGroupId: Swift.String?
  public var signingGroupIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var signingGroupName: Swift.String?
  public var signingGroupUsers: [DocuSignAPI.DSAPIUserInfo]?
  public var smsAuthentication: DocuSignAPI.DSAPIRecipientSMSAuthentication?
  public var socialAuthentications: [DocuSignAPI.DSAPISocialAuthentication]?
  public var status: Swift.String?
  public var statusCode: Swift.String?
  @DocuSignAPI.BoolFromString public var suppressEmails: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var tabs: DocuSignAPI.DSAPITabs?
  @DocuSignAPI.BoolFromString public var templateLocked: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  @DocuSignAPI.BoolFromString public var templateRequired: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var totalTabCount: Swift.String?
  public var userId: Swift.String?
  public init(accessCode: Swift.String? = nil, accessCodeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, addAccessCodeToEmail: Swift.String? = nil, allowSystemOverrideForLockedRecipient: Swift.Bool = false, autoRespondedReason: Swift.String? = nil, clientUserId: Swift.String? = nil, completedCount: Swift.String? = nil, customFields: [Swift.String]? = nil, declinedDateTime: Foundation.Date? = nil, declinedReason: Swift.String? = nil, deliveredDateTime: Foundation.Date? = nil, deliveryMethod: Swift.String? = nil, deliveryMethodMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, designatorId: Swift.String? = nil, designatorIdGuid: Swift.String? = nil, documentVisibility: [DocuSignAPI.DSAPIDocumentVisibility]? = nil, email: Swift.String? = nil, emailMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, emailNotification: DocuSignAPI.DSAPIRecipientEmailNotification? = nil, embeddedRecipientStartURL: Swift.String? = nil, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, faxNumber: Swift.String? = nil, faxNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, hostRecipientId: Swift.String? = nil, idCheckConfigurationName: Swift.String? = nil, idCheckConfigurationNameMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, idCheckInformationInput: DocuSignAPI.DSAPIIdCheckInformationInput? = nil, identityVerification: DocuSignAPI.DSAPIRecipientIdentityVerification? = nil, inheritEmailNotificationConfiguration: Swift.String? = nil, lockedRecipientPhoneAuthEditable: Swift.String? = nil, lockedRecipientSmsEditable: Swift.String? = nil, name: Swift.String? = nil, nameMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, note: Swift.String? = nil, noteMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, phoneAuthentication: DocuSignAPI.DSAPIRecipientPhoneAuthentication? = nil, recipientAttachments: [DocuSignAPI.DSAPIRecipientAttachment]? = nil, recipientAuthenticationStatus: DocuSignAPI.DSAPIAuthenticationStatus? = nil, recipientFeatureMetadata: [DocuSignAPI.DSAPIFeatureAvailableMetadata]? = nil, recipientId: Swift.String? = nil, recipientIdGuid: Swift.String? = nil, recipientType: Swift.String? = nil, recipientTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, requireIdLookup: Swift.Bool = false, requireIdLookupMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, roleName: Swift.String? = nil, routingOrder: Swift.String? = nil, routingOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, sentDateTime: Foundation.Date? = nil, signedDateTime: Foundation.Date? = nil, signingGroupId: Swift.String? = nil, signingGroupIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, signingGroupName: Swift.String? = nil, signingGroupUsers: [DocuSignAPI.DSAPIUserInfo]? = nil, smsAuthentication: DocuSignAPI.DSAPIRecipientSMSAuthentication? = nil, socialAuthentications: [DocuSignAPI.DSAPISocialAuthentication]? = nil, status: Swift.String? = nil, statusCode: Swift.String? = nil, suppressEmails: Swift.Bool = false, tabs: DocuSignAPI.DSAPITabs? = nil, templateLocked: Swift.Bool = false, templateRequired: Swift.Bool = false, totalTabCount: Swift.String? = nil, userId: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers open class AuthenticationAPI {
  open class func loginInformationGetLoginInformation(apiPassword: Swift.String? = nil, embedAccountIdGuid: Swift.String? = nil, includeAccountIdGuid: Swift.String? = nil, loginSettings: Swift.String? = nil, completion: @escaping ((_ data: DocuSignAPI.DSAPILoginInformation?, _ error: Swift.Error?) -> Swift.Void))
  open class func loginInformationGetLoginInformationWithRequestBuilder(apiPassword: Swift.String? = nil, embedAccountIdGuid: Swift.String? = nil, includeAccountIdGuid: Swift.String? = nil, loginSettings: Swift.String? = nil) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPILoginInformation>
  open class func loginInformationPutLoginInformation(loginPart: Swift.String, body: DocuSignAPI.DSAPIUserPasswordInformation? = nil, completion: @escaping ((_ data: Swift.Void?, _ error: Swift.Error?) -> Swift.Void))
  open class func loginInformationPutLoginInformationWithRequestBuilder(loginPart: Swift.String, body: DocuSignAPI.DSAPIUserPasswordInformation? = nil) -> DocuSignAPI.RequestBuilder<Swift.Void>
  open class func oAuth2PostRevoke(completion: @escaping ((_ data: Swift.Void?, _ error: Swift.Error?) -> Swift.Void))
  open class func oAuth2PostRevokeWithRequestBuilder() -> DocuSignAPI.RequestBuilder<Swift.Void>
  open class func oAuth2PostToken(completion: @escaping ((_ data: DocuSignAPI.DSAPIOauthAccess?, _ error: Swift.Error?) -> Swift.Void))
  open class func oAuth2PostTokenWithRequestBuilder() -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIOauthAccess>
  open class func userSocialLoginDeleteUserSocialLogin(accountId: Swift.String, userId: Swift.String, body: DocuSignAPI.DSAPISocialAccountInformation? = nil, completion: @escaping ((_ data: Swift.Void?, _ error: Swift.Error?) -> Swift.Void))
  open class func userSocialLoginDeleteUserSocialLoginWithRequestBuilder(accountId: Swift.String, userId: Swift.String, body: DocuSignAPI.DSAPISocialAccountInformation? = nil) -> DocuSignAPI.RequestBuilder<Swift.Void>
  open class func userSocialLoginGetUserSocialLogin(accountId: Swift.String, userId: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPIUserSocialIdResult?, _ error: Swift.Error?) -> Swift.Void))
  open class func userSocialLoginGetUserSocialLoginWithRequestBuilder(accountId: Swift.String, userId: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIUserSocialIdResult>
  open class func userSocialLoginPutUserSocialLogin(accountId: Swift.String, userId: Swift.String, body: DocuSignAPI.DSAPISocialAccountInformation? = nil, completion: @escaping ((_ data: Swift.Void?, _ error: Swift.Error?) -> Swift.Void))
  open class func userSocialLoginPutUserSocialLoginWithRequestBuilder(accountId: Swift.String, userId: Swift.String, body: DocuSignAPI.DSAPISocialAccountInformation? = nil) -> DocuSignAPI.RequestBuilder<Swift.Void>
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class DSAPIEditor : ObjectiveC.NSObject, Swift.Codable {
  @objc public var accessCode: Swift.String?
  @objc public var accessCodeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var addAccessCodeToEmail: Swift.String?
  @objc public var additionalNotifications: [DocuSignAPI.DSAPIRecipientAdditionalNotification]?
  @objc @DocuSignAPI.BoolFromString public var allowSystemOverrideForLockedRecipient: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var autoRespondedReason: Swift.String?
  @objc public var clientUserId: Swift.String?
  @objc public var completedCount: Swift.String?
  @objc public var customFields: [Swift.String]?
  @objc public var declinedDateTime: Foundation.Date?
  @objc public var declinedReason: Swift.String?
  @objc public var deliveredDateTime: Foundation.Date?
  @objc public var deliveryMethod: Swift.String?
  @objc public var deliveryMethodMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var designatorId: Swift.String?
  @objc public var designatorIdGuid: Swift.String?
  @objc public var documentVisibility: [DocuSignAPI.DSAPIDocumentVisibility]?
  @objc public var email: Swift.String?
  @objc public var emailMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var emailNotification: DocuSignAPI.DSAPIRecipientEmailNotification?
  @objc public var emailRecipientPostSigningURL: Swift.String?
  @objc public var embeddedRecipientStartURL: Swift.String?
  @objc public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  @objc public var faxNumber: Swift.String?
  @objc public var faxNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var firstName: Swift.String?
  @objc public var firstNameMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var fullName: Swift.String?
  @objc public var fullNameMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var idCheckConfigurationName: Swift.String?
  @objc public var idCheckConfigurationNameMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var idCheckInformationInput: DocuSignAPI.DSAPIIdCheckInformationInput?
  public var identityVerification: DocuSignAPI.DSAPIRecipientIdentityVerification?
  @objc @DocuSignAPI.BoolFromString public var inheritEmailNotificationConfiguration: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var lastName: Swift.String?
  @objc public var lastNameMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var lockedRecipientPhoneAuthEditable: Swift.String?
  @objc public var lockedRecipientSmsEditable: Swift.String?
  @objc public var name: Swift.String?
  @objc public var nameMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var note: Swift.String?
  @objc public var noteMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var phoneAuthentication: DocuSignAPI.DSAPIRecipientPhoneAuthentication?
  public var phoneNumber: DocuSignAPI.DSAPIRecipientPhoneNumber?
  @objc public var recipientAttachments: [DocuSignAPI.DSAPIRecipientAttachment]?
  public var recipientAuthenticationStatus: DocuSignAPI.DSAPIAuthenticationStatus?
  public var recipientFeatureMetadata: [DocuSignAPI.DSAPIFeatureAvailableMetadata]?
  @objc public var recipientId: Swift.String?
  @objc public var recipientIdGuid: Swift.String?
  @objc public var recipientType: Swift.String?
  @objc public var recipientTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var requireIdLookup: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var requireIdLookupMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var roleName: Swift.String?
  @objc public var routingOrder: Swift.String?
  @objc public var routingOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var sentDateTime: Foundation.Date?
  @objc public var signedDateTime: Foundation.Date?
  @objc public var signingGroupId: Swift.String?
  @objc public var signingGroupIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var signingGroupName: Swift.String?
  @objc public var signingGroupUsers: [DocuSignAPI.DSAPIUserInfo]?
  @objc public var smsAuthentication: DocuSignAPI.DSAPIRecipientSMSAuthentication?
  @objc public var socialAuthentications: [DocuSignAPI.DSAPISocialAuthentication]?
  @objc public var status: Swift.String?
  @objc public var statusCode: Swift.String?
  @objc @DocuSignAPI.BoolFromString public var suppressEmails: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc @DocuSignAPI.BoolFromString public var templateLocked: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc @DocuSignAPI.BoolFromString public var templateRequired: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var totalTabCount: Swift.String?
  @objc public var userId: Swift.String?
  @objc override dynamic public init()
  public init(accessCode: Swift.String? = nil, accessCodeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, addAccessCodeToEmail: Swift.String? = nil, additionalNotifications: [DocuSignAPI.DSAPIRecipientAdditionalNotification]? = nil, allowSystemOverrideForLockedRecipient: Swift.Bool = false, autoRespondedReason: Swift.String? = nil, clientUserId: Swift.String? = nil, completedCount: Swift.String? = nil, customFields: [Swift.String]? = nil, declinedDateTime: Foundation.Date? = nil, declinedReason: Swift.String? = nil, deliveredDateTime: Foundation.Date? = nil, deliveryMethod: Swift.String? = nil, deliveryMethodMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, designatorId: Swift.String? = nil, designatorIdGuid: Swift.String? = nil, documentVisibility: [DocuSignAPI.DSAPIDocumentVisibility]? = nil, email: Swift.String? = nil, emailMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, emailNotification: DocuSignAPI.DSAPIRecipientEmailNotification? = nil, emailRecipientPostSigningURL: Swift.String? = nil, embeddedRecipientStartURL: Swift.String? = nil, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, faxNumber: Swift.String? = nil, faxNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, firstName: Swift.String? = nil, firstNameMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, fullName: Swift.String? = nil, fullNameMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, idCheckConfigurationName: Swift.String? = nil, idCheckConfigurationNameMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, idCheckInformationInput: DocuSignAPI.DSAPIIdCheckInformationInput? = nil, identityVerification: DocuSignAPI.DSAPIRecipientIdentityVerification? = nil, inheritEmailNotificationConfiguration: Swift.Bool = false, lastName: Swift.String? = nil, lastNameMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, lockedRecipientPhoneAuthEditable: Swift.String? = nil, lockedRecipientSmsEditable: Swift.String? = nil, name: Swift.String? = nil, nameMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, note: Swift.String? = nil, noteMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, phoneAuthentication: DocuSignAPI.DSAPIRecipientPhoneAuthentication? = nil, phoneNumber: DocuSignAPI.DSAPIRecipientPhoneNumber? = nil, recipientAttachments: [DocuSignAPI.DSAPIRecipientAttachment]? = nil, recipientAuthenticationStatus: DocuSignAPI.DSAPIAuthenticationStatus? = nil, recipientFeatureMetadata: [DocuSignAPI.DSAPIFeatureAvailableMetadata]? = nil, recipientId: Swift.String? = nil, recipientIdGuid: Swift.String? = nil, recipientType: Swift.String? = nil, recipientTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, requireIdLookup: Swift.Bool = false, requireIdLookupMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, roleName: Swift.String? = nil, routingOrder: Swift.String? = nil, routingOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, sentDateTime: Foundation.Date? = nil, signedDateTime: Foundation.Date? = nil, signingGroupId: Swift.String? = nil, signingGroupIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, signingGroupName: Swift.String? = nil, signingGroupUsers: [DocuSignAPI.DSAPIUserInfo]? = nil, smsAuthentication: DocuSignAPI.DSAPIRecipientSMSAuthentication? = nil, socialAuthentications: [DocuSignAPI.DSAPISocialAuthentication]? = nil, status: Swift.String? = nil, statusCode: Swift.String? = nil, suppressEmails: Swift.Bool = false, templateLocked: Swift.Bool = false, templateRequired: Swift.Bool = false, totalTabCount: Swift.String? = nil, userId: Swift.String? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct DSAPICaptiveRecipientInformation : Swift.Codable {
  public var captiveRecipients: [DocuSignAPI.DSAPICaptiveRecipient]?
  public init(captiveRecipients: [DocuSignAPI.DSAPICaptiveRecipient]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPICustomFieldsEnvelope : Swift.Codable {
  public var listCustomFields: [DocuSignAPI.DSAPIListCustomField]?
  public var textCustomFields: [DocuSignAPI.DSAPITextCustomField]?
  public init(listCustomFields: [DocuSignAPI.DSAPIListCustomField]? = nil, textCustomFields: [DocuSignAPI.DSAPITextCustomField]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIBillingInvoice : Swift.Codable {
  public var amount: Swift.String?
  public var balance: Swift.String?
  public var dueDate: Foundation.Date?
  public var invoiceId: Swift.String?
  public var invoiceItems: [DocuSignAPI.DSAPIBillingInvoiceItem]?
  public var invoiceNumber: Swift.String?
  public var invoiceUri: Foundation.URL?
  public var nonTaxableAmount: Swift.String?
  public var pdfAvailable: Swift.String?
  public var taxableAmount: Swift.String?
  public init(amount: Swift.String? = nil, balance: Swift.String? = nil, dueDate: Foundation.Date? = nil, invoiceId: Swift.String? = nil, invoiceItems: [DocuSignAPI.DSAPIBillingInvoiceItem]? = nil, invoiceNumber: Swift.String? = nil, invoiceUri: Foundation.URL? = nil, nonTaxableAmount: Swift.String? = nil, pdfAvailable: Swift.String? = nil, taxableAmount: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIIdCheckConfiguration : Swift.Codable {
  public var authSteps: [DocuSignAPI.DSAPIIdCheckSecurityStep]?
  public var isDefault: Swift.String?
  public var name: Swift.String?
  public init(authSteps: [DocuSignAPI.DSAPIIdCheckSecurityStep]? = nil, isDefault: Swift.String? = nil, name: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPISmartSectionCollapsibleDisplaySettings : Swift.Codable {
  public var arrowClosed: Swift.String?
  public var arrowColor: Swift.String?
  public var arrowLocation: Swift.String?
  public var arrowOpen: Swift.String?
  public var arrowSize: Swift.String?
  public var arrowStyle: Swift.String?
  public var containerStyle: Swift.String?
  public var labelStyle: Swift.String?
  public var onlyArrowIsClickable: Swift.Bool
  public var outerLabelAndArrowStyle: Swift.String?
  public init(arrowClosed: Swift.String? = nil, arrowColor: Swift.String? = nil, arrowLocation: Swift.String? = nil, arrowOpen: Swift.String? = nil, arrowSize: Swift.String? = nil, arrowStyle: Swift.String? = nil, containerStyle: Swift.String? = nil, labelStyle: Swift.String? = nil, onlyArrowIsClickable: Swift.Bool = false, outerLabelAndArrowStyle: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @objcMembers public class DSAPIInitialHere : ObjectiveC.NSObject, Swift.Codable {
  @objc @DocuSignAPI.BoolFromString public var anchorAllowWhiteSpaceInCharacters: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorAllowWhiteSpaceInCharactersMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var anchorCaseSensitive: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorCaseSensitiveMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorHorizontalAlignment: Swift.String?
  @objc public var anchorHorizontalAlignmentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var anchorIgnoreIfNotPresent: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorIgnoreIfNotPresentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var anchorMatchWholeWord: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorMatchWholeWordMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorString: Swift.String?
  @objc public var anchorStringMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorTabProcessorVersion: Swift.String?
  @objc public var anchorTabProcessorVersionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorUnits: Swift.String?
  @objc public var anchorUnitsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorXOffset: Swift.String?
  @objc public var anchorXOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorYOffset: Swift.String?
  @objc public var anchorYOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var conditionalParentLabel: Swift.String?
  @objc public var conditionalParentLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var conditionalParentValue: Swift.String?
  @objc public var conditionalParentValueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var customTabId: Swift.String?
  @objc public var customTabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var documentId: Swift.String?
  @objc public var documentIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  @objc public var formOrder: Swift.String?
  @objc public var formOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var formPageLabel: Swift.String?
  @objc public var formPageLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var formPageNumber: Swift.String?
  @objc public var formPageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var handDrawRequired: Swift.String?
  @objc public var height: Swift.String?
  @objc public var heightMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var mergeField: DocuSignAPI.DSAPIMergeField?
  @objc public var mergeFieldXml: Swift.String?
  @objc public var name: Swift.String?
  @objc public var nameMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var optional: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var optionalMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var pageNumber: Swift.String?
  @objc public var pageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var recipientId: Swift.String?
  @objc public var recipientIdGuid: Swift.String?
  @objc public var recipientIdGuidMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var recipientIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var scaleValue: Swift.String?
  @objc public var scaleValueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var smartContractInformation: DocuSignAPI.DSAPISmartContractInformation?
  @objc public var source: Swift.String?
  @objc public var status: Swift.String?
  @objc public var statusMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabGroupLabels: [Swift.String]?
  @objc public var tabGroupLabelsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabId: Swift.String?
  @objc public var tabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabLabel: Swift.String?
  @objc public var tabLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabOrder: Swift.String?
  @objc public var tabOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabType: Swift.String?
  @objc public var tabTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var templateLocked: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var templateLockedMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var templateRequired: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var templateRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tooltip: Swift.String?
  @objc public var toolTipMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var width: Swift.String?
  @objc public var widthMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var xPosition: Swift.String?
  @objc public var xPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var yPosition: Swift.String?
  @objc public var yPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var imageDataBase64: Swift.String?
  @objc override dynamic public init()
  public init(anchorAllowWhiteSpaceInCharacters: Swift.Bool = false, anchorAllowWhiteSpaceInCharactersMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorCaseSensitive: Swift.Bool = false, anchorCaseSensitiveMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorHorizontalAlignment: Swift.String? = nil, anchorHorizontalAlignmentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorIgnoreIfNotPresent: Swift.Bool = false, anchorIgnoreIfNotPresentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorMatchWholeWord: Swift.Bool = false, anchorMatchWholeWordMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorString: Swift.String? = nil, anchorStringMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorTabProcessorVersion: Swift.String? = nil, anchorTabProcessorVersionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorUnits: Swift.String? = nil, anchorUnitsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorXOffset: Swift.String? = nil, anchorXOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorYOffset: Swift.String? = nil, anchorYOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, conditionalParentLabel: Swift.String? = nil, conditionalParentLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, conditionalParentValue: Swift.String? = nil, conditionalParentValueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, customTabId: Swift.String? = nil, customTabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, documentId: Swift.String? = nil, documentIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, formOrder: Swift.String? = nil, formOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formPageLabel: Swift.String? = nil, formPageLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formPageNumber: Swift.String? = nil, formPageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, handDrawRequired: Swift.String? = nil, height: Swift.String? = nil, heightMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, mergeField: DocuSignAPI.DSAPIMergeField? = nil, mergeFieldXml: Swift.String? = nil, name: Swift.String? = nil, nameMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, optional: Swift.Bool = false, optionalMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, pageNumber: Swift.String? = nil, pageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, recipientId: Swift.String? = nil, recipientIdGuid: Swift.String? = nil, recipientIdGuidMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, recipientIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, scaleValue: Swift.String? = nil, scaleValueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, smartContractInformation: DocuSignAPI.DSAPISmartContractInformation? = nil, source: Swift.String? = nil, status: Swift.String? = nil, statusMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabGroupLabels: [Swift.String]? = nil, tabGroupLabelsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabId: Swift.String? = nil, tabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabLabel: Swift.String? = nil, tabLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabOrder: Swift.String? = nil, tabOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabType: Swift.String? = nil, tabTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, templateLocked: Swift.Bool = false, templateLockedMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, templateRequired: Swift.Bool = false, templateRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tooltip: Swift.String? = nil, toolTipMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, width: Swift.String? = nil, widthMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, xPosition: Swift.String? = nil, xPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, yPosition: Swift.String? = nil, yPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIPaymentDetails : Swift.Codable {
  public var allowedPaymentMethods: [Swift.String]?
  public var chargeId: Swift.String?
  public var currencyCode: Swift.String?
  public var currencyCodeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var customerId: Swift.String?
  public var customMetadata: Swift.String?
  public var customMetadataRequired: Swift.Bool
  public var gatewayAccountId: Swift.String?
  public var gatewayAccountIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var gatewayDisplayName: Swift.String?
  public var gatewayName: Swift.String?
  public var lineItems: [DocuSignAPI.DSAPIPaymentLineItem]?
  public var paymentOption: Swift.String?
  public var paymentSourceId: Swift.String?
  public var signerValues: DocuSignAPI.DSAPIPaymentSignerValues?
  public var status: Swift.String?
  public var subGatewayName: Swift.String?
  public var total: DocuSignAPI.DSAPIMoney?
  public init(allowedPaymentMethods: [Swift.String]? = nil, chargeId: Swift.String? = nil, currencyCode: Swift.String? = nil, currencyCodeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, customerId: Swift.String? = nil, customMetadata: Swift.String? = nil, customMetadataRequired: Swift.Bool = false, gatewayAccountId: Swift.String? = nil, gatewayAccountIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, gatewayDisplayName: Swift.String? = nil, gatewayName: Swift.String? = nil, lineItems: [DocuSignAPI.DSAPIPaymentLineItem]? = nil, paymentOption: Swift.String? = nil, paymentSourceId: Swift.String? = nil, signerValues: DocuSignAPI.DSAPIPaymentSignerValues? = nil, status: Swift.String? = nil, subGatewayName: Swift.String? = nil, total: DocuSignAPI.DSAPIMoney? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIDowngradeRequestInformation : Swift.Codable {
  public var downgradeRequestCreation: Swift.String?
  public var downgradeRequestProductId: Swift.String?
  public var downgradeRequestStatus: Swift.String?
  public init(downgradeRequestCreation: Swift.String? = nil, downgradeRequestProductId: Swift.String? = nil, downgradeRequestStatus: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIConnectSalesforceField : Swift.Codable {
  public var dsAttribute: Swift.String?
  public var dsLink: Swift.String?
  public var dsNode: Swift.String?
  public var _id: Swift.String?
  public var sfField: Swift.String?
  public var sfFieldName: Swift.String?
  public var sfFolder: Swift.String?
  public var sfLockedValue: Swift.String?
  public init(dsAttribute: Swift.String? = nil, dsLink: Swift.String? = nil, dsNode: Swift.String? = nil, _id: Swift.String? = nil, sfField: Swift.String? = nil, sfFieldName: Swift.String? = nil, sfFolder: Swift.String? = nil, sfLockedValue: Swift.String? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case dsAttribute
    case dsLink
    case dsNode
    case _id
    case sfField
    case sfFieldName
    case sfFolder
    case sfLockedValue
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPISignatureGroupDef : Swift.Codable {
  public var groupId: Swift.String?
  public var rights: Swift.String?
  public init(groupId: Swift.String? = nil, rights: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @objcMembers public class DSAPICertifiedDelivery : ObjectiveC.NSObject, Swift.Codable {
  @objc public var accessCode: Swift.String?
  @objc public var accessCodeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var addAccessCodeToEmail: Swift.String?
  @objc public var additionalNotifications: [DocuSignAPI.DSAPIRecipientAdditionalNotification]?
  @objc public var agentCanEditEmail: Swift.String?
  @objc public var agentCanEditName: Swift.String?
  @objc @DocuSignAPI.BoolFromString public var allowSystemOverrideForLockedRecipient: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var autoRespondedReason: Swift.String?
  @objc public var clientUserId: Swift.String?
  @objc public var completedCount: Swift.String?
  @objc public var customFields: [Swift.String]?
  @objc public var declinedDateTime: Foundation.Date?
  @objc public var declinedReason: Swift.String?
  @objc public var deliveredDateTime: Foundation.Date?
  @objc public var deliveryMethod: Swift.String?
  @objc public var deliveryMethodMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var designatorId: Swift.String?
  @objc public var designatorIdGuid: Swift.String?
  @objc public var documentVisibility: [DocuSignAPI.DSAPIDocumentVisibility]?
  @objc public var email: Swift.String?
  @objc public var emailMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var emailNotification: DocuSignAPI.DSAPIRecipientEmailNotification?
  @objc public var emailRecipientPostSigningURL: Swift.String?
  @objc public var embeddedRecipientStartURL: Swift.String?
  @objc public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  @objc public var excludedDocuments: [Swift.String]?
  @objc public var faxNumber: Swift.String?
  @objc public var faxNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var firstName: Swift.String?
  @objc public var firstNameMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var fullName: Swift.String?
  @objc public var fullNameMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var idCheckConfigurationName: Swift.String?
  @objc public var idCheckConfigurationNameMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var idCheckInformationInput: DocuSignAPI.DSAPIIdCheckInformationInput?
  public var identityVerification: DocuSignAPI.DSAPIRecipientIdentityVerification?
  @objc @DocuSignAPI.BoolFromString public var inheritEmailNotificationConfiguration: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var lastName: Swift.String?
  @objc public var lastNameMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var lockedRecipientPhoneAuthEditable: Swift.String?
  @objc public var lockedRecipientSmsEditable: Swift.String?
  @objc public var name: Swift.String?
  @objc public var nameMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var note: Swift.String?
  @objc public var noteMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var phoneAuthentication: DocuSignAPI.DSAPIRecipientPhoneAuthentication?
  public var phoneNumber: DocuSignAPI.DSAPIRecipientPhoneNumber?
  public var proofFile: DocuSignAPI.DSAPIRecipientProofFile?
  @objc public var recipientAttachments: [DocuSignAPI.DSAPIRecipientAttachment]?
  public var recipientAuthenticationStatus: DocuSignAPI.DSAPIAuthenticationStatus?
  public var recipientFeatureMetadata: [DocuSignAPI.DSAPIFeatureAvailableMetadata]?
  @objc public var recipientId: Swift.String?
  @objc public var recipientIdGuid: Swift.String?
  @objc public var recipientType: Swift.String?
  @objc public var recipientTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var requireIdLookup: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var requireIdLookupMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var roleName: Swift.String?
  @objc public var routingOrder: Swift.String?
  @objc public var routingOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var sentDateTime: Foundation.Date?
  @objc public var signedDateTime: Foundation.Date?
  @objc public var signingGroupId: Swift.String?
  @objc public var signingGroupIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var signingGroupName: Swift.String?
  @objc public var signingGroupUsers: [DocuSignAPI.DSAPIUserInfo]?
  @objc public var smsAuthentication: DocuSignAPI.DSAPIRecipientSMSAuthentication?
  @objc public var socialAuthentications: [DocuSignAPI.DSAPISocialAuthentication]?
  @objc public var status: Swift.String?
  @objc public var statusCode: Swift.String?
  @objc @DocuSignAPI.BoolFromString public var suppressEmails: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc @DocuSignAPI.BoolFromString public var templateLocked: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc @DocuSignAPI.BoolFromString public var templateRequired: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var totalTabCount: Swift.String?
  @objc public var userId: Swift.String?
  @objc override dynamic public init()
  public init(accessCode: Swift.String? = nil, accessCodeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, addAccessCodeToEmail: Swift.String? = nil, additionalNotifications: [DocuSignAPI.DSAPIRecipientAdditionalNotification]? = nil, agentCanEditEmail: Swift.String? = nil, agentCanEditName: Swift.String? = nil, allowSystemOverrideForLockedRecipient: Swift.Bool = false, autoRespondedReason: Swift.String? = nil, clientUserId: Swift.String? = nil, completedCount: Swift.String? = nil, customFields: [Swift.String]? = nil, declinedDateTime: Foundation.Date? = nil, declinedReason: Swift.String? = nil, deliveredDateTime: Foundation.Date? = nil, deliveryMethod: Swift.String? = nil, deliveryMethodMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, designatorId: Swift.String? = nil, designatorIdGuid: Swift.String? = nil, documentVisibility: [DocuSignAPI.DSAPIDocumentVisibility]? = nil, email: Swift.String? = nil, emailMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, emailNotification: DocuSignAPI.DSAPIRecipientEmailNotification? = nil, emailRecipientPostSigningURL: Swift.String? = nil, embeddedRecipientStartURL: Swift.String? = nil, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, excludedDocuments: [Swift.String]? = nil, faxNumber: Swift.String? = nil, faxNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, firstName: Swift.String? = nil, firstNameMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, fullName: Swift.String? = nil, fullNameMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, idCheckConfigurationName: Swift.String? = nil, idCheckConfigurationNameMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, idCheckInformationInput: DocuSignAPI.DSAPIIdCheckInformationInput? = nil, identityVerification: DocuSignAPI.DSAPIRecipientIdentityVerification? = nil, inheritEmailNotificationConfiguration: Swift.Bool = false, lastName: Swift.String? = nil, lastNameMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, lockedRecipientPhoneAuthEditable: Swift.String? = nil, lockedRecipientSmsEditable: Swift.String? = nil, name: Swift.String? = nil, nameMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, note: Swift.String? = nil, noteMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, phoneAuthentication: DocuSignAPI.DSAPIRecipientPhoneAuthentication? = nil, phoneNumber: DocuSignAPI.DSAPIRecipientPhoneNumber? = nil, proofFile: DocuSignAPI.DSAPIRecipientProofFile? = nil, recipientAttachments: [DocuSignAPI.DSAPIRecipientAttachment]? = nil, recipientAuthenticationStatus: DocuSignAPI.DSAPIAuthenticationStatus? = nil, recipientFeatureMetadata: [DocuSignAPI.DSAPIFeatureAvailableMetadata]? = nil, recipientId: Swift.String? = nil, recipientIdGuid: Swift.String? = nil, recipientType: Swift.String? = nil, recipientTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, requireIdLookup: Swift.Bool = false, requireIdLookupMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, roleName: Swift.String? = nil, routingOrder: Swift.String? = nil, routingOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, sentDateTime: Foundation.Date? = nil, signedDateTime: Foundation.Date? = nil, signingGroupId: Swift.String? = nil, signingGroupIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, signingGroupName: Swift.String? = nil, signingGroupUsers: [DocuSignAPI.DSAPIUserInfo]? = nil, smsAuthentication: DocuSignAPI.DSAPIRecipientSMSAuthentication? = nil, socialAuthentications: [DocuSignAPI.DSAPISocialAuthentication]? = nil, status: Swift.String? = nil, statusCode: Swift.String? = nil, suppressEmails: Swift.Bool = false, templateLocked: Swift.Bool = false, templateRequired: Swift.Bool = false, totalTabCount: Swift.String? = nil, userId: Swift.String? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @objcMembers public class DSAPIRecipientEmailNotification : ObjectiveC.NSObject, Swift.Codable {
  @objc public var emailBody: Swift.String?
  @objc public var emailBodyMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var emailSubject: Swift.String?
  @objc public var emailSubjectMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var supportedLanguage: Swift.String?
  @objc public var supportedLanguageMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc override dynamic public init()
  @objc public init(emailBody: Swift.String? = nil, emailBodyMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, emailSubject: Swift.String? = nil, emailSubjectMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, supportedLanguage: Swift.String? = nil, supportedLanguageMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIConnectDeleteFailureResult : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPINewUsersDefinition : Swift.Codable {
  public var newUsers: [DocuSignAPI.DSAPIUserInformation]?
  public init(newUsers: [DocuSignAPI.DSAPIUserInformation]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIAccountPasswordMinimumPasswordAgeDays : Swift.Codable {
  public var maximumAge: Swift.String?
  public var minimumAge: Swift.String?
  public init(maximumAge: Swift.String? = nil, minimumAge: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIBillingPaymentsResponse : Swift.Codable {
  public var billingPayments: [DocuSignAPI.DSAPIBillingPaymentItem]?
  public var nextUri: Foundation.URL?
  public var previousUri: Foundation.URL?
  public init(billingPayments: [DocuSignAPI.DSAPIBillingPaymentItem]? = nil, nextUri: Foundation.URL? = nil, previousUri: Foundation.URL? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers open class TrustServiceProvidersAPI {
  open class func accountSignatureProvidersGetSealProviders(accountId: Swift.String, completion: @escaping ((_ data: DocuSignAPI.DSAPIAccountSeals?, _ error: Swift.Error?) -> Swift.Void))
  open class func accountSignatureProvidersGetSealProvidersWithRequestBuilder(accountId: Swift.String) -> DocuSignAPI.RequestBuilder<DocuSignAPI.DSAPIAccountSeals>
  @objc deinit
}
public struct DSAPISsn9InformationInput : Swift.Codable {
  public var displayLevelCode: Swift.String?
  public var ssn9: Swift.String?
  public init(displayLevelCode: Swift.String? = nil, ssn9: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIEnvelopeFormData : Swift.Codable {
  public var emailSubject: Swift.String?
  public var envelopeId: Swift.String?
  public var formData: [DocuSignAPI.DSAPIFormDataItem]?
  public var prefillFormData: DocuSignAPI.DSAPIPrefillFormData?
  public var recipientFormData: [DocuSignAPI.DSAPIRecipientFormData]?
  public var sentDateTime: Foundation.Date?
  public var status: Swift.String?
  public init(emailSubject: Swift.String? = nil, envelopeId: Swift.String? = nil, formData: [DocuSignAPI.DSAPIFormDataItem]? = nil, prefillFormData: DocuSignAPI.DSAPIPrefillFormData? = nil, recipientFormData: [DocuSignAPI.DSAPIRecipientFormData]? = nil, sentDateTime: Foundation.Date? = nil, status: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPISignatureUserDef : Swift.Codable {
  @DocuSignAPI.BoolFromString public var isDefault: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var rights: Swift.String?
  public var userId: Swift.String?
  public init(isDefault: Swift.Bool = false, rights: Swift.String? = nil, userId: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIAccountPasswordRules : Swift.Codable {
  @DocuSignAPI.BoolFromString public var expirePassword: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var expirePasswordDays: Swift.String?
  public var expirePasswordDaysMetadata: DocuSignAPI.DSAPIAccountPasswordExpirePasswordDays?
  public var lockoutDurationMinutes: Swift.String?
  public var lockoutDurationMinutesMetadata: DocuSignAPI.DSAPIAccountPasswordLockoutDurationMinutes?
  public var lockoutDurationType: Swift.String?
  public var lockoutDurationTypeMetadata: DocuSignAPI.DSAPIAccountPasswordLockoutDurationType?
  public var minimumPasswordAgeDays: Swift.String?
  public var minimumPasswordAgeDaysMetadata: DocuSignAPI.DSAPIAccountPasswordMinimumPasswordAgeDays?
  public var minimumPasswordLength: Swift.String?
  public var minimumPasswordLengthMetadata: DocuSignAPI.DSAPIAccountMinimumPasswordLength?
  @DocuSignAPI.BoolFromString public var passwordIncludeDigit: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  @DocuSignAPI.BoolFromString public var passwordIncludeDigitOrSpecialCharacter: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  @DocuSignAPI.BoolFromString public var passwordIncludeLowerCase: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  @DocuSignAPI.BoolFromString public var passwordIncludeSpecialCharacter: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  @DocuSignAPI.BoolFromString public var passwordIncludeUpperCase: Swift.Bool {
    get
    nonmutating set
    nonmutating _modify
  }
  public var passwordStrengthType: Swift.String?
  public var passwordStrengthTypeMetadata: DocuSignAPI.DSAPIAccountPasswordStrengthType?
  public var questionsRequired: Swift.String?
  public var questionsRequiredMetadata: DocuSignAPI.DSAPIAccountPasswordQuestionsRequired?
  public init(expirePassword: Swift.Bool = false, expirePasswordDays: Swift.String? = nil, expirePasswordDaysMetadata: DocuSignAPI.DSAPIAccountPasswordExpirePasswordDays? = nil, lockoutDurationMinutes: Swift.String? = nil, lockoutDurationMinutesMetadata: DocuSignAPI.DSAPIAccountPasswordLockoutDurationMinutes? = nil, lockoutDurationType: Swift.String? = nil, lockoutDurationTypeMetadata: DocuSignAPI.DSAPIAccountPasswordLockoutDurationType? = nil, minimumPasswordAgeDays: Swift.String? = nil, minimumPasswordAgeDaysMetadata: DocuSignAPI.DSAPIAccountPasswordMinimumPasswordAgeDays? = nil, minimumPasswordLength: Swift.String? = nil, minimumPasswordLengthMetadata: DocuSignAPI.DSAPIAccountMinimumPasswordLength? = nil, passwordIncludeDigit: Swift.Bool = false, passwordIncludeDigitOrSpecialCharacter: Swift.Bool = false, passwordIncludeLowerCase: Swift.Bool = false, passwordIncludeSpecialCharacter: Swift.Bool = false, passwordIncludeUpperCase: Swift.Bool = false, passwordStrengthType: Swift.String? = nil, passwordStrengthTypeMetadata: DocuSignAPI.DSAPIAccountPasswordStrengthType? = nil, questionsRequired: Swift.String? = nil, questionsRequiredMetadata: DocuSignAPI.DSAPIAccountPasswordQuestionsRequired? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIBrandsResponse : Swift.Codable {
  public var brands: [DocuSignAPI.DSAPIBrand]?
  public var recipientBrandIdDefault: Swift.String?
  public var senderBrandIdDefault: Swift.String?
  public init(brands: [DocuSignAPI.DSAPIBrand]? = nil, recipientBrandIdDefault: Swift.String? = nil, senderBrandIdDefault: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIServiceInformation : Swift.Codable {
  public var buildBranch: Swift.String?
  public var buildBranchDeployedDateTime: Foundation.Date?
  public var buildSHA: Swift.String?
  public var buildVersion: Swift.String?
  public var linkedSites: [Swift.String]?
  public var serviceVersions: [DocuSignAPI.DSAPIServiceVersion]?
  public init(buildBranch: Swift.String? = nil, buildBranchDeployedDateTime: Foundation.Date? = nil, buildSHA: Swift.String? = nil, buildVersion: Swift.String? = nil, linkedSites: [Swift.String]? = nil, serviceVersions: [DocuSignAPI.DSAPIServiceVersion]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIConnectLog : Swift.Codable {
  public var accountId: Swift.String?
  public var configUrl: Foundation.URL?
  public var connectDebugLog: [DocuSignAPI.DSAPIConnectDebugLog]?
  public var connectId: Swift.String?
  public var created: Swift.String?
  public var email: Swift.String?
  public var envelopeId: Swift.String?
  public var error: Swift.String?
  public var failureId: Swift.String?
  public var failureUri: Foundation.URL?
  public var lastTry: Swift.String?
  public var logId: Swift.String?
  public var logUri: Foundation.URL?
  public var retryCount: Swift.String?
  public var retryUri: Foundation.URL?
  public var status: Swift.String?
  public var subject: Swift.String?
  public var userName: Swift.String?
  public init(accountId: Swift.String? = nil, configUrl: Foundation.URL? = nil, connectDebugLog: [DocuSignAPI.DSAPIConnectDebugLog]? = nil, connectId: Swift.String? = nil, created: Swift.String? = nil, email: Swift.String? = nil, envelopeId: Swift.String? = nil, error: Swift.String? = nil, failureId: Swift.String? = nil, failureUri: Foundation.URL? = nil, lastTry: Swift.String? = nil, logId: Swift.String? = nil, logUri: Foundation.URL? = nil, retryCount: Swift.String? = nil, retryUri: Foundation.URL? = nil, status: Swift.String? = nil, subject: Swift.String? = nil, userName: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIExternalFolder : Swift.Codable {
  public var endPosition: Swift.String?
  public var errorDetails: DocuSignAPI.DSAPIExternalDocServiceErrorDetails?
  public var _id: Swift.String?
  public var items: [DocuSignAPI.DSAPIExternalFile]?
  public var name: Swift.String?
  public var nextUri: Foundation.URL?
  public var previousUri: Foundation.URL?
  public var resultSetSize: Swift.String?
  public var startPosition: Swift.String?
  public var totalSetSize: Swift.String?
  public init(endPosition: Swift.String? = nil, errorDetails: DocuSignAPI.DSAPIExternalDocServiceErrorDetails? = nil, _id: Swift.String? = nil, items: [DocuSignAPI.DSAPIExternalFile]? = nil, name: Swift.String? = nil, nextUri: Foundation.URL? = nil, previousUri: Foundation.URL? = nil, resultSetSize: Swift.String? = nil, startPosition: Swift.String? = nil, totalSetSize: Swift.String? = nil)
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case endPosition
    case errorDetails
    case _id
    case items
    case name
    case nextUri
    case previousUri
    case resultSetSize
    case startPosition
    case totalSetSize
    public init?(rawValue: Swift.String)
    public init?(stringValue: Swift.String)
    public init?(intValue: Swift.Int)
    public typealias RawValue = Swift.String
    public var intValue: Swift.Int? {
      get
    }
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @objcMembers public class DSAPIEmail : ObjectiveC.NSObject, Swift.Codable {
  @objc @DocuSignAPI.BoolFromString public var anchorAllowWhiteSpaceInCharacters: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorAllowWhiteSpaceInCharactersMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var anchorCaseSensitive: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorCaseSensitiveMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorHorizontalAlignment: Swift.String?
  @objc public var anchorHorizontalAlignmentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var anchorIgnoreIfNotPresent: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorIgnoreIfNotPresentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var anchorMatchWholeWord: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorMatchWholeWordMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorString: Swift.String?
  @objc public var anchorStringMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorTabProcessorVersion: Swift.String?
  @objc public var anchorTabProcessorVersionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorUnits: Swift.String?
  @objc public var anchorUnitsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorXOffset: Swift.String?
  @objc public var anchorXOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorYOffset: Swift.String?
  @objc public var anchorYOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var bold: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var boldMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var concealValueOnDocument: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var concealValueOnDocumentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var conditionalParentLabel: Swift.String?
  @objc public var conditionalParentLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var conditionalParentValue: Swift.String?
  @objc public var conditionalParentValueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var customTabId: Swift.String?
  @objc public var customTabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var disableAutoSize: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var disableAutoSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var documentId: Swift.String?
  @objc public var documentIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  @objc public var font: Swift.String?
  @objc public var fontColor: Swift.String?
  @objc public var fontColorMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var fontMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var fontSize: Swift.String?
  @objc public var fontSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var formOrder: Swift.String?
  @objc public var formOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var formPageLabel: Swift.String?
  @objc public var formPageLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var formPageNumber: Swift.String?
  @objc public var formPageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var height: Swift.String?
  @objc public var heightMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var italic: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var italicMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var localePolicy: DocuSignAPI.DSAPILocalePolicyTab?
  @objc @DocuSignAPI.BoolFromString public var locked: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var lockedMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var maxLength: Swift.String?
  @objc public var maxLengthMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var mergeField: DocuSignAPI.DSAPIMergeField?
  @objc public var mergeFieldXml: Swift.String?
  @objc public var name: Swift.String?
  @objc public var nameMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var originalValue: Swift.String?
  @objc public var originalValueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var pageNumber: Swift.String?
  @objc public var pageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var recipientId: Swift.String?
  @objc public var recipientIdGuid: Swift.String?
  @objc public var recipientIdGuidMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var recipientIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var requireAll: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var requireAllMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var required: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var requiredMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var requireInitialOnSharedChange: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var requireInitialOnSharedChangeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var senderRequired: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var senderRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var shared: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var sharedMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var shareToRecipients: Swift.String?
  @objc public var shareToRecipientsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var smartContractInformation: DocuSignAPI.DSAPISmartContractInformation?
  @objc public var source: Swift.String?
  @objc public var status: Swift.String?
  @objc public var statusMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabGroupLabels: [Swift.String]?
  @objc public var tabGroupLabelsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabId: Swift.String?
  @objc public var tabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabLabel: Swift.String?
  @objc public var tabLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabOrder: Swift.String?
  @objc public var tabOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabType: Swift.String?
  @objc public var tabTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var templateLocked: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var templateLockedMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var templateRequired: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var templateRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tooltip: Swift.String?
  @objc public var toolTipMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var underline: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var underlineMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var validationMessage: Swift.String?
  @objc public var validationMessageMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var validationPattern: Swift.String?
  @objc public var validationPatternMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var value: Swift.String?
  @objc public var valueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var width: Swift.String?
  @objc public var widthMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var xPosition: Swift.String?
  @objc public var xPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var yPosition: Swift.String?
  @objc public var yPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public init(anchorAllowWhiteSpaceInCharacters: Swift.Bool = false, anchorAllowWhiteSpaceInCharactersMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorCaseSensitive: Swift.Bool = false, anchorCaseSensitiveMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorHorizontalAlignment: Swift.String? = nil, anchorHorizontalAlignmentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorIgnoreIfNotPresent: Swift.Bool = false, anchorIgnoreIfNotPresentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorMatchWholeWord: Swift.Bool = false, anchorMatchWholeWordMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorString: Swift.String? = nil, anchorStringMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorTabProcessorVersion: Swift.String? = nil, anchorTabProcessorVersionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorUnits: Swift.String? = nil, anchorUnitsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorXOffset: Swift.String? = nil, anchorXOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorYOffset: Swift.String? = nil, anchorYOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, bold: Swift.Bool = false, boldMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, concealValueOnDocument: Swift.Bool = false, concealValueOnDocumentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, conditionalParentLabel: Swift.String? = nil, conditionalParentLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, conditionalParentValue: Swift.String? = nil, conditionalParentValueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, customTabId: Swift.String? = nil, customTabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, disableAutoSize: Swift.Bool = false, disableAutoSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, documentId: Swift.String? = nil, documentIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, font: Swift.String? = nil, fontColor: Swift.String? = nil, fontColorMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, fontMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, fontSize: Swift.String? = nil, fontSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formOrder: Swift.String? = nil, formOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formPageLabel: Swift.String? = nil, formPageLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formPageNumber: Swift.String? = nil, formPageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, height: Swift.String? = nil, heightMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, italic: Swift.Bool = false, italicMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, localePolicy: DocuSignAPI.DSAPILocalePolicyTab? = nil, locked: Swift.Bool = false, lockedMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, maxLength: Swift.String? = nil, maxLengthMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, mergeField: DocuSignAPI.DSAPIMergeField? = nil, mergeFieldXml: Swift.String? = nil, name: Swift.String? = nil, nameMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, originalValue: Swift.String? = nil, originalValueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, pageNumber: Swift.String? = nil, pageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, recipientId: Swift.String? = nil, recipientIdGuid: Swift.String? = nil, recipientIdGuidMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, recipientIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, requireAll: Swift.Bool = false, requireAllMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, required: Swift.Bool = false, requiredMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, requireInitialOnSharedChange: Swift.Bool = false, requireInitialOnSharedChangeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, senderRequired: Swift.Bool = false, senderRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, shared: Swift.Bool = false, sharedMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, shareToRecipients: Swift.String? = nil, shareToRecipientsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, smartContractInformation: DocuSignAPI.DSAPISmartContractInformation? = nil, source: Swift.String? = nil, status: Swift.String? = nil, statusMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabGroupLabels: [Swift.String]? = nil, tabGroupLabelsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabId: Swift.String? = nil, tabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabLabel: Swift.String? = nil, tabLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabOrder: Swift.String? = nil, tabOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabType: Swift.String? = nil, tabTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, templateLocked: Swift.Bool = false, templateLockedMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, templateRequired: Swift.Bool = false, templateRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tooltip: Swift.String? = nil, toolTipMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, underline: Swift.Bool = false, underlineMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, validationMessage: Swift.String? = nil, validationMessageMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, validationPattern: Swift.String? = nil, validationPatternMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, value: Swift.String? = nil, valueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, width: Swift.String? = nil, widthMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, xPosition: Swift.String? = nil, xPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, yPosition: Swift.String? = nil, yPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIEnvelopeAttachmentsRequest : Swift.Codable {
  public var attachments: [DocuSignAPI.DSAPIAttachment]?
  public init(attachments: [DocuSignAPI.DSAPIAttachment]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIAddressInformation : Swift.Codable {
  public var address1: Swift.String?
  public var address2: Swift.String?
  public var city: Swift.String?
  public var country: Swift.String?
  public var fax: Swift.String?
  public var phone: Swift.String?
  public var postalCode: Swift.String?
  public var stateOrProvince: Swift.String?
  public var zipPlus4: Swift.String?
  public init(address1: Swift.String? = nil, address2: Swift.String? = nil, city: Swift.String? = nil, country: Swift.String? = nil, fax: Swift.String? = nil, phone: Swift.String? = nil, postalCode: Swift.String? = nil, stateOrProvince: Swift.String? = nil, zipPlus4: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @objcMembers public class DSAPINumber : ObjectiveC.NSObject, Swift.Codable {
  @objc @DocuSignAPI.BoolFromString public var anchorAllowWhiteSpaceInCharacters: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorAllowWhiteSpaceInCharactersMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var anchorCaseSensitive: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorCaseSensitiveMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorHorizontalAlignment: Swift.String?
  @objc public var anchorHorizontalAlignmentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var anchorIgnoreIfNotPresent: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorIgnoreIfNotPresentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var anchorMatchWholeWord: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var anchorMatchWholeWordMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorString: Swift.String?
  @objc public var anchorStringMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorTabProcessorVersion: Swift.String?
  @objc public var anchorTabProcessorVersionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorUnits: Swift.String?
  @objc public var anchorUnitsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorXOffset: Swift.String?
  @objc public var anchorXOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var anchorYOffset: Swift.String?
  @objc public var anchorYOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var bold: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var boldMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var concealValueOnDocument: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var concealValueOnDocumentMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var conditionalParentLabel: Swift.String?
  @objc public var conditionalParentLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var conditionalParentValue: Swift.String?
  @objc public var conditionalParentValueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var customTabId: Swift.String?
  @objc public var customTabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var disableAutoSize: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var disableAutoSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var documentId: Swift.String?
  @objc public var documentIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var errorDetails: DocuSignAPI.DSAPIErrorDetails?
  @objc public var font: Swift.String?
  @objc public var fontColor: Swift.String?
  @objc public var fontColorMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var fontMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var fontSize: Swift.String?
  @objc public var fontSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var formOrder: Swift.String?
  @objc public var formOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var formPageLabel: Swift.String?
  @objc public var formPageLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var formPageNumber: Swift.String?
  @objc public var formPageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var formula: Swift.String?
  @objc public var formulaMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var height: Swift.String?
  @objc public var heightMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var isPaymentAmount: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var isPaymentAmountMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var italic: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var italicMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var localePolicy: DocuSignAPI.DSAPILocalePolicyTab?
  @objc @DocuSignAPI.BoolFromString public var locked: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var lockedMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var maxLength: Swift.String?
  @objc public var maxLengthMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var mergeField: DocuSignAPI.DSAPIMergeField?
  @objc public var mergeFieldXml: Swift.String?
  @objc public var name: Swift.String?
  @objc public var nameMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var originalValue: Swift.String?
  @objc public var originalValueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var pageNumber: Swift.String?
  @objc public var pageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var recipientId: Swift.String?
  @objc public var recipientIdGuid: Swift.String?
  @objc public var recipientIdGuidMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var recipientIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var requireAll: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var requireAllMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var required: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var requiredMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var requireInitialOnSharedChange: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var requireInitialOnSharedChangeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var senderRequired: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var senderRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var shared: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var sharedMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var shareToRecipients: Swift.String?
  @objc public var shareToRecipientsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public var smartContractInformation: DocuSignAPI.DSAPISmartContractInformation?
  @objc public var source: Swift.String?
  @objc public var status: Swift.String?
  @objc public var statusMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabGroupLabels: [Swift.String]?
  @objc public var tabGroupLabelsMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabId: Swift.String?
  @objc public var tabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabLabel: Swift.String?
  @objc public var tabLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabOrder: Swift.String?
  @objc public var tabOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tabType: Swift.String?
  @objc public var tabTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var templateLocked: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var templateLockedMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var templateRequired: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var templateRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var tooltip: Swift.String?
  @objc public var toolTipMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc @DocuSignAPI.BoolFromString public var underline: Swift.Bool {
    @objc get
    @objc set
    _modify
  }
  @objc public var underlineMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var validationMessage: Swift.String?
  @objc public var validationMessageMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var validationPattern: Swift.String?
  @objc public var validationPatternMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var value: Swift.String?
  @objc public var valueMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var width: Swift.String?
  @objc public var widthMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var xPosition: Swift.String?
  @objc public var xPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  @objc public var yPosition: Swift.String?
  @objc public var yPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata?
  public init(anchorAllowWhiteSpaceInCharacters: Swift.Bool = false, anchorAllowWhiteSpaceInCharactersMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorCaseSensitive: Swift.Bool = false, anchorCaseSensitiveMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorHorizontalAlignment: Swift.String? = nil, anchorHorizontalAlignmentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorIgnoreIfNotPresent: Swift.Bool = false, anchorIgnoreIfNotPresentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorMatchWholeWord: Swift.Bool = false, anchorMatchWholeWordMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorString: Swift.String? = nil, anchorStringMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorTabProcessorVersion: Swift.String? = nil, anchorTabProcessorVersionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorUnits: Swift.String? = nil, anchorUnitsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorXOffset: Swift.String? = nil, anchorXOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, anchorYOffset: Swift.String? = nil, anchorYOffsetMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, bold: Swift.Bool = false, boldMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, concealValueOnDocument: Swift.Bool = false, concealValueOnDocumentMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, conditionalParentLabel: Swift.String? = nil, conditionalParentLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, conditionalParentValue: Swift.String? = nil, conditionalParentValueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, customTabId: Swift.String? = nil, customTabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, disableAutoSize: Swift.Bool = false, disableAutoSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, documentId: Swift.String? = nil, documentIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, errorDetails: DocuSignAPI.DSAPIErrorDetails? = nil, font: Swift.String? = nil, fontColor: Swift.String? = nil, fontColorMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, fontMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, fontSize: Swift.String? = nil, fontSizeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formOrder: Swift.String? = nil, formOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formPageLabel: Swift.String? = nil, formPageLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formPageNumber: Swift.String? = nil, formPageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, formula: Swift.String? = nil, formulaMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, height: Swift.String? = nil, heightMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, isPaymentAmount: Swift.Bool = false, isPaymentAmountMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, italic: Swift.Bool = false, italicMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, localePolicy: DocuSignAPI.DSAPILocalePolicyTab? = nil, locked: Swift.Bool = false, lockedMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, maxLength: Swift.String? = nil, maxLengthMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, mergeField: DocuSignAPI.DSAPIMergeField? = nil, mergeFieldXml: Swift.String? = nil, name: Swift.String? = nil, nameMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, originalValue: Swift.String? = nil, originalValueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, pageNumber: Swift.String? = nil, pageNumberMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, recipientId: Swift.String? = nil, recipientIdGuid: Swift.String? = nil, recipientIdGuidMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, recipientIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, requireAll: Swift.Bool = false, requireAllMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, required: Swift.Bool = false, requiredMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, requireInitialOnSharedChange: Swift.Bool = false, requireInitialOnSharedChangeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, senderRequired: Swift.Bool = false, senderRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, shared: Swift.Bool = false, sharedMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, shareToRecipients: Swift.String? = nil, shareToRecipientsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, smartContractInformation: DocuSignAPI.DSAPISmartContractInformation? = nil, source: Swift.String? = nil, status: Swift.String? = nil, statusMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabGroupLabels: [Swift.String]? = nil, tabGroupLabelsMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabId: Swift.String? = nil, tabIdMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabLabel: Swift.String? = nil, tabLabelMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabOrder: Swift.String? = nil, tabOrderMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tabType: Swift.String? = nil, tabTypeMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, templateLocked: Swift.Bool = false, templateLockedMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, templateRequired: Swift.Bool = false, templateRequiredMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, tooltip: Swift.String? = nil, toolTipMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, underline: Swift.Bool = false, underlineMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, validationMessage: Swift.String? = nil, validationMessageMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, validationPattern: Swift.String? = nil, validationPatternMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, value: Swift.String? = nil, valueMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, width: Swift.String? = nil, widthMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, xPosition: Swift.String? = nil, xPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil, yPosition: Swift.String? = nil, yPositionMetadata: DocuSignAPI.DSAPIPropertyMetadata? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @objcMembers public class DSAPIDateStampProperties : ObjectiveC.NSObject, Swift.Codable {
  @objc public var dateAreaHeight: Swift.String?
  @objc public var dateAreaWidth: Swift.String?
  @objc public var dateAreaX: Swift.String?
  @objc public var dateAreaY: Swift.String?
  @objc public init(dateAreaHeight: Swift.String? = nil, dateAreaWidth: Swift.String? = nil, dateAreaX: Swift.String? = nil, dateAreaY: Swift.String? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct DSAPIPaymentSignerValues : Swift.Codable {
  public var paymentOption: Swift.String?
  public init(paymentOption: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension DocuSignAPI.DSAPIRecipientIdentityPhoneNumber.CodingKeys : Swift.Equatable {}
extension DocuSignAPI.DSAPIRecipientIdentityPhoneNumber.CodingKeys : Swift.Hashable {}
extension DocuSignAPI.DSAPIRecipientIdentityPhoneNumber.CodingKeys : Swift.RawRepresentable {}
extension DocuSignAPI.DSAPIComment.CodingKeys : Swift.Equatable {}
extension DocuSignAPI.DSAPIComment.CodingKeys : Swift.Hashable {}
extension DocuSignAPI.DSAPIComment.CodingKeys : Swift.RawRepresentable {}
@available(*, unavailable, renamed: "Connection")
extension DocuSignAPI.Reachability.NetworkStatus : Swift.Equatable {}
@available(*, unavailable, renamed: "Connection")
extension DocuSignAPI.Reachability.NetworkStatus : Swift.Hashable {}
extension DocuSignAPI.Reachability.Connection : Swift.Equatable {}
extension DocuSignAPI.Reachability.Connection : Swift.Hashable {}
extension DocuSignAPI.DSAPIWorkspaceItem.CodingKeys : Swift.Equatable {}
extension DocuSignAPI.DSAPIWorkspaceItem.CodingKeys : Swift.Hashable {}
extension DocuSignAPI.DSAPIWorkspaceItem.CodingKeys : Swift.RawRepresentable {}
extension DocuSignAPI.DSAPICommentPublish.CodingKeys : Swift.Equatable {}
extension DocuSignAPI.DSAPICommentPublish.CodingKeys : Swift.Hashable {}
extension DocuSignAPI.DSAPICommentPublish.CodingKeys : Swift.RawRepresentable {}
extension DocuSignAPI.DSAPIWatermark.CodingKeys : Swift.Equatable {}
extension DocuSignAPI.DSAPIWatermark.CodingKeys : Swift.Hashable {}
extension DocuSignAPI.DSAPIWatermark.CodingKeys : Swift.RawRepresentable {}
extension DocuSignAPI.DSAPIPaymentLineItem.CodingKeys : Swift.Equatable {}
extension DocuSignAPI.DSAPIPaymentLineItem.CodingKeys : Swift.Hashable {}
extension DocuSignAPI.DSAPIPaymentLineItem.CodingKeys : Swift.RawRepresentable {}
extension DocuSignAPI.DSAPIDelegationInfo.CodingKeys : Swift.Equatable {}
extension DocuSignAPI.DSAPIDelegationInfo.CodingKeys : Swift.Hashable {}
extension DocuSignAPI.DSAPIDelegationInfo.CodingKeys : Swift.RawRepresentable {}
extension DocuSignAPI.DSAPIAccountSettingsInformation.CodingKeys : Swift.Equatable {}
extension DocuSignAPI.DSAPIAccountSettingsInformation.CodingKeys : Swift.Hashable {}
extension DocuSignAPI.DSAPIAccountSettingsInformation.CodingKeys : Swift.RawRepresentable {}
extension DocuSignAPI.DSAPIConnectSalesforceObject.CodingKeys : Swift.Equatable {}
extension DocuSignAPI.DSAPIConnectSalesforceObject.CodingKeys : Swift.Hashable {}
extension DocuSignAPI.DSAPIConnectSalesforceObject.CodingKeys : Swift.RawRepresentable {}
extension DocuSignAPI.DSAPIExternalFile.CodingKeys : Swift.Equatable {}
extension DocuSignAPI.DSAPIExternalFile.CodingKeys : Swift.Hashable {}
extension DocuSignAPI.DSAPIExternalFile.CodingKeys : Swift.RawRepresentable {}
extension DocuSignAPI.DSAPIProofServiceViewLink.CodingKeys : Swift.Equatable {}
extension DocuSignAPI.DSAPIProofServiceViewLink.CodingKeys : Swift.Hashable {}
extension DocuSignAPI.DSAPIProofServiceViewLink.CodingKeys : Swift.RawRepresentable {}
extension DocuSignAPI.DSAPIOauthAccess.CodingKeys : Swift.Equatable {}
extension DocuSignAPI.DSAPIOauthAccess.CodingKeys : Swift.Hashable {}
extension DocuSignAPI.DSAPIOauthAccess.CodingKeys : Swift.RawRepresentable {}
extension DocuSignAPI.DSAPIBillingPaymentItem.CodingKeys : Swift.Equatable {}
extension DocuSignAPI.DSAPIBillingPaymentItem.CodingKeys : Swift.Hashable {}
extension DocuSignAPI.DSAPIBillingPaymentItem.CodingKeys : Swift.RawRepresentable {}
extension DocuSignAPI.DSAPIConditionalRecipientRuleFilter.CodingKeys : Swift.Equatable {}
extension DocuSignAPI.DSAPIConditionalRecipientRuleFilter.CodingKeys : Swift.Hashable {}
extension DocuSignAPI.DSAPIConditionalRecipientRuleFilter.CodingKeys : Swift.RawRepresentable {}
extension DocuSignAPI.DSAPIResourcesResourceContentTypeBody.CodingKeys : Swift.Equatable {}
extension DocuSignAPI.DSAPIResourcesResourceContentTypeBody.CodingKeys : Swift.Hashable {}
extension DocuSignAPI.DSAPIResourcesResourceContentTypeBody.CodingKeys : Swift.RawRepresentable {}
extension DocuSignAPI.DSAPIRecipientFormData.CodingKeys : Swift.Equatable {}
extension DocuSignAPI.DSAPIRecipientFormData.CodingKeys : Swift.Hashable {}
extension DocuSignAPI.DSAPIRecipientFormData.CodingKeys : Swift.RawRepresentable {}
extension DocuSignAPI.DSAPIConnectSalesforceField.CodingKeys : Swift.Equatable {}
extension DocuSignAPI.DSAPIConnectSalesforceField.CodingKeys : Swift.Hashable {}
extension DocuSignAPI.DSAPIConnectSalesforceField.CodingKeys : Swift.RawRepresentable {}
extension DocuSignAPI.DSAPIExternalFolder.CodingKeys : Swift.Equatable {}
extension DocuSignAPI.DSAPIExternalFolder.CodingKeys : Swift.Hashable {}
extension DocuSignAPI.DSAPIExternalFolder.CodingKeys : Swift.RawRepresentable {}
